/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： soa_log-V1.1.1
  CmVersion： 1.1.217
  ServiceVersion: V1.1.1
  ServiceLatestModifyTime: 2023-08-21T11:31:03
  Generate Time: Aug 21, 2023 1:50:56 PM
*****************************************************************/
#ifndef logconfig_SKELETON_HPP
#define logconfig_SKELETON_HPP
#include "changan/common_data_types.h"
#include "changan/Common.h"
#include "changan/dds_util.h"
#include "changan/logconfig.h"
#include "changan/base_skeleton.hpp"
#include "changan/base_wait.hpp"
#include <iostream>
#include <string.h>
#include <mutex>
namespace com {
namespace changan {
namespace soa_log {
namespace skeleton {
	extern void on_carDrive_logconfig_request_data_available(int32_t reader, void* arg);

	class logconfig_service_interface {
	public:
	    virtual ~logconfig_service_interface() = default;

		virtual std::string SETSOALOG(const std::string &logLevel,const std::string &logDir) = 0;
	};
    class logconfig_Skeleton :public logconfig_service_interface, public IBaseWait,public ConsumerMatchedStatusHandler{
		public:
			logconfig_Skeleton(logconfig_service_interface* service,std::string config="");
			static logconfig_Skeleton& get_instance();
			bool init(std::string config="");
			bool destroy();
			void wait_client_online();
            const std::string get_service_name() {
				return this->service_name;
			}
			std::string SETSOALOG(const std::string &logLevel,const std::string &logDir) {
				return this->_service->SETSOALOG(logLevel,logDir);
			}
            dds_return_t send_reply(carDrive_logconfig_Reply* reply);

		private:
		    std::string _config;
			bool init_flag=false;
			std::mutex init_mutex;

			const std::string service_name="logconfig_skeleton";
			logconfig_service_interface * _service;
			dds_rpc_handle_t dds_rpc_request_handle= { -1, -1, -1 };
			dds_rpc_handle_t dds_rpc_reply_handle= { -1, -1, -1 };

	};

}
}
}
}
#endif

