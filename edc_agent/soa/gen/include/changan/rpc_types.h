/****************************************************************

  Generated by Autocore DDS IDL to C Translator
  File name: rpc_types.h
  Source: rpc_types.idl
  AutoCore DDS: V1.6.5

*****************************************************************/
#ifndef DDSC_RPC_TYPES_H
#define DDSC_RPC_TYPES_H

#include "dds/ddsc/dds_public_impl.h"

#include "dds/dds.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifndef DDS_TYPES
#define DDS_TYPES
typedef uint8_t DDS_GuidPrefix_t[12];

#define DDS_GuidPrefix_t__alloc() \
((DDS_GuidPrefix_t*) dds_alloc (sizeof (DDS_GuidPrefix_t)));

typedef uint8_t DDS_EntityKey_t[3];

#define DDS_EntityKey_t__alloc() \
((DDS_EntityKey_t*) dds_alloc (sizeof (DDS_EntityKey_t)));

typedef struct DDS_EntityId_t
{
  DDS_EntityKey_t entityKey;
  uint8_t entityKind;
} DDS_EntityId_t;

typedef struct DDS_GUID_t
{
  DDS_GuidPrefix_t guidPrefix;
  struct DDS_EntityId_t entityId;
} DDS_GUID_t;

typedef struct DDS_SequenceNumber_t
{
  int32_t high;
  uint32_t low;
} DDS_SequenceNumber_t;

typedef struct DDS_SampleIdentity
{
  struct DDS_GUID_t writer_guid;
  struct DDS_SequenceNumber_t sequence_number;
} DDS_SampleIdentity;

#endif

typedef uint8_t DDS_RPC_UnknownOperation;

#define DDS_RPC_UnknownOperation__alloc() \
((DDS_RPC_UnknownOperation*) dds_alloc (sizeof (DDS_RPC_UnknownOperation)));

typedef uint8_t DDS_RPC_UnknownException;

#define DDS_RPC_UnknownException__alloc() \
((DDS_RPC_UnknownException*) dds_alloc (sizeof (DDS_RPC_UnknownException)));

typedef uint8_t DDS_RPC_UnusedMember;

#define DDS_RPC_UnusedMember__alloc() \
((DDS_RPC_UnusedMember*) dds_alloc (sizeof (DDS_RPC_UnusedMember)));

typedef enum DDS_RPC_RemoteExceptionCode_t
{
  DDS_RPC_REMOTE_EX_OK,
  DDS_RPC_REMOTE_EX_UNSUPPORTED,
  DDS_RPC_REMOTE_EX_INVALID_ARGUMENT,
  DDS_RPC_REMOTE_EX_OUT_OF_RESOURCES,
  DDS_RPC_REMOTE_EX_UNKNOWN_OPERATION,
  DDS_RPC_REMOTE_EX_UNKNOWN_EXCEPTION,
  DDS_RPC_REMOTE_TIMEOUT_EXCEPTION,
  DDS_RPC_REMOTE_METHOD_NOT_FOUND,
  DDS_RPC_REMOTE_SERVICE_NOT_REGISTER
} DDS_RPC_RemoteExceptionCode_t;

#define DDS_RPC_RemoteExceptionCode_t__alloc() \
((DDS_RPC_RemoteExceptionCode_t*) dds_alloc (sizeof (DDS_RPC_RemoteExceptionCode_t)));

typedef char DDS_RPC_InstanceName[256];

#define DDS_RPC_InstanceName__alloc() \
((DDS_RPC_InstanceName*) dds_alloc (sizeof (DDS_RPC_InstanceName)));

typedef struct DDS_RPC_RequestHeader
{
  struct DDS_SampleIdentity requestId;
  DDS_RPC_InstanceName instanceTitle;
} DDS_RPC_RequestHeader;

typedef struct DDS_RPC_ReplyHeader
{
  struct DDS_SampleIdentity relatedRequestId;
  DDS_RPC_RemoteExceptionCode_t remoteEx;
} DDS_RPC_ReplyHeader;

typedef uint8_t DDS_NOTIFY_UnknownOperation;

#define DDS_NOTIFY_UnknownOperation__alloc() \
((DDS_NOTIFY_UnknownOperation*) dds_alloc (sizeof (DDS_NOTIFY_UnknownOperation)));

typedef uint8_t DDS_NOTIFY_UnknownException;

#define DDS_NOTIFY_UnknownException__alloc() \
((DDS_NOTIFY_UnknownException*) dds_alloc (sizeof (DDS_NOTIFY_UnknownException)));

typedef uint8_t DDS_NOTIFY_UnusedMember;

#define DDS_NOTIFY_UnusedMember__alloc() \
((DDS_NOTIFY_UnusedMember*) dds_alloc (sizeof (DDS_NOTIFY_UnusedMember)));

typedef enum DDS_NOTIFY_RemoteExceptionCode_t
{
  DDS_NOTIFY_NOTIFY_EX_OK,
  DDS_NOTIFY_NOTIFY_EX_TIMEOUT,
  DDS_NOTIFY_NOTIFY_EX_INVALID_ARGUMENT,
  DDS_NOTIFY_NOTIFY_EX_OUT_OF_RESOURCES,
  DDS_NOTIFY_NOTIFY_EX_ERROR,
  DDS_NOTIFY_NOTIFY_EX_UNKNOWN_EXCEPTION
} DDS_NOTIFY_RemoteExceptionCode_t;

#define DDS_NOTIFY_RemoteExceptionCode_t__alloc() \
((DDS_NOTIFY_RemoteExceptionCode_t*) dds_alloc (sizeof (DDS_NOTIFY_RemoteExceptionCode_t)));

typedef struct DDS_NOTIFY_NotifyHeader
{
  struct DDS_SampleIdentity notifyId;
} DDS_NOTIFY_NotifyHeader;

typedef struct{
  int32_t participant;
  int32_t writer;
  int32_t reader;
  DDS_GUID_t writer_guid;
#if DDS_HAS_ACFW_RPC_PATCHES
  void* user_data;
#endif
  DDS_SequenceNumber_t rpc_client_sn;
}dds_rpc_handle_t;

typedef void (*dds_rpc_on_reply_message)(dds_rpc_handle_t* rpc_handle, DDS_SampleIdentity request_id, ...);
typedef void (*dds_rpc_on_request_message)(dds_rpc_handle_t* rpc_handle, DDS_SampleIdentity request_id, ...);

#define DDS_RPC_PEER_NOTMATCH (0)  /** RPC entity(reader or writer) peer not match or disconnected */
#define DDS_RPC_PEER_MATCHED  (1)  /** RPC entity(reader or writer) peer matched */
typedef enum dds_rpc_kind_t
{
  DDS_RPC_KIND_READER,
  DDS_RPC_KIND_WRITER
}dds_rpc_kind_t;
typedef uint32_t rpc_matched_status_t;
typedef void (*dds_rpc_on_matched)(dds_rpc_kind_t entity_kind, ...);
#ifdef __cplusplus
}
#endif

#endif /* DDSC_RPC_TYPES_H */
