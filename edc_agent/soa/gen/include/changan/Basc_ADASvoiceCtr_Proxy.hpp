/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.0.1
  ServiceLatestModifyTime: 2023-06-12T16:50:10
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#ifndef Basc_ADASvoiceCtr_Proxy_HPP
#define Basc_ADASvoiceCtr_Proxy_HPP
#include <string.h>
#include <future>
#include <chrono>
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "dds/ddsrt/sync.h"
#include "changan/Basc_ADASvoiceCtr.h"
#include "changan/base_proxy.hpp"
#include "changan/base_wait.hpp"
#include "changan/dds_client.hpp"
#include <mutex>

namespace com {
namespace changan {
namespace carDrive {
namespace C2Controller {
namespace proxy {
	extern void on_carDrive_Basc_ADASvoiceCtr_reply_data_available(int32_t reader, void* arg);
	class Basc_ADASvoiceCtr_Proxy : IBaseProxy,IBaseWait, public ProviderMatchedStatusHandler, public dds_link_count{
		public:
		    static Basc_ADASvoiceCtr_Proxy& get_instance();
			bool init(std::string config="");
			void wait_server_online();
			bool destroy();
			DDS_GuidPrefix_t guid;
			Msg<ResponseInfo> RR_HU_VC_ACCactive(const HUset_VC_ACCactive &HUset_VC_ACCactive,const RequestInfo &Requestinfo) {
				return this->RR_HU_VC_ACCactive<DEFAULT_TIMEOUT>(HUset_VC_ACCactive,Requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_VC_ACCactive(const HUset_VC_ACCactive &HUset_VC_ACCactive,const RequestInfo &Requestinfo) {
				return this->RR_HU_VC_ACCactive(HUset_VC_ACCactive,Requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_HU_VC_CruiseSetDistance(const HUset_VC_CruiseSetDistance &HUset_VC_CruiseSetDistance,const RequestInfo &RequestInfo) {
				return this->RR_HU_VC_CruiseSetDistance<DEFAULT_TIMEOUT>(HUset_VC_CruiseSetDistance,RequestInfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_VC_CruiseSetDistance(const HUset_VC_CruiseSetDistance &HUset_VC_CruiseSetDistance,const RequestInfo &RequestInfo) {
				return this->RR_HU_VC_CruiseSetDistance(HUset_VC_CruiseSetDistance,RequestInfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_HU_VC_CruiseSetSpeed(const HUset_VC_CruiseSetSpeed &HUset_VC_CruiseSetSpeed,const RequestInfo &RequestInfo) {
				return this->RR_HU_VC_CruiseSetSpeed<DEFAULT_TIMEOUT>(HUset_VC_CruiseSetSpeed,RequestInfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_VC_CruiseSetSpeed(const HUset_VC_CruiseSetSpeed &HUset_VC_CruiseSetSpeed,const RequestInfo &RequestInfo) {
				return this->RR_HU_VC_CruiseSetSpeed(HUset_VC_CruiseSetSpeed,RequestInfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_HU_LaneChangeReq(const HUset_LaneChangeReq &HUset_LaneChangeReq,const RequestInfo &RequestInfo) {
				return this->RR_HU_LaneChangeReq<DEFAULT_TIMEOUT>(HUset_LaneChangeReq,RequestInfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_LaneChangeReq(const HUset_LaneChangeReq &HUset_LaneChangeReq,const RequestInfo &RequestInfo) {
				return this->RR_HU_LaneChangeReq(HUset_LaneChangeReq,RequestInfo, TIMEOUT);
			}
			const std::string get_service_name() {
				return this->service_name;
			}

		private:
		    const std::string service_name = "Basc_ADASvoiceCtr_skeleton";
			Msg<ResponseInfo> RR_HU_VC_ACCactive(const HUset_VC_ACCactive &HUset_VC_ACCactive,const RequestInfo &Requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_HU_VC_CruiseSetDistance(const HUset_VC_CruiseSetDistance &HUset_VC_CruiseSetDistance,const RequestInfo &RequestInfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_HU_VC_CruiseSetSpeed(const HUset_VC_CruiseSetSpeed &HUset_VC_CruiseSetSpeed,const RequestInfo &RequestInfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_HU_LaneChangeReq(const HUset_LaneChangeReq &HUset_LaneChangeReq,const RequestInfo &RequestInfo, size_t dds_rpc_time_out);

			dds_rpc_handle_t dds_rpc_request_handle = {-1,-1,-1};
			dds_rpc_handle_t dds_rpc_reply_handle = { -1,-1,-1 };

            bool init_flag = false;
            std::mutex init_mutex;

			Basc_ADASvoiceCtr_Proxy();
			~Basc_ADASvoiceCtr_Proxy();

			Basc_ADASvoiceCtr_Proxy(const Basc_ADASvoiceCtr_Proxy& signal);

			const Basc_ADASvoiceCtr_Proxy& operator=(const Basc_ADASvoiceCtr_Proxy& signal);
	};
}
}
}
}
}
#endif

