// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_basic_smartdrivingtips.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hmi_5fbasic_5fsmartdrivingtips_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hmi_5fbasic_5fsmartdrivingtips_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hmi_5fbasic_5fsmartdrivingtips_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto;
namespace HmiInterface {
class ACCShowDemand;
struct ACCShowDemandDefaultTypeInternal;
extern ACCShowDemandDefaultTypeInternal _ACCShowDemand_default_instance_;
class ADAScruiseRecflag;
struct ADAScruiseRecflagDefaultTypeInternal;
extern ADAScruiseRecflagDefaultTypeInternal _ADAScruiseRecflag_default_instance_;
class ADCNotice;
struct ADCNoticeDefaultTypeInternal;
extern ADCNoticeDefaultTypeInternal _ADCNotice_default_instance_;
class ADSNIDOutDis;
struct ADSNIDOutDisDefaultTypeInternal;
extern ADSNIDOutDisDefaultTypeInternal _ADSNIDOutDis_default_instance_;
class BasicSmartDrivingTips;
struct BasicSmartDrivingTipsDefaultTypeInternal;
extern BasicSmartDrivingTipsDefaultTypeInternal _BasicSmartDrivingTips_default_instance_;
class CNANotice;
struct CNANoticeDefaultTypeInternal;
extern CNANoticeDefaultTypeInternal _CNANotice_default_instance_;
class NIDShowDemand;
struct NIDShowDemandDefaultTypeInternal;
extern NIDShowDemandDefaultTypeInternal _NIDShowDemand_default_instance_;
class NewRecommend;
struct NewRecommendDefaultTypeInternal;
extern NewRecommendDefaultTypeInternal _NewRecommend_default_instance_;
class SmartDrivingTips;
struct SmartDrivingTipsDefaultTypeInternal;
extern SmartDrivingTipsDefaultTypeInternal _SmartDrivingTips_default_instance_;
class SpeedLimitShowDemand;
struct SpeedLimitShowDemandDefaultTypeInternal;
extern SpeedLimitShowDemandDefaultTypeInternal _SpeedLimitShowDemand_default_instance_;
class TJPNotice;
struct TJPNoticeDefaultTypeInternal;
extern TJPNoticeDefaultTypeInternal _TJPNotice_default_instance_;
class UDLCShowDemand;
struct UDLCShowDemandDefaultTypeInternal;
extern UDLCShowDemandDefaultTypeInternal _UDLCShowDemand_default_instance_;
}  // namespace HmiInterface
PROTOBUF_NAMESPACE_OPEN
template<> ::HmiInterface::ACCShowDemand* Arena::CreateMaybeMessage<::HmiInterface::ACCShowDemand>(Arena*);
template<> ::HmiInterface::ADAScruiseRecflag* Arena::CreateMaybeMessage<::HmiInterface::ADAScruiseRecflag>(Arena*);
template<> ::HmiInterface::ADCNotice* Arena::CreateMaybeMessage<::HmiInterface::ADCNotice>(Arena*);
template<> ::HmiInterface::ADSNIDOutDis* Arena::CreateMaybeMessage<::HmiInterface::ADSNIDOutDis>(Arena*);
template<> ::HmiInterface::BasicSmartDrivingTips* Arena::CreateMaybeMessage<::HmiInterface::BasicSmartDrivingTips>(Arena*);
template<> ::HmiInterface::CNANotice* Arena::CreateMaybeMessage<::HmiInterface::CNANotice>(Arena*);
template<> ::HmiInterface::NIDShowDemand* Arena::CreateMaybeMessage<::HmiInterface::NIDShowDemand>(Arena*);
template<> ::HmiInterface::NewRecommend* Arena::CreateMaybeMessage<::HmiInterface::NewRecommend>(Arena*);
template<> ::HmiInterface::SmartDrivingTips* Arena::CreateMaybeMessage<::HmiInterface::SmartDrivingTips>(Arena*);
template<> ::HmiInterface::SpeedLimitShowDemand* Arena::CreateMaybeMessage<::HmiInterface::SpeedLimitShowDemand>(Arena*);
template<> ::HmiInterface::TJPNotice* Arena::CreateMaybeMessage<::HmiInterface::TJPNotice>(Arena*);
template<> ::HmiInterface::UDLCShowDemand* Arena::CreateMaybeMessage<::HmiInterface::UDLCShowDemand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HmiInterface {

// ===================================================================

class SpeedLimitShowDemand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.SpeedLimitShowDemand) */ {
 public:
  inline SpeedLimitShowDemand() : SpeedLimitShowDemand(nullptr) {}
  ~SpeedLimitShowDemand() override;
  explicit constexpr SpeedLimitShowDemand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeedLimitShowDemand(const SpeedLimitShowDemand& from);
  SpeedLimitShowDemand(SpeedLimitShowDemand&& from) noexcept
    : SpeedLimitShowDemand() {
    *this = ::std::move(from);
  }

  inline SpeedLimitShowDemand& operator=(const SpeedLimitShowDemand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedLimitShowDemand& operator=(SpeedLimitShowDemand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeedLimitShowDemand& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeedLimitShowDemand* internal_default_instance() {
    return reinterpret_cast<const SpeedLimitShowDemand*>(
               &_SpeedLimitShowDemand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpeedLimitShowDemand& a, SpeedLimitShowDemand& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedLimitShowDemand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedLimitShowDemand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeedLimitShowDemand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeedLimitShowDemand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeedLimitShowDemand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpeedLimitShowDemand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedLimitShowDemand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.SpeedLimitShowDemand";
  }
  protected:
  explicit SpeedLimitShowDemand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLasTsrhostspdlimitFieldNumber = 1,
    kLasOverspeedvisualwarningFieldNumber = 2,
    kLasOverspeedsoundwarningFieldNumber = 3,
    kAccCslsetreqFieldNumber = 4,
    kAdsSpdlimitedstatusFieldNumber = 5,
    kAdsSpdlmttypeFieldNumber = 6,
    kAdsTsrhostnextspdlimitFieldNumber = 7,
    kAdsTsrhostnextspdlimitdistFieldNumber = 8,
  };
  // float las_tsrhostspdlimit = 1;
  void clear_las_tsrhostspdlimit();
  float las_tsrhostspdlimit() const;
  void set_las_tsrhostspdlimit(float value);
  private:
  float _internal_las_tsrhostspdlimit() const;
  void _internal_set_las_tsrhostspdlimit(float value);
  public:

  // uint32 las_overspeedvisualwarning = 2;
  void clear_las_overspeedvisualwarning();
  uint32_t las_overspeedvisualwarning() const;
  void set_las_overspeedvisualwarning(uint32_t value);
  private:
  uint32_t _internal_las_overspeedvisualwarning() const;
  void _internal_set_las_overspeedvisualwarning(uint32_t value);
  public:

  // uint32 las_overspeedsoundwarning = 3;
  void clear_las_overspeedsoundwarning();
  uint32_t las_overspeedsoundwarning() const;
  void set_las_overspeedsoundwarning(uint32_t value);
  private:
  uint32_t _internal_las_overspeedsoundwarning() const;
  void _internal_set_las_overspeedsoundwarning(uint32_t value);
  public:

  // uint32 acc_cslsetreq = 4;
  void clear_acc_cslsetreq();
  uint32_t acc_cslsetreq() const;
  void set_acc_cslsetreq(uint32_t value);
  private:
  uint32_t _internal_acc_cslsetreq() const;
  void _internal_set_acc_cslsetreq(uint32_t value);
  public:

  // uint32 ads_spdlimitedstatus = 5;
  void clear_ads_spdlimitedstatus();
  uint32_t ads_spdlimitedstatus() const;
  void set_ads_spdlimitedstatus(uint32_t value);
  private:
  uint32_t _internal_ads_spdlimitedstatus() const;
  void _internal_set_ads_spdlimitedstatus(uint32_t value);
  public:

  // uint32 ads_spdlmttype = 6;
  void clear_ads_spdlmttype();
  uint32_t ads_spdlmttype() const;
  void set_ads_spdlmttype(uint32_t value);
  private:
  uint32_t _internal_ads_spdlmttype() const;
  void _internal_set_ads_spdlmttype(uint32_t value);
  public:

  // float ads_tsrhostnextspdlimit = 7;
  void clear_ads_tsrhostnextspdlimit();
  float ads_tsrhostnextspdlimit() const;
  void set_ads_tsrhostnextspdlimit(float value);
  private:
  float _internal_ads_tsrhostnextspdlimit() const;
  void _internal_set_ads_tsrhostnextspdlimit(float value);
  public:

  // float ads_tsrhostnextspdlimitdist = 8;
  void clear_ads_tsrhostnextspdlimitdist();
  float ads_tsrhostnextspdlimitdist() const;
  void set_ads_tsrhostnextspdlimitdist(float value);
  private:
  float _internal_ads_tsrhostnextspdlimitdist() const;
  void _internal_set_ads_tsrhostnextspdlimitdist(float value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.SpeedLimitShowDemand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float las_tsrhostspdlimit_;
  uint32_t las_overspeedvisualwarning_;
  uint32_t las_overspeedsoundwarning_;
  uint32_t acc_cslsetreq_;
  uint32_t ads_spdlimitedstatus_;
  uint32_t ads_spdlmttype_;
  float ads_tsrhostnextspdlimit_;
  float ads_tsrhostnextspdlimitdist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto;
};
// -------------------------------------------------------------------

class CNANotice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.CNANotice) */ {
 public:
  inline CNANotice() : CNANotice(nullptr) {}
  ~CNANotice() override;
  explicit constexpr CNANotice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNANotice(const CNANotice& from);
  CNANotice(CNANotice&& from) noexcept
    : CNANotice() {
    *this = ::std::move(from);
  }

  inline CNANotice& operator=(const CNANotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNANotice& operator=(CNANotice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CNANotice& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNANotice* internal_default_instance() {
    return reinterpret_cast<const CNANotice*>(
               &_CNANotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CNANotice& a, CNANotice& b) {
    a.Swap(&b);
  }
  inline void Swap(CNANotice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNANotice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CNANotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CNANotice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CNANotice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CNANotice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNANotice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.CNANotice";
  }
  protected:
  explicit CNANotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdsCnatextinfoFieldNumber = 1,
  };
  // uint32 ads_cnatextinfo = 1;
  void clear_ads_cnatextinfo();
  uint32_t ads_cnatextinfo() const;
  void set_ads_cnatextinfo(uint32_t value);
  private:
  uint32_t _internal_ads_cnatextinfo() const;
  void _internal_set_ads_cnatextinfo(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.CNANotice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t ads_cnatextinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto;
};
// -------------------------------------------------------------------

class ADCNotice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.ADCNotice) */ {
 public:
  inline ADCNotice() : ADCNotice(nullptr) {}
  ~ADCNotice() override;
  explicit constexpr ADCNotice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADCNotice(const ADCNotice& from);
  ADCNotice(ADCNotice&& from) noexcept
    : ADCNotice() {
    *this = ::std::move(from);
  }

  inline ADCNotice& operator=(const ADCNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADCNotice& operator=(ADCNotice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADCNotice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADCNotice* internal_default_instance() {
    return reinterpret_cast<const ADCNotice*>(
               &_ADCNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ADCNotice& a, ADCNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(ADCNotice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADCNotice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADCNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADCNotice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADCNotice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ADCNotice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADCNotice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.ADCNotice";
  }
  protected:
  explicit ADCNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccAdcnoticeFieldNumber = 1,
  };
  // uint32 acc_adcnotice = 1;
  void clear_acc_adcnotice();
  uint32_t acc_adcnotice() const;
  void set_acc_adcnotice(uint32_t value);
  private:
  uint32_t _internal_acc_adcnotice() const;
  void _internal_set_acc_adcnotice(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.ADCNotice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t acc_adcnotice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto;
};
// -------------------------------------------------------------------

class TJPNotice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.TJPNotice) */ {
 public:
  inline TJPNotice() : TJPNotice(nullptr) {}
  ~TJPNotice() override;
  explicit constexpr TJPNotice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TJPNotice(const TJPNotice& from);
  TJPNotice(TJPNotice&& from) noexcept
    : TJPNotice() {
    *this = ::std::move(from);
  }

  inline TJPNotice& operator=(const TJPNotice& from) {
    CopyFrom(from);
    return *this;
  }
  inline TJPNotice& operator=(TJPNotice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TJPNotice& default_instance() {
    return *internal_default_instance();
  }
  static inline const TJPNotice* internal_default_instance() {
    return reinterpret_cast<const TJPNotice*>(
               &_TJPNotice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TJPNotice& a, TJPNotice& b) {
    a.Swap(&b);
  }
  inline void Swap(TJPNotice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TJPNotice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TJPNotice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TJPNotice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TJPNotice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TJPNotice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TJPNotice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.TJPNotice";
  }
  protected:
  explicit TJPNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdsTjptextinfoFieldNumber = 1,
  };
  // uint32 ads_tjptextinfo = 1;
  void clear_ads_tjptextinfo();
  uint32_t ads_tjptextinfo() const;
  void set_ads_tjptextinfo(uint32_t value);
  private:
  uint32_t _internal_ads_tjptextinfo() const;
  void _internal_set_ads_tjptextinfo(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.TJPNotice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t ads_tjptextinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto;
};
// -------------------------------------------------------------------

class NewRecommend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.NewRecommend) */ {
 public:
  inline NewRecommend() : NewRecommend(nullptr) {}
  ~NewRecommend() override;
  explicit constexpr NewRecommend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewRecommend(const NewRecommend& from);
  NewRecommend(NewRecommend&& from) noexcept
    : NewRecommend() {
    *this = ::std::move(from);
  }

  inline NewRecommend& operator=(const NewRecommend& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewRecommend& operator=(NewRecommend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewRecommend& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewRecommend* internal_default_instance() {
    return reinterpret_cast<const NewRecommend*>(
               &_NewRecommend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NewRecommend& a, NewRecommend& b) {
    a.Swap(&b);
  }
  inline void Swap(NewRecommend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewRecommend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewRecommend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewRecommend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewRecommend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NewRecommend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewRecommend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.NewRecommend";
  }
  protected:
  explicit NewRecommend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdsNewrecommendFieldNumber = 1,
  };
  // uint32 ads_newrecommend = 1;
  void clear_ads_newrecommend();
  uint32_t ads_newrecommend() const;
  void set_ads_newrecommend(uint32_t value);
  private:
  uint32_t _internal_ads_newrecommend() const;
  void _internal_set_ads_newrecommend(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.NewRecommend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t ads_newrecommend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto;
};
// -------------------------------------------------------------------

class NIDShowDemand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.NIDShowDemand) */ {
 public:
  inline NIDShowDemand() : NIDShowDemand(nullptr) {}
  ~NIDShowDemand() override;
  explicit constexpr NIDShowDemand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NIDShowDemand(const NIDShowDemand& from);
  NIDShowDemand(NIDShowDemand&& from) noexcept
    : NIDShowDemand() {
    *this = ::std::move(from);
  }

  inline NIDShowDemand& operator=(const NIDShowDemand& from) {
    CopyFrom(from);
    return *this;
  }
  inline NIDShowDemand& operator=(NIDShowDemand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NIDShowDemand& default_instance() {
    return *internal_default_instance();
  }
  static inline const NIDShowDemand* internal_default_instance() {
    return reinterpret_cast<const NIDShowDemand*>(
               &_NIDShowDemand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NIDShowDemand& a, NIDShowDemand& b) {
    a.Swap(&b);
  }
  inline void Swap(NIDShowDemand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NIDShowDemand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NIDShowDemand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NIDShowDemand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NIDShowDemand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NIDShowDemand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NIDShowDemand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.NIDShowDemand";
  }
  protected:
  explicit NIDShowDemand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdsNdatextinfoFieldNumber = 1,
    kAdsNdafenceterminaldisFieldNumber = 2,
    kAdsOastatusFieldNumber = 3,
    kAdsOadirectionFieldNumber = 4,
    kAdsOalatdistanceFieldNumber = 5,
    kAdsOalngdistanceFieldNumber = 6,
  };
  // uint32 ads_ndatextinfo = 1;
  void clear_ads_ndatextinfo();
  uint32_t ads_ndatextinfo() const;
  void set_ads_ndatextinfo(uint32_t value);
  private:
  uint32_t _internal_ads_ndatextinfo() const;
  void _internal_set_ads_ndatextinfo(uint32_t value);
  public:

  // float ads_ndafenceterminaldis = 2;
  void clear_ads_ndafenceterminaldis();
  float ads_ndafenceterminaldis() const;
  void set_ads_ndafenceterminaldis(float value);
  private:
  float _internal_ads_ndafenceterminaldis() const;
  void _internal_set_ads_ndafenceterminaldis(float value);
  public:

  // uint32 ads_oastatus = 3;
  void clear_ads_oastatus();
  uint32_t ads_oastatus() const;
  void set_ads_oastatus(uint32_t value);
  private:
  uint32_t _internal_ads_oastatus() const;
  void _internal_set_ads_oastatus(uint32_t value);
  public:

  // uint32 ads_oadirection = 4;
  void clear_ads_oadirection();
  uint32_t ads_oadirection() const;
  void set_ads_oadirection(uint32_t value);
  private:
  uint32_t _internal_ads_oadirection() const;
  void _internal_set_ads_oadirection(uint32_t value);
  public:

  // uint32 ads_oalatdistance = 5;
  void clear_ads_oalatdistance();
  uint32_t ads_oalatdistance() const;
  void set_ads_oalatdistance(uint32_t value);
  private:
  uint32_t _internal_ads_oalatdistance() const;
  void _internal_set_ads_oalatdistance(uint32_t value);
  public:

  // uint32 ads_oalngdistance = 6;
  void clear_ads_oalngdistance();
  uint32_t ads_oalngdistance() const;
  void set_ads_oalngdistance(uint32_t value);
  private:
  uint32_t _internal_ads_oalngdistance() const;
  void _internal_set_ads_oalngdistance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.NIDShowDemand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t ads_ndatextinfo_;
  float ads_ndafenceterminaldis_;
  uint32_t ads_oastatus_;
  uint32_t ads_oadirection_;
  uint32_t ads_oalatdistance_;
  uint32_t ads_oalngdistance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto;
};
// -------------------------------------------------------------------

class UDLCShowDemand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.UDLCShowDemand) */ {
 public:
  inline UDLCShowDemand() : UDLCShowDemand(nullptr) {}
  ~UDLCShowDemand() override;
  explicit constexpr UDLCShowDemand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UDLCShowDemand(const UDLCShowDemand& from);
  UDLCShowDemand(UDLCShowDemand&& from) noexcept
    : UDLCShowDemand() {
    *this = ::std::move(from);
  }

  inline UDLCShowDemand& operator=(const UDLCShowDemand& from) {
    CopyFrom(from);
    return *this;
  }
  inline UDLCShowDemand& operator=(UDLCShowDemand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UDLCShowDemand& default_instance() {
    return *internal_default_instance();
  }
  static inline const UDLCShowDemand* internal_default_instance() {
    return reinterpret_cast<const UDLCShowDemand*>(
               &_UDLCShowDemand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UDLCShowDemand& a, UDLCShowDemand& b) {
    a.Swap(&b);
  }
  inline void Swap(UDLCShowDemand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UDLCShowDemand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UDLCShowDemand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UDLCShowDemand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UDLCShowDemand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UDLCShowDemand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UDLCShowDemand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.UDLCShowDemand";
  }
  protected:
  explicit UDLCShowDemand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdsPathshowStatusFieldNumber = 1,
    kAdsTotargetlatdistanceFieldNumber = 2,
  };
  // uint32 ads_pathshow_status = 1;
  void clear_ads_pathshow_status();
  uint32_t ads_pathshow_status() const;
  void set_ads_pathshow_status(uint32_t value);
  private:
  uint32_t _internal_ads_pathshow_status() const;
  void _internal_set_ads_pathshow_status(uint32_t value);
  public:

  // float ads_totargetlatdistance = 2;
  void clear_ads_totargetlatdistance();
  float ads_totargetlatdistance() const;
  void set_ads_totargetlatdistance(float value);
  private:
  float _internal_ads_totargetlatdistance() const;
  void _internal_set_ads_totargetlatdistance(float value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.UDLCShowDemand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t ads_pathshow_status_;
  float ads_totargetlatdistance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto;
};
// -------------------------------------------------------------------

class ACCShowDemand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.ACCShowDemand) */ {
 public:
  inline ACCShowDemand() : ACCShowDemand(nullptr) {}
  ~ACCShowDemand() override;
  explicit constexpr ACCShowDemand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ACCShowDemand(const ACCShowDemand& from);
  ACCShowDemand(ACCShowDemand&& from) noexcept
    : ACCShowDemand() {
    *this = ::std::move(from);
  }

  inline ACCShowDemand& operator=(const ACCShowDemand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ACCShowDemand& operator=(ACCShowDemand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ACCShowDemand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ACCShowDemand* internal_default_instance() {
    return reinterpret_cast<const ACCShowDemand*>(
               &_ACCShowDemand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ACCShowDemand& a, ACCShowDemand& b) {
    a.Swap(&b);
  }
  inline void Swap(ACCShowDemand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ACCShowDemand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ACCShowDemand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ACCShowDemand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ACCShowDemand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ACCShowDemand& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ACCShowDemand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.ACCShowDemand";
  }
  protected:
  explicit ACCShowDemand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccSetspeedFieldNumber = 2,
    kAccTimegapsetFieldNumber = 3,
    kAccVehiclestartremindstsFieldNumber = 4,
  };
  // float acc_setspeed = 2;
  void clear_acc_setspeed();
  float acc_setspeed() const;
  void set_acc_setspeed(float value);
  private:
  float _internal_acc_setspeed() const;
  void _internal_set_acc_setspeed(float value);
  public:

  // uint32 acc_timegapset = 3;
  void clear_acc_timegapset();
  uint32_t acc_timegapset() const;
  void set_acc_timegapset(uint32_t value);
  private:
  uint32_t _internal_acc_timegapset() const;
  void _internal_set_acc_timegapset(uint32_t value);
  public:

  // uint32 acc_vehiclestartremindsts = 4;
  void clear_acc_vehiclestartremindsts();
  uint32_t acc_vehiclestartremindsts() const;
  void set_acc_vehiclestartremindsts(uint32_t value);
  private:
  uint32_t _internal_acc_vehiclestartremindsts() const;
  void _internal_set_acc_vehiclestartremindsts(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.ACCShowDemand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float acc_setspeed_;
  uint32_t acc_timegapset_;
  uint32_t acc_vehiclestartremindsts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto;
};
// -------------------------------------------------------------------

class ADAScruiseRecflag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.ADAScruiseRecflag) */ {
 public:
  inline ADAScruiseRecflag() : ADAScruiseRecflag(nullptr) {}
  ~ADAScruiseRecflag() override;
  explicit constexpr ADAScruiseRecflag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADAScruiseRecflag(const ADAScruiseRecflag& from);
  ADAScruiseRecflag(ADAScruiseRecflag&& from) noexcept
    : ADAScruiseRecflag() {
    *this = ::std::move(from);
  }

  inline ADAScruiseRecflag& operator=(const ADAScruiseRecflag& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADAScruiseRecflag& operator=(ADAScruiseRecflag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADAScruiseRecflag& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADAScruiseRecflag* internal_default_instance() {
    return reinterpret_cast<const ADAScruiseRecflag*>(
               &_ADAScruiseRecflag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ADAScruiseRecflag& a, ADAScruiseRecflag& b) {
    a.Swap(&b);
  }
  inline void Swap(ADAScruiseRecflag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADAScruiseRecflag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADAScruiseRecflag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADAScruiseRecflag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADAScruiseRecflag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ADAScruiseRecflag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADAScruiseRecflag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.ADAScruiseRecflag";
  }
  protected:
  explicit ADAScruiseRecflag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdAdascruiserecflagFieldNumber = 1,
  };
  // uint32 ad_adascruiserecflag = 1;
  void clear_ad_adascruiserecflag();
  uint32_t ad_adascruiserecflag() const;
  void set_ad_adascruiserecflag(uint32_t value);
  private:
  uint32_t _internal_ad_adascruiserecflag() const;
  void _internal_set_ad_adascruiserecflag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.ADAScruiseRecflag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t ad_adascruiserecflag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto;
};
// -------------------------------------------------------------------

class ADSNIDOutDis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.ADSNIDOutDis) */ {
 public:
  inline ADSNIDOutDis() : ADSNIDOutDis(nullptr) {}
  ~ADSNIDOutDis() override;
  explicit constexpr ADSNIDOutDis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADSNIDOutDis(const ADSNIDOutDis& from);
  ADSNIDOutDis(ADSNIDOutDis&& from) noexcept
    : ADSNIDOutDis() {
    *this = ::std::move(from);
  }

  inline ADSNIDOutDis& operator=(const ADSNIDOutDis& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADSNIDOutDis& operator=(ADSNIDOutDis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADSNIDOutDis& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADSNIDOutDis* internal_default_instance() {
    return reinterpret_cast<const ADSNIDOutDis*>(
               &_ADSNIDOutDis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ADSNIDOutDis& a, ADSNIDOutDis& b) {
    a.Swap(&b);
  }
  inline void Swap(ADSNIDOutDis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADSNIDOutDis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADSNIDOutDis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADSNIDOutDis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADSNIDOutDis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ADSNIDOutDis& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADSNIDOutDis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.ADSNIDOutDis";
  }
  protected:
  explicit ADSNIDOutDis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdsNidoutdisFieldNumber = 1,
  };
  // float ads_nidoutdis = 1;
  void clear_ads_nidoutdis();
  float ads_nidoutdis() const;
  void set_ads_nidoutdis(float value);
  private:
  float _internal_ads_nidoutdis() const;
  void _internal_set_ads_nidoutdis(float value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.ADSNIDOutDis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float ads_nidoutdis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto;
};
// -------------------------------------------------------------------

class SmartDrivingTips final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.SmartDrivingTips) */ {
 public:
  inline SmartDrivingTips() : SmartDrivingTips(nullptr) {}
  ~SmartDrivingTips() override;
  explicit constexpr SmartDrivingTips(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmartDrivingTips(const SmartDrivingTips& from);
  SmartDrivingTips(SmartDrivingTips&& from) noexcept
    : SmartDrivingTips() {
    *this = ::std::move(from);
  }

  inline SmartDrivingTips& operator=(const SmartDrivingTips& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartDrivingTips& operator=(SmartDrivingTips&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmartDrivingTips& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmartDrivingTips* internal_default_instance() {
    return reinterpret_cast<const SmartDrivingTips*>(
               &_SmartDrivingTips_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SmartDrivingTips& a, SmartDrivingTips& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartDrivingTips* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmartDrivingTips* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmartDrivingTips* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmartDrivingTips>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmartDrivingTips& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SmartDrivingTips& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartDrivingTips* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.SmartDrivingTips";
  }
  protected:
  explicit SmartDrivingTips(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccFunFieldNumber = 1,
    kUdlcFunFieldNumber = 2,
    kNidFunFieldNumber = 3,
    kRecommendFunFieldNumber = 4,
    kTjpFunFieldNumber = 5,
    kAdcFuntipsFieldNumber = 6,
    kCnaFunFieldNumber = 7,
    kSpeedlimitFunFieldNumber = 8,
    kAdsAdascruiserecFieldNumber = 11,
    kAdsNidoutdistanceFieldNumber = 12,
    kAdsLatprohibitcountdownFieldNumber = 9,
    kAdsSbuncountdownFieldNumber = 10,
  };
  // .HmiInterface.ACCShowDemand acc_fun = 1;
  bool has_acc_fun() const;
  private:
  bool _internal_has_acc_fun() const;
  public:
  void clear_acc_fun();
  const ::HmiInterface::ACCShowDemand& acc_fun() const;
  PROTOBUF_NODISCARD ::HmiInterface::ACCShowDemand* release_acc_fun();
  ::HmiInterface::ACCShowDemand* mutable_acc_fun();
  void set_allocated_acc_fun(::HmiInterface::ACCShowDemand* acc_fun);
  private:
  const ::HmiInterface::ACCShowDemand& _internal_acc_fun() const;
  ::HmiInterface::ACCShowDemand* _internal_mutable_acc_fun();
  public:
  void unsafe_arena_set_allocated_acc_fun(
      ::HmiInterface::ACCShowDemand* acc_fun);
  ::HmiInterface::ACCShowDemand* unsafe_arena_release_acc_fun();

  // .HmiInterface.UDLCShowDemand udlc_fun = 2;
  bool has_udlc_fun() const;
  private:
  bool _internal_has_udlc_fun() const;
  public:
  void clear_udlc_fun();
  const ::HmiInterface::UDLCShowDemand& udlc_fun() const;
  PROTOBUF_NODISCARD ::HmiInterface::UDLCShowDemand* release_udlc_fun();
  ::HmiInterface::UDLCShowDemand* mutable_udlc_fun();
  void set_allocated_udlc_fun(::HmiInterface::UDLCShowDemand* udlc_fun);
  private:
  const ::HmiInterface::UDLCShowDemand& _internal_udlc_fun() const;
  ::HmiInterface::UDLCShowDemand* _internal_mutable_udlc_fun();
  public:
  void unsafe_arena_set_allocated_udlc_fun(
      ::HmiInterface::UDLCShowDemand* udlc_fun);
  ::HmiInterface::UDLCShowDemand* unsafe_arena_release_udlc_fun();

  // .HmiInterface.NIDShowDemand nid_fun = 3;
  bool has_nid_fun() const;
  private:
  bool _internal_has_nid_fun() const;
  public:
  void clear_nid_fun();
  const ::HmiInterface::NIDShowDemand& nid_fun() const;
  PROTOBUF_NODISCARD ::HmiInterface::NIDShowDemand* release_nid_fun();
  ::HmiInterface::NIDShowDemand* mutable_nid_fun();
  void set_allocated_nid_fun(::HmiInterface::NIDShowDemand* nid_fun);
  private:
  const ::HmiInterface::NIDShowDemand& _internal_nid_fun() const;
  ::HmiInterface::NIDShowDemand* _internal_mutable_nid_fun();
  public:
  void unsafe_arena_set_allocated_nid_fun(
      ::HmiInterface::NIDShowDemand* nid_fun);
  ::HmiInterface::NIDShowDemand* unsafe_arena_release_nid_fun();

  // .HmiInterface.NewRecommend recommend_fun = 4;
  bool has_recommend_fun() const;
  private:
  bool _internal_has_recommend_fun() const;
  public:
  void clear_recommend_fun();
  const ::HmiInterface::NewRecommend& recommend_fun() const;
  PROTOBUF_NODISCARD ::HmiInterface::NewRecommend* release_recommend_fun();
  ::HmiInterface::NewRecommend* mutable_recommend_fun();
  void set_allocated_recommend_fun(::HmiInterface::NewRecommend* recommend_fun);
  private:
  const ::HmiInterface::NewRecommend& _internal_recommend_fun() const;
  ::HmiInterface::NewRecommend* _internal_mutable_recommend_fun();
  public:
  void unsafe_arena_set_allocated_recommend_fun(
      ::HmiInterface::NewRecommend* recommend_fun);
  ::HmiInterface::NewRecommend* unsafe_arena_release_recommend_fun();

  // .HmiInterface.TJPNotice tjp_fun = 5;
  bool has_tjp_fun() const;
  private:
  bool _internal_has_tjp_fun() const;
  public:
  void clear_tjp_fun();
  const ::HmiInterface::TJPNotice& tjp_fun() const;
  PROTOBUF_NODISCARD ::HmiInterface::TJPNotice* release_tjp_fun();
  ::HmiInterface::TJPNotice* mutable_tjp_fun();
  void set_allocated_tjp_fun(::HmiInterface::TJPNotice* tjp_fun);
  private:
  const ::HmiInterface::TJPNotice& _internal_tjp_fun() const;
  ::HmiInterface::TJPNotice* _internal_mutable_tjp_fun();
  public:
  void unsafe_arena_set_allocated_tjp_fun(
      ::HmiInterface::TJPNotice* tjp_fun);
  ::HmiInterface::TJPNotice* unsafe_arena_release_tjp_fun();

  // .HmiInterface.ADCNotice adc_funtips = 6;
  bool has_adc_funtips() const;
  private:
  bool _internal_has_adc_funtips() const;
  public:
  void clear_adc_funtips();
  const ::HmiInterface::ADCNotice& adc_funtips() const;
  PROTOBUF_NODISCARD ::HmiInterface::ADCNotice* release_adc_funtips();
  ::HmiInterface::ADCNotice* mutable_adc_funtips();
  void set_allocated_adc_funtips(::HmiInterface::ADCNotice* adc_funtips);
  private:
  const ::HmiInterface::ADCNotice& _internal_adc_funtips() const;
  ::HmiInterface::ADCNotice* _internal_mutable_adc_funtips();
  public:
  void unsafe_arena_set_allocated_adc_funtips(
      ::HmiInterface::ADCNotice* adc_funtips);
  ::HmiInterface::ADCNotice* unsafe_arena_release_adc_funtips();

  // .HmiInterface.CNANotice cna_fun = 7;
  bool has_cna_fun() const;
  private:
  bool _internal_has_cna_fun() const;
  public:
  void clear_cna_fun();
  const ::HmiInterface::CNANotice& cna_fun() const;
  PROTOBUF_NODISCARD ::HmiInterface::CNANotice* release_cna_fun();
  ::HmiInterface::CNANotice* mutable_cna_fun();
  void set_allocated_cna_fun(::HmiInterface::CNANotice* cna_fun);
  private:
  const ::HmiInterface::CNANotice& _internal_cna_fun() const;
  ::HmiInterface::CNANotice* _internal_mutable_cna_fun();
  public:
  void unsafe_arena_set_allocated_cna_fun(
      ::HmiInterface::CNANotice* cna_fun);
  ::HmiInterface::CNANotice* unsafe_arena_release_cna_fun();

  // .HmiInterface.SpeedLimitShowDemand speedlimit_fun = 8;
  bool has_speedlimit_fun() const;
  private:
  bool _internal_has_speedlimit_fun() const;
  public:
  void clear_speedlimit_fun();
  const ::HmiInterface::SpeedLimitShowDemand& speedlimit_fun() const;
  PROTOBUF_NODISCARD ::HmiInterface::SpeedLimitShowDemand* release_speedlimit_fun();
  ::HmiInterface::SpeedLimitShowDemand* mutable_speedlimit_fun();
  void set_allocated_speedlimit_fun(::HmiInterface::SpeedLimitShowDemand* speedlimit_fun);
  private:
  const ::HmiInterface::SpeedLimitShowDemand& _internal_speedlimit_fun() const;
  ::HmiInterface::SpeedLimitShowDemand* _internal_mutable_speedlimit_fun();
  public:
  void unsafe_arena_set_allocated_speedlimit_fun(
      ::HmiInterface::SpeedLimitShowDemand* speedlimit_fun);
  ::HmiInterface::SpeedLimitShowDemand* unsafe_arena_release_speedlimit_fun();

  // .HmiInterface.ADAScruiseRecflag ads_adascruiserec = 11;
  bool has_ads_adascruiserec() const;
  private:
  bool _internal_has_ads_adascruiserec() const;
  public:
  void clear_ads_adascruiserec();
  const ::HmiInterface::ADAScruiseRecflag& ads_adascruiserec() const;
  PROTOBUF_NODISCARD ::HmiInterface::ADAScruiseRecflag* release_ads_adascruiserec();
  ::HmiInterface::ADAScruiseRecflag* mutable_ads_adascruiserec();
  void set_allocated_ads_adascruiserec(::HmiInterface::ADAScruiseRecflag* ads_adascruiserec);
  private:
  const ::HmiInterface::ADAScruiseRecflag& _internal_ads_adascruiserec() const;
  ::HmiInterface::ADAScruiseRecflag* _internal_mutable_ads_adascruiserec();
  public:
  void unsafe_arena_set_allocated_ads_adascruiserec(
      ::HmiInterface::ADAScruiseRecflag* ads_adascruiserec);
  ::HmiInterface::ADAScruiseRecflag* unsafe_arena_release_ads_adascruiserec();

  // .HmiInterface.ADSNIDOutDis ads_nidoutdistance = 12;
  bool has_ads_nidoutdistance() const;
  private:
  bool _internal_has_ads_nidoutdistance() const;
  public:
  void clear_ads_nidoutdistance();
  const ::HmiInterface::ADSNIDOutDis& ads_nidoutdistance() const;
  PROTOBUF_NODISCARD ::HmiInterface::ADSNIDOutDis* release_ads_nidoutdistance();
  ::HmiInterface::ADSNIDOutDis* mutable_ads_nidoutdistance();
  void set_allocated_ads_nidoutdistance(::HmiInterface::ADSNIDOutDis* ads_nidoutdistance);
  private:
  const ::HmiInterface::ADSNIDOutDis& _internal_ads_nidoutdistance() const;
  ::HmiInterface::ADSNIDOutDis* _internal_mutable_ads_nidoutdistance();
  public:
  void unsafe_arena_set_allocated_ads_nidoutdistance(
      ::HmiInterface::ADSNIDOutDis* ads_nidoutdistance);
  ::HmiInterface::ADSNIDOutDis* unsafe_arena_release_ads_nidoutdistance();

  // float ads_latprohibitcountdown = 9;
  void clear_ads_latprohibitcountdown();
  float ads_latprohibitcountdown() const;
  void set_ads_latprohibitcountdown(float value);
  private:
  float _internal_ads_latprohibitcountdown() const;
  void _internal_set_ads_latprohibitcountdown(float value);
  public:

  // float ads_sbuncountdown = 10;
  void clear_ads_sbuncountdown();
  float ads_sbuncountdown() const;
  void set_ads_sbuncountdown(float value);
  private:
  float _internal_ads_sbuncountdown() const;
  void _internal_set_ads_sbuncountdown(float value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.SmartDrivingTips)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::HmiInterface::ACCShowDemand* acc_fun_;
  ::HmiInterface::UDLCShowDemand* udlc_fun_;
  ::HmiInterface::NIDShowDemand* nid_fun_;
  ::HmiInterface::NewRecommend* recommend_fun_;
  ::HmiInterface::TJPNotice* tjp_fun_;
  ::HmiInterface::ADCNotice* adc_funtips_;
  ::HmiInterface::CNANotice* cna_fun_;
  ::HmiInterface::SpeedLimitShowDemand* speedlimit_fun_;
  ::HmiInterface::ADAScruiseRecflag* ads_adascruiserec_;
  ::HmiInterface::ADSNIDOutDis* ads_nidoutdistance_;
  float ads_latprohibitcountdown_;
  float ads_sbuncountdown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto;
};
// -------------------------------------------------------------------

class BasicSmartDrivingTips final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.BasicSmartDrivingTips) */ {
 public:
  inline BasicSmartDrivingTips() : BasicSmartDrivingTips(nullptr) {}
  ~BasicSmartDrivingTips() override;
  explicit constexpr BasicSmartDrivingTips(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasicSmartDrivingTips(const BasicSmartDrivingTips& from);
  BasicSmartDrivingTips(BasicSmartDrivingTips&& from) noexcept
    : BasicSmartDrivingTips() {
    *this = ::std::move(from);
  }

  inline BasicSmartDrivingTips& operator=(const BasicSmartDrivingTips& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicSmartDrivingTips& operator=(BasicSmartDrivingTips&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasicSmartDrivingTips& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicSmartDrivingTips* internal_default_instance() {
    return reinterpret_cast<const BasicSmartDrivingTips*>(
               &_BasicSmartDrivingTips_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BasicSmartDrivingTips& a, BasicSmartDrivingTips& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicSmartDrivingTips* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicSmartDrivingTips* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BasicSmartDrivingTips* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BasicSmartDrivingTips>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasicSmartDrivingTips& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BasicSmartDrivingTips& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicSmartDrivingTips* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.BasicSmartDrivingTips";
  }
  protected:
  explicit BasicSmartDrivingTips(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSmartdrivetipsFieldNumber = 1,
  };
  // .HmiInterface.SmartDrivingTips smartdrivetips = 1;
  bool has_smartdrivetips() const;
  private:
  bool _internal_has_smartdrivetips() const;
  public:
  void clear_smartdrivetips();
  const ::HmiInterface::SmartDrivingTips& smartdrivetips() const;
  PROTOBUF_NODISCARD ::HmiInterface::SmartDrivingTips* release_smartdrivetips();
  ::HmiInterface::SmartDrivingTips* mutable_smartdrivetips();
  void set_allocated_smartdrivetips(::HmiInterface::SmartDrivingTips* smartdrivetips);
  private:
  const ::HmiInterface::SmartDrivingTips& _internal_smartdrivetips() const;
  ::HmiInterface::SmartDrivingTips* _internal_mutable_smartdrivetips();
  public:
  void unsafe_arena_set_allocated_smartdrivetips(
      ::HmiInterface::SmartDrivingTips* smartdrivetips);
  ::HmiInterface::SmartDrivingTips* unsafe_arena_release_smartdrivetips();

  // @@protoc_insertion_point(class_scope:HmiInterface.BasicSmartDrivingTips)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::HmiInterface::SmartDrivingTips* smartdrivetips_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpeedLimitShowDemand

// float las_tsrhostspdlimit = 1;
inline void SpeedLimitShowDemand::clear_las_tsrhostspdlimit() {
  las_tsrhostspdlimit_ = 0;
}
inline float SpeedLimitShowDemand::_internal_las_tsrhostspdlimit() const {
  return las_tsrhostspdlimit_;
}
inline float SpeedLimitShowDemand::las_tsrhostspdlimit() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SpeedLimitShowDemand.las_tsrhostspdlimit)
  return _internal_las_tsrhostspdlimit();
}
inline void SpeedLimitShowDemand::_internal_set_las_tsrhostspdlimit(float value) {
  
  las_tsrhostspdlimit_ = value;
}
inline void SpeedLimitShowDemand::set_las_tsrhostspdlimit(float value) {
  _internal_set_las_tsrhostspdlimit(value);
  // @@protoc_insertion_point(field_set:HmiInterface.SpeedLimitShowDemand.las_tsrhostspdlimit)
}

// uint32 las_overspeedvisualwarning = 2;
inline void SpeedLimitShowDemand::clear_las_overspeedvisualwarning() {
  las_overspeedvisualwarning_ = 0u;
}
inline uint32_t SpeedLimitShowDemand::_internal_las_overspeedvisualwarning() const {
  return las_overspeedvisualwarning_;
}
inline uint32_t SpeedLimitShowDemand::las_overspeedvisualwarning() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SpeedLimitShowDemand.las_overspeedvisualwarning)
  return _internal_las_overspeedvisualwarning();
}
inline void SpeedLimitShowDemand::_internal_set_las_overspeedvisualwarning(uint32_t value) {
  
  las_overspeedvisualwarning_ = value;
}
inline void SpeedLimitShowDemand::set_las_overspeedvisualwarning(uint32_t value) {
  _internal_set_las_overspeedvisualwarning(value);
  // @@protoc_insertion_point(field_set:HmiInterface.SpeedLimitShowDemand.las_overspeedvisualwarning)
}

// uint32 las_overspeedsoundwarning = 3;
inline void SpeedLimitShowDemand::clear_las_overspeedsoundwarning() {
  las_overspeedsoundwarning_ = 0u;
}
inline uint32_t SpeedLimitShowDemand::_internal_las_overspeedsoundwarning() const {
  return las_overspeedsoundwarning_;
}
inline uint32_t SpeedLimitShowDemand::las_overspeedsoundwarning() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SpeedLimitShowDemand.las_overspeedsoundwarning)
  return _internal_las_overspeedsoundwarning();
}
inline void SpeedLimitShowDemand::_internal_set_las_overspeedsoundwarning(uint32_t value) {
  
  las_overspeedsoundwarning_ = value;
}
inline void SpeedLimitShowDemand::set_las_overspeedsoundwarning(uint32_t value) {
  _internal_set_las_overspeedsoundwarning(value);
  // @@protoc_insertion_point(field_set:HmiInterface.SpeedLimitShowDemand.las_overspeedsoundwarning)
}

// uint32 acc_cslsetreq = 4;
inline void SpeedLimitShowDemand::clear_acc_cslsetreq() {
  acc_cslsetreq_ = 0u;
}
inline uint32_t SpeedLimitShowDemand::_internal_acc_cslsetreq() const {
  return acc_cslsetreq_;
}
inline uint32_t SpeedLimitShowDemand::acc_cslsetreq() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SpeedLimitShowDemand.acc_cslsetreq)
  return _internal_acc_cslsetreq();
}
inline void SpeedLimitShowDemand::_internal_set_acc_cslsetreq(uint32_t value) {
  
  acc_cslsetreq_ = value;
}
inline void SpeedLimitShowDemand::set_acc_cslsetreq(uint32_t value) {
  _internal_set_acc_cslsetreq(value);
  // @@protoc_insertion_point(field_set:HmiInterface.SpeedLimitShowDemand.acc_cslsetreq)
}

// uint32 ads_spdlimitedstatus = 5;
inline void SpeedLimitShowDemand::clear_ads_spdlimitedstatus() {
  ads_spdlimitedstatus_ = 0u;
}
inline uint32_t SpeedLimitShowDemand::_internal_ads_spdlimitedstatus() const {
  return ads_spdlimitedstatus_;
}
inline uint32_t SpeedLimitShowDemand::ads_spdlimitedstatus() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SpeedLimitShowDemand.ads_spdlimitedstatus)
  return _internal_ads_spdlimitedstatus();
}
inline void SpeedLimitShowDemand::_internal_set_ads_spdlimitedstatus(uint32_t value) {
  
  ads_spdlimitedstatus_ = value;
}
inline void SpeedLimitShowDemand::set_ads_spdlimitedstatus(uint32_t value) {
  _internal_set_ads_spdlimitedstatus(value);
  // @@protoc_insertion_point(field_set:HmiInterface.SpeedLimitShowDemand.ads_spdlimitedstatus)
}

// uint32 ads_spdlmttype = 6;
inline void SpeedLimitShowDemand::clear_ads_spdlmttype() {
  ads_spdlmttype_ = 0u;
}
inline uint32_t SpeedLimitShowDemand::_internal_ads_spdlmttype() const {
  return ads_spdlmttype_;
}
inline uint32_t SpeedLimitShowDemand::ads_spdlmttype() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SpeedLimitShowDemand.ads_spdlmttype)
  return _internal_ads_spdlmttype();
}
inline void SpeedLimitShowDemand::_internal_set_ads_spdlmttype(uint32_t value) {
  
  ads_spdlmttype_ = value;
}
inline void SpeedLimitShowDemand::set_ads_spdlmttype(uint32_t value) {
  _internal_set_ads_spdlmttype(value);
  // @@protoc_insertion_point(field_set:HmiInterface.SpeedLimitShowDemand.ads_spdlmttype)
}

// float ads_tsrhostnextspdlimit = 7;
inline void SpeedLimitShowDemand::clear_ads_tsrhostnextspdlimit() {
  ads_tsrhostnextspdlimit_ = 0;
}
inline float SpeedLimitShowDemand::_internal_ads_tsrhostnextspdlimit() const {
  return ads_tsrhostnextspdlimit_;
}
inline float SpeedLimitShowDemand::ads_tsrhostnextspdlimit() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SpeedLimitShowDemand.ads_tsrhostnextspdlimit)
  return _internal_ads_tsrhostnextspdlimit();
}
inline void SpeedLimitShowDemand::_internal_set_ads_tsrhostnextspdlimit(float value) {
  
  ads_tsrhostnextspdlimit_ = value;
}
inline void SpeedLimitShowDemand::set_ads_tsrhostnextspdlimit(float value) {
  _internal_set_ads_tsrhostnextspdlimit(value);
  // @@protoc_insertion_point(field_set:HmiInterface.SpeedLimitShowDemand.ads_tsrhostnextspdlimit)
}

// float ads_tsrhostnextspdlimitdist = 8;
inline void SpeedLimitShowDemand::clear_ads_tsrhostnextspdlimitdist() {
  ads_tsrhostnextspdlimitdist_ = 0;
}
inline float SpeedLimitShowDemand::_internal_ads_tsrhostnextspdlimitdist() const {
  return ads_tsrhostnextspdlimitdist_;
}
inline float SpeedLimitShowDemand::ads_tsrhostnextspdlimitdist() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SpeedLimitShowDemand.ads_tsrhostnextspdlimitdist)
  return _internal_ads_tsrhostnextspdlimitdist();
}
inline void SpeedLimitShowDemand::_internal_set_ads_tsrhostnextspdlimitdist(float value) {
  
  ads_tsrhostnextspdlimitdist_ = value;
}
inline void SpeedLimitShowDemand::set_ads_tsrhostnextspdlimitdist(float value) {
  _internal_set_ads_tsrhostnextspdlimitdist(value);
  // @@protoc_insertion_point(field_set:HmiInterface.SpeedLimitShowDemand.ads_tsrhostnextspdlimitdist)
}

// -------------------------------------------------------------------

// CNANotice

// uint32 ads_cnatextinfo = 1;
inline void CNANotice::clear_ads_cnatextinfo() {
  ads_cnatextinfo_ = 0u;
}
inline uint32_t CNANotice::_internal_ads_cnatextinfo() const {
  return ads_cnatextinfo_;
}
inline uint32_t CNANotice::ads_cnatextinfo() const {
  // @@protoc_insertion_point(field_get:HmiInterface.CNANotice.ads_cnatextinfo)
  return _internal_ads_cnatextinfo();
}
inline void CNANotice::_internal_set_ads_cnatextinfo(uint32_t value) {
  
  ads_cnatextinfo_ = value;
}
inline void CNANotice::set_ads_cnatextinfo(uint32_t value) {
  _internal_set_ads_cnatextinfo(value);
  // @@protoc_insertion_point(field_set:HmiInterface.CNANotice.ads_cnatextinfo)
}

// -------------------------------------------------------------------

// ADCNotice

// uint32 acc_adcnotice = 1;
inline void ADCNotice::clear_acc_adcnotice() {
  acc_adcnotice_ = 0u;
}
inline uint32_t ADCNotice::_internal_acc_adcnotice() const {
  return acc_adcnotice_;
}
inline uint32_t ADCNotice::acc_adcnotice() const {
  // @@protoc_insertion_point(field_get:HmiInterface.ADCNotice.acc_adcnotice)
  return _internal_acc_adcnotice();
}
inline void ADCNotice::_internal_set_acc_adcnotice(uint32_t value) {
  
  acc_adcnotice_ = value;
}
inline void ADCNotice::set_acc_adcnotice(uint32_t value) {
  _internal_set_acc_adcnotice(value);
  // @@protoc_insertion_point(field_set:HmiInterface.ADCNotice.acc_adcnotice)
}

// -------------------------------------------------------------------

// TJPNotice

// uint32 ads_tjptextinfo = 1;
inline void TJPNotice::clear_ads_tjptextinfo() {
  ads_tjptextinfo_ = 0u;
}
inline uint32_t TJPNotice::_internal_ads_tjptextinfo() const {
  return ads_tjptextinfo_;
}
inline uint32_t TJPNotice::ads_tjptextinfo() const {
  // @@protoc_insertion_point(field_get:HmiInterface.TJPNotice.ads_tjptextinfo)
  return _internal_ads_tjptextinfo();
}
inline void TJPNotice::_internal_set_ads_tjptextinfo(uint32_t value) {
  
  ads_tjptextinfo_ = value;
}
inline void TJPNotice::set_ads_tjptextinfo(uint32_t value) {
  _internal_set_ads_tjptextinfo(value);
  // @@protoc_insertion_point(field_set:HmiInterface.TJPNotice.ads_tjptextinfo)
}

// -------------------------------------------------------------------

// NewRecommend

// uint32 ads_newrecommend = 1;
inline void NewRecommend::clear_ads_newrecommend() {
  ads_newrecommend_ = 0u;
}
inline uint32_t NewRecommend::_internal_ads_newrecommend() const {
  return ads_newrecommend_;
}
inline uint32_t NewRecommend::ads_newrecommend() const {
  // @@protoc_insertion_point(field_get:HmiInterface.NewRecommend.ads_newrecommend)
  return _internal_ads_newrecommend();
}
inline void NewRecommend::_internal_set_ads_newrecommend(uint32_t value) {
  
  ads_newrecommend_ = value;
}
inline void NewRecommend::set_ads_newrecommend(uint32_t value) {
  _internal_set_ads_newrecommend(value);
  // @@protoc_insertion_point(field_set:HmiInterface.NewRecommend.ads_newrecommend)
}

// -------------------------------------------------------------------

// NIDShowDemand

// uint32 ads_ndatextinfo = 1;
inline void NIDShowDemand::clear_ads_ndatextinfo() {
  ads_ndatextinfo_ = 0u;
}
inline uint32_t NIDShowDemand::_internal_ads_ndatextinfo() const {
  return ads_ndatextinfo_;
}
inline uint32_t NIDShowDemand::ads_ndatextinfo() const {
  // @@protoc_insertion_point(field_get:HmiInterface.NIDShowDemand.ads_ndatextinfo)
  return _internal_ads_ndatextinfo();
}
inline void NIDShowDemand::_internal_set_ads_ndatextinfo(uint32_t value) {
  
  ads_ndatextinfo_ = value;
}
inline void NIDShowDemand::set_ads_ndatextinfo(uint32_t value) {
  _internal_set_ads_ndatextinfo(value);
  // @@protoc_insertion_point(field_set:HmiInterface.NIDShowDemand.ads_ndatextinfo)
}

// float ads_ndafenceterminaldis = 2;
inline void NIDShowDemand::clear_ads_ndafenceterminaldis() {
  ads_ndafenceterminaldis_ = 0;
}
inline float NIDShowDemand::_internal_ads_ndafenceterminaldis() const {
  return ads_ndafenceterminaldis_;
}
inline float NIDShowDemand::ads_ndafenceterminaldis() const {
  // @@protoc_insertion_point(field_get:HmiInterface.NIDShowDemand.ads_ndafenceterminaldis)
  return _internal_ads_ndafenceterminaldis();
}
inline void NIDShowDemand::_internal_set_ads_ndafenceterminaldis(float value) {
  
  ads_ndafenceterminaldis_ = value;
}
inline void NIDShowDemand::set_ads_ndafenceterminaldis(float value) {
  _internal_set_ads_ndafenceterminaldis(value);
  // @@protoc_insertion_point(field_set:HmiInterface.NIDShowDemand.ads_ndafenceterminaldis)
}

// uint32 ads_oastatus = 3;
inline void NIDShowDemand::clear_ads_oastatus() {
  ads_oastatus_ = 0u;
}
inline uint32_t NIDShowDemand::_internal_ads_oastatus() const {
  return ads_oastatus_;
}
inline uint32_t NIDShowDemand::ads_oastatus() const {
  // @@protoc_insertion_point(field_get:HmiInterface.NIDShowDemand.ads_oastatus)
  return _internal_ads_oastatus();
}
inline void NIDShowDemand::_internal_set_ads_oastatus(uint32_t value) {
  
  ads_oastatus_ = value;
}
inline void NIDShowDemand::set_ads_oastatus(uint32_t value) {
  _internal_set_ads_oastatus(value);
  // @@protoc_insertion_point(field_set:HmiInterface.NIDShowDemand.ads_oastatus)
}

// uint32 ads_oadirection = 4;
inline void NIDShowDemand::clear_ads_oadirection() {
  ads_oadirection_ = 0u;
}
inline uint32_t NIDShowDemand::_internal_ads_oadirection() const {
  return ads_oadirection_;
}
inline uint32_t NIDShowDemand::ads_oadirection() const {
  // @@protoc_insertion_point(field_get:HmiInterface.NIDShowDemand.ads_oadirection)
  return _internal_ads_oadirection();
}
inline void NIDShowDemand::_internal_set_ads_oadirection(uint32_t value) {
  
  ads_oadirection_ = value;
}
inline void NIDShowDemand::set_ads_oadirection(uint32_t value) {
  _internal_set_ads_oadirection(value);
  // @@protoc_insertion_point(field_set:HmiInterface.NIDShowDemand.ads_oadirection)
}

// uint32 ads_oalatdistance = 5;
inline void NIDShowDemand::clear_ads_oalatdistance() {
  ads_oalatdistance_ = 0u;
}
inline uint32_t NIDShowDemand::_internal_ads_oalatdistance() const {
  return ads_oalatdistance_;
}
inline uint32_t NIDShowDemand::ads_oalatdistance() const {
  // @@protoc_insertion_point(field_get:HmiInterface.NIDShowDemand.ads_oalatdistance)
  return _internal_ads_oalatdistance();
}
inline void NIDShowDemand::_internal_set_ads_oalatdistance(uint32_t value) {
  
  ads_oalatdistance_ = value;
}
inline void NIDShowDemand::set_ads_oalatdistance(uint32_t value) {
  _internal_set_ads_oalatdistance(value);
  // @@protoc_insertion_point(field_set:HmiInterface.NIDShowDemand.ads_oalatdistance)
}

// uint32 ads_oalngdistance = 6;
inline void NIDShowDemand::clear_ads_oalngdistance() {
  ads_oalngdistance_ = 0u;
}
inline uint32_t NIDShowDemand::_internal_ads_oalngdistance() const {
  return ads_oalngdistance_;
}
inline uint32_t NIDShowDemand::ads_oalngdistance() const {
  // @@protoc_insertion_point(field_get:HmiInterface.NIDShowDemand.ads_oalngdistance)
  return _internal_ads_oalngdistance();
}
inline void NIDShowDemand::_internal_set_ads_oalngdistance(uint32_t value) {
  
  ads_oalngdistance_ = value;
}
inline void NIDShowDemand::set_ads_oalngdistance(uint32_t value) {
  _internal_set_ads_oalngdistance(value);
  // @@protoc_insertion_point(field_set:HmiInterface.NIDShowDemand.ads_oalngdistance)
}

// -------------------------------------------------------------------

// UDLCShowDemand

// uint32 ads_pathshow_status = 1;
inline void UDLCShowDemand::clear_ads_pathshow_status() {
  ads_pathshow_status_ = 0u;
}
inline uint32_t UDLCShowDemand::_internal_ads_pathshow_status() const {
  return ads_pathshow_status_;
}
inline uint32_t UDLCShowDemand::ads_pathshow_status() const {
  // @@protoc_insertion_point(field_get:HmiInterface.UDLCShowDemand.ads_pathshow_status)
  return _internal_ads_pathshow_status();
}
inline void UDLCShowDemand::_internal_set_ads_pathshow_status(uint32_t value) {
  
  ads_pathshow_status_ = value;
}
inline void UDLCShowDemand::set_ads_pathshow_status(uint32_t value) {
  _internal_set_ads_pathshow_status(value);
  // @@protoc_insertion_point(field_set:HmiInterface.UDLCShowDemand.ads_pathshow_status)
}

// float ads_totargetlatdistance = 2;
inline void UDLCShowDemand::clear_ads_totargetlatdistance() {
  ads_totargetlatdistance_ = 0;
}
inline float UDLCShowDemand::_internal_ads_totargetlatdistance() const {
  return ads_totargetlatdistance_;
}
inline float UDLCShowDemand::ads_totargetlatdistance() const {
  // @@protoc_insertion_point(field_get:HmiInterface.UDLCShowDemand.ads_totargetlatdistance)
  return _internal_ads_totargetlatdistance();
}
inline void UDLCShowDemand::_internal_set_ads_totargetlatdistance(float value) {
  
  ads_totargetlatdistance_ = value;
}
inline void UDLCShowDemand::set_ads_totargetlatdistance(float value) {
  _internal_set_ads_totargetlatdistance(value);
  // @@protoc_insertion_point(field_set:HmiInterface.UDLCShowDemand.ads_totargetlatdistance)
}

// -------------------------------------------------------------------

// ACCShowDemand

// float acc_setspeed = 2;
inline void ACCShowDemand::clear_acc_setspeed() {
  acc_setspeed_ = 0;
}
inline float ACCShowDemand::_internal_acc_setspeed() const {
  return acc_setspeed_;
}
inline float ACCShowDemand::acc_setspeed() const {
  // @@protoc_insertion_point(field_get:HmiInterface.ACCShowDemand.acc_setspeed)
  return _internal_acc_setspeed();
}
inline void ACCShowDemand::_internal_set_acc_setspeed(float value) {
  
  acc_setspeed_ = value;
}
inline void ACCShowDemand::set_acc_setspeed(float value) {
  _internal_set_acc_setspeed(value);
  // @@protoc_insertion_point(field_set:HmiInterface.ACCShowDemand.acc_setspeed)
}

// uint32 acc_timegapset = 3;
inline void ACCShowDemand::clear_acc_timegapset() {
  acc_timegapset_ = 0u;
}
inline uint32_t ACCShowDemand::_internal_acc_timegapset() const {
  return acc_timegapset_;
}
inline uint32_t ACCShowDemand::acc_timegapset() const {
  // @@protoc_insertion_point(field_get:HmiInterface.ACCShowDemand.acc_timegapset)
  return _internal_acc_timegapset();
}
inline void ACCShowDemand::_internal_set_acc_timegapset(uint32_t value) {
  
  acc_timegapset_ = value;
}
inline void ACCShowDemand::set_acc_timegapset(uint32_t value) {
  _internal_set_acc_timegapset(value);
  // @@protoc_insertion_point(field_set:HmiInterface.ACCShowDemand.acc_timegapset)
}

// uint32 acc_vehiclestartremindsts = 4;
inline void ACCShowDemand::clear_acc_vehiclestartremindsts() {
  acc_vehiclestartremindsts_ = 0u;
}
inline uint32_t ACCShowDemand::_internal_acc_vehiclestartremindsts() const {
  return acc_vehiclestartremindsts_;
}
inline uint32_t ACCShowDemand::acc_vehiclestartremindsts() const {
  // @@protoc_insertion_point(field_get:HmiInterface.ACCShowDemand.acc_vehiclestartremindsts)
  return _internal_acc_vehiclestartremindsts();
}
inline void ACCShowDemand::_internal_set_acc_vehiclestartremindsts(uint32_t value) {
  
  acc_vehiclestartremindsts_ = value;
}
inline void ACCShowDemand::set_acc_vehiclestartremindsts(uint32_t value) {
  _internal_set_acc_vehiclestartremindsts(value);
  // @@protoc_insertion_point(field_set:HmiInterface.ACCShowDemand.acc_vehiclestartremindsts)
}

// -------------------------------------------------------------------

// ADAScruiseRecflag

// uint32 ad_adascruiserecflag = 1;
inline void ADAScruiseRecflag::clear_ad_adascruiserecflag() {
  ad_adascruiserecflag_ = 0u;
}
inline uint32_t ADAScruiseRecflag::_internal_ad_adascruiserecflag() const {
  return ad_adascruiserecflag_;
}
inline uint32_t ADAScruiseRecflag::ad_adascruiserecflag() const {
  // @@protoc_insertion_point(field_get:HmiInterface.ADAScruiseRecflag.ad_adascruiserecflag)
  return _internal_ad_adascruiserecflag();
}
inline void ADAScruiseRecflag::_internal_set_ad_adascruiserecflag(uint32_t value) {
  
  ad_adascruiserecflag_ = value;
}
inline void ADAScruiseRecflag::set_ad_adascruiserecflag(uint32_t value) {
  _internal_set_ad_adascruiserecflag(value);
  // @@protoc_insertion_point(field_set:HmiInterface.ADAScruiseRecflag.ad_adascruiserecflag)
}

// -------------------------------------------------------------------

// ADSNIDOutDis

// float ads_nidoutdis = 1;
inline void ADSNIDOutDis::clear_ads_nidoutdis() {
  ads_nidoutdis_ = 0;
}
inline float ADSNIDOutDis::_internal_ads_nidoutdis() const {
  return ads_nidoutdis_;
}
inline float ADSNIDOutDis::ads_nidoutdis() const {
  // @@protoc_insertion_point(field_get:HmiInterface.ADSNIDOutDis.ads_nidoutdis)
  return _internal_ads_nidoutdis();
}
inline void ADSNIDOutDis::_internal_set_ads_nidoutdis(float value) {
  
  ads_nidoutdis_ = value;
}
inline void ADSNIDOutDis::set_ads_nidoutdis(float value) {
  _internal_set_ads_nidoutdis(value);
  // @@protoc_insertion_point(field_set:HmiInterface.ADSNIDOutDis.ads_nidoutdis)
}

// -------------------------------------------------------------------

// SmartDrivingTips

// .HmiInterface.ACCShowDemand acc_fun = 1;
inline bool SmartDrivingTips::_internal_has_acc_fun() const {
  return this != internal_default_instance() && acc_fun_ != nullptr;
}
inline bool SmartDrivingTips::has_acc_fun() const {
  return _internal_has_acc_fun();
}
inline void SmartDrivingTips::clear_acc_fun() {
  if (GetArenaForAllocation() == nullptr && acc_fun_ != nullptr) {
    delete acc_fun_;
  }
  acc_fun_ = nullptr;
}
inline const ::HmiInterface::ACCShowDemand& SmartDrivingTips::_internal_acc_fun() const {
  const ::HmiInterface::ACCShowDemand* p = acc_fun_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::ACCShowDemand&>(
      ::HmiInterface::_ACCShowDemand_default_instance_);
}
inline const ::HmiInterface::ACCShowDemand& SmartDrivingTips::acc_fun() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SmartDrivingTips.acc_fun)
  return _internal_acc_fun();
}
inline void SmartDrivingTips::unsafe_arena_set_allocated_acc_fun(
    ::HmiInterface::ACCShowDemand* acc_fun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acc_fun_);
  }
  acc_fun_ = acc_fun;
  if (acc_fun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.SmartDrivingTips.acc_fun)
}
inline ::HmiInterface::ACCShowDemand* SmartDrivingTips::release_acc_fun() {
  
  ::HmiInterface::ACCShowDemand* temp = acc_fun_;
  acc_fun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::ACCShowDemand* SmartDrivingTips::unsafe_arena_release_acc_fun() {
  // @@protoc_insertion_point(field_release:HmiInterface.SmartDrivingTips.acc_fun)
  
  ::HmiInterface::ACCShowDemand* temp = acc_fun_;
  acc_fun_ = nullptr;
  return temp;
}
inline ::HmiInterface::ACCShowDemand* SmartDrivingTips::_internal_mutable_acc_fun() {
  
  if (acc_fun_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::ACCShowDemand>(GetArenaForAllocation());
    acc_fun_ = p;
  }
  return acc_fun_;
}
inline ::HmiInterface::ACCShowDemand* SmartDrivingTips::mutable_acc_fun() {
  ::HmiInterface::ACCShowDemand* _msg = _internal_mutable_acc_fun();
  // @@protoc_insertion_point(field_mutable:HmiInterface.SmartDrivingTips.acc_fun)
  return _msg;
}
inline void SmartDrivingTips::set_allocated_acc_fun(::HmiInterface::ACCShowDemand* acc_fun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete acc_fun_;
  }
  if (acc_fun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::ACCShowDemand>::GetOwningArena(acc_fun);
    if (message_arena != submessage_arena) {
      acc_fun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc_fun, submessage_arena);
    }
    
  } else {
    
  }
  acc_fun_ = acc_fun;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.SmartDrivingTips.acc_fun)
}

// .HmiInterface.UDLCShowDemand udlc_fun = 2;
inline bool SmartDrivingTips::_internal_has_udlc_fun() const {
  return this != internal_default_instance() && udlc_fun_ != nullptr;
}
inline bool SmartDrivingTips::has_udlc_fun() const {
  return _internal_has_udlc_fun();
}
inline void SmartDrivingTips::clear_udlc_fun() {
  if (GetArenaForAllocation() == nullptr && udlc_fun_ != nullptr) {
    delete udlc_fun_;
  }
  udlc_fun_ = nullptr;
}
inline const ::HmiInterface::UDLCShowDemand& SmartDrivingTips::_internal_udlc_fun() const {
  const ::HmiInterface::UDLCShowDemand* p = udlc_fun_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::UDLCShowDemand&>(
      ::HmiInterface::_UDLCShowDemand_default_instance_);
}
inline const ::HmiInterface::UDLCShowDemand& SmartDrivingTips::udlc_fun() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SmartDrivingTips.udlc_fun)
  return _internal_udlc_fun();
}
inline void SmartDrivingTips::unsafe_arena_set_allocated_udlc_fun(
    ::HmiInterface::UDLCShowDemand* udlc_fun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(udlc_fun_);
  }
  udlc_fun_ = udlc_fun;
  if (udlc_fun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.SmartDrivingTips.udlc_fun)
}
inline ::HmiInterface::UDLCShowDemand* SmartDrivingTips::release_udlc_fun() {
  
  ::HmiInterface::UDLCShowDemand* temp = udlc_fun_;
  udlc_fun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::UDLCShowDemand* SmartDrivingTips::unsafe_arena_release_udlc_fun() {
  // @@protoc_insertion_point(field_release:HmiInterface.SmartDrivingTips.udlc_fun)
  
  ::HmiInterface::UDLCShowDemand* temp = udlc_fun_;
  udlc_fun_ = nullptr;
  return temp;
}
inline ::HmiInterface::UDLCShowDemand* SmartDrivingTips::_internal_mutable_udlc_fun() {
  
  if (udlc_fun_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::UDLCShowDemand>(GetArenaForAllocation());
    udlc_fun_ = p;
  }
  return udlc_fun_;
}
inline ::HmiInterface::UDLCShowDemand* SmartDrivingTips::mutable_udlc_fun() {
  ::HmiInterface::UDLCShowDemand* _msg = _internal_mutable_udlc_fun();
  // @@protoc_insertion_point(field_mutable:HmiInterface.SmartDrivingTips.udlc_fun)
  return _msg;
}
inline void SmartDrivingTips::set_allocated_udlc_fun(::HmiInterface::UDLCShowDemand* udlc_fun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete udlc_fun_;
  }
  if (udlc_fun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::UDLCShowDemand>::GetOwningArena(udlc_fun);
    if (message_arena != submessage_arena) {
      udlc_fun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, udlc_fun, submessage_arena);
    }
    
  } else {
    
  }
  udlc_fun_ = udlc_fun;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.SmartDrivingTips.udlc_fun)
}

// .HmiInterface.NIDShowDemand nid_fun = 3;
inline bool SmartDrivingTips::_internal_has_nid_fun() const {
  return this != internal_default_instance() && nid_fun_ != nullptr;
}
inline bool SmartDrivingTips::has_nid_fun() const {
  return _internal_has_nid_fun();
}
inline void SmartDrivingTips::clear_nid_fun() {
  if (GetArenaForAllocation() == nullptr && nid_fun_ != nullptr) {
    delete nid_fun_;
  }
  nid_fun_ = nullptr;
}
inline const ::HmiInterface::NIDShowDemand& SmartDrivingTips::_internal_nid_fun() const {
  const ::HmiInterface::NIDShowDemand* p = nid_fun_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::NIDShowDemand&>(
      ::HmiInterface::_NIDShowDemand_default_instance_);
}
inline const ::HmiInterface::NIDShowDemand& SmartDrivingTips::nid_fun() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SmartDrivingTips.nid_fun)
  return _internal_nid_fun();
}
inline void SmartDrivingTips::unsafe_arena_set_allocated_nid_fun(
    ::HmiInterface::NIDShowDemand* nid_fun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nid_fun_);
  }
  nid_fun_ = nid_fun;
  if (nid_fun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.SmartDrivingTips.nid_fun)
}
inline ::HmiInterface::NIDShowDemand* SmartDrivingTips::release_nid_fun() {
  
  ::HmiInterface::NIDShowDemand* temp = nid_fun_;
  nid_fun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::NIDShowDemand* SmartDrivingTips::unsafe_arena_release_nid_fun() {
  // @@protoc_insertion_point(field_release:HmiInterface.SmartDrivingTips.nid_fun)
  
  ::HmiInterface::NIDShowDemand* temp = nid_fun_;
  nid_fun_ = nullptr;
  return temp;
}
inline ::HmiInterface::NIDShowDemand* SmartDrivingTips::_internal_mutable_nid_fun() {
  
  if (nid_fun_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::NIDShowDemand>(GetArenaForAllocation());
    nid_fun_ = p;
  }
  return nid_fun_;
}
inline ::HmiInterface::NIDShowDemand* SmartDrivingTips::mutable_nid_fun() {
  ::HmiInterface::NIDShowDemand* _msg = _internal_mutable_nid_fun();
  // @@protoc_insertion_point(field_mutable:HmiInterface.SmartDrivingTips.nid_fun)
  return _msg;
}
inline void SmartDrivingTips::set_allocated_nid_fun(::HmiInterface::NIDShowDemand* nid_fun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete nid_fun_;
  }
  if (nid_fun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::NIDShowDemand>::GetOwningArena(nid_fun);
    if (message_arena != submessage_arena) {
      nid_fun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nid_fun, submessage_arena);
    }
    
  } else {
    
  }
  nid_fun_ = nid_fun;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.SmartDrivingTips.nid_fun)
}

// .HmiInterface.NewRecommend recommend_fun = 4;
inline bool SmartDrivingTips::_internal_has_recommend_fun() const {
  return this != internal_default_instance() && recommend_fun_ != nullptr;
}
inline bool SmartDrivingTips::has_recommend_fun() const {
  return _internal_has_recommend_fun();
}
inline void SmartDrivingTips::clear_recommend_fun() {
  if (GetArenaForAllocation() == nullptr && recommend_fun_ != nullptr) {
    delete recommend_fun_;
  }
  recommend_fun_ = nullptr;
}
inline const ::HmiInterface::NewRecommend& SmartDrivingTips::_internal_recommend_fun() const {
  const ::HmiInterface::NewRecommend* p = recommend_fun_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::NewRecommend&>(
      ::HmiInterface::_NewRecommend_default_instance_);
}
inline const ::HmiInterface::NewRecommend& SmartDrivingTips::recommend_fun() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SmartDrivingTips.recommend_fun)
  return _internal_recommend_fun();
}
inline void SmartDrivingTips::unsafe_arena_set_allocated_recommend_fun(
    ::HmiInterface::NewRecommend* recommend_fun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommend_fun_);
  }
  recommend_fun_ = recommend_fun;
  if (recommend_fun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.SmartDrivingTips.recommend_fun)
}
inline ::HmiInterface::NewRecommend* SmartDrivingTips::release_recommend_fun() {
  
  ::HmiInterface::NewRecommend* temp = recommend_fun_;
  recommend_fun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::NewRecommend* SmartDrivingTips::unsafe_arena_release_recommend_fun() {
  // @@protoc_insertion_point(field_release:HmiInterface.SmartDrivingTips.recommend_fun)
  
  ::HmiInterface::NewRecommend* temp = recommend_fun_;
  recommend_fun_ = nullptr;
  return temp;
}
inline ::HmiInterface::NewRecommend* SmartDrivingTips::_internal_mutable_recommend_fun() {
  
  if (recommend_fun_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::NewRecommend>(GetArenaForAllocation());
    recommend_fun_ = p;
  }
  return recommend_fun_;
}
inline ::HmiInterface::NewRecommend* SmartDrivingTips::mutable_recommend_fun() {
  ::HmiInterface::NewRecommend* _msg = _internal_mutable_recommend_fun();
  // @@protoc_insertion_point(field_mutable:HmiInterface.SmartDrivingTips.recommend_fun)
  return _msg;
}
inline void SmartDrivingTips::set_allocated_recommend_fun(::HmiInterface::NewRecommend* recommend_fun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete recommend_fun_;
  }
  if (recommend_fun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::NewRecommend>::GetOwningArena(recommend_fun);
    if (message_arena != submessage_arena) {
      recommend_fun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommend_fun, submessage_arena);
    }
    
  } else {
    
  }
  recommend_fun_ = recommend_fun;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.SmartDrivingTips.recommend_fun)
}

// .HmiInterface.TJPNotice tjp_fun = 5;
inline bool SmartDrivingTips::_internal_has_tjp_fun() const {
  return this != internal_default_instance() && tjp_fun_ != nullptr;
}
inline bool SmartDrivingTips::has_tjp_fun() const {
  return _internal_has_tjp_fun();
}
inline void SmartDrivingTips::clear_tjp_fun() {
  if (GetArenaForAllocation() == nullptr && tjp_fun_ != nullptr) {
    delete tjp_fun_;
  }
  tjp_fun_ = nullptr;
}
inline const ::HmiInterface::TJPNotice& SmartDrivingTips::_internal_tjp_fun() const {
  const ::HmiInterface::TJPNotice* p = tjp_fun_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::TJPNotice&>(
      ::HmiInterface::_TJPNotice_default_instance_);
}
inline const ::HmiInterface::TJPNotice& SmartDrivingTips::tjp_fun() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SmartDrivingTips.tjp_fun)
  return _internal_tjp_fun();
}
inline void SmartDrivingTips::unsafe_arena_set_allocated_tjp_fun(
    ::HmiInterface::TJPNotice* tjp_fun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tjp_fun_);
  }
  tjp_fun_ = tjp_fun;
  if (tjp_fun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.SmartDrivingTips.tjp_fun)
}
inline ::HmiInterface::TJPNotice* SmartDrivingTips::release_tjp_fun() {
  
  ::HmiInterface::TJPNotice* temp = tjp_fun_;
  tjp_fun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::TJPNotice* SmartDrivingTips::unsafe_arena_release_tjp_fun() {
  // @@protoc_insertion_point(field_release:HmiInterface.SmartDrivingTips.tjp_fun)
  
  ::HmiInterface::TJPNotice* temp = tjp_fun_;
  tjp_fun_ = nullptr;
  return temp;
}
inline ::HmiInterface::TJPNotice* SmartDrivingTips::_internal_mutable_tjp_fun() {
  
  if (tjp_fun_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::TJPNotice>(GetArenaForAllocation());
    tjp_fun_ = p;
  }
  return tjp_fun_;
}
inline ::HmiInterface::TJPNotice* SmartDrivingTips::mutable_tjp_fun() {
  ::HmiInterface::TJPNotice* _msg = _internal_mutable_tjp_fun();
  // @@protoc_insertion_point(field_mutable:HmiInterface.SmartDrivingTips.tjp_fun)
  return _msg;
}
inline void SmartDrivingTips::set_allocated_tjp_fun(::HmiInterface::TJPNotice* tjp_fun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tjp_fun_;
  }
  if (tjp_fun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::TJPNotice>::GetOwningArena(tjp_fun);
    if (message_arena != submessage_arena) {
      tjp_fun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tjp_fun, submessage_arena);
    }
    
  } else {
    
  }
  tjp_fun_ = tjp_fun;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.SmartDrivingTips.tjp_fun)
}

// .HmiInterface.ADCNotice adc_funtips = 6;
inline bool SmartDrivingTips::_internal_has_adc_funtips() const {
  return this != internal_default_instance() && adc_funtips_ != nullptr;
}
inline bool SmartDrivingTips::has_adc_funtips() const {
  return _internal_has_adc_funtips();
}
inline void SmartDrivingTips::clear_adc_funtips() {
  if (GetArenaForAllocation() == nullptr && adc_funtips_ != nullptr) {
    delete adc_funtips_;
  }
  adc_funtips_ = nullptr;
}
inline const ::HmiInterface::ADCNotice& SmartDrivingTips::_internal_adc_funtips() const {
  const ::HmiInterface::ADCNotice* p = adc_funtips_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::ADCNotice&>(
      ::HmiInterface::_ADCNotice_default_instance_);
}
inline const ::HmiInterface::ADCNotice& SmartDrivingTips::adc_funtips() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SmartDrivingTips.adc_funtips)
  return _internal_adc_funtips();
}
inline void SmartDrivingTips::unsafe_arena_set_allocated_adc_funtips(
    ::HmiInterface::ADCNotice* adc_funtips) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adc_funtips_);
  }
  adc_funtips_ = adc_funtips;
  if (adc_funtips) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.SmartDrivingTips.adc_funtips)
}
inline ::HmiInterface::ADCNotice* SmartDrivingTips::release_adc_funtips() {
  
  ::HmiInterface::ADCNotice* temp = adc_funtips_;
  adc_funtips_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::ADCNotice* SmartDrivingTips::unsafe_arena_release_adc_funtips() {
  // @@protoc_insertion_point(field_release:HmiInterface.SmartDrivingTips.adc_funtips)
  
  ::HmiInterface::ADCNotice* temp = adc_funtips_;
  adc_funtips_ = nullptr;
  return temp;
}
inline ::HmiInterface::ADCNotice* SmartDrivingTips::_internal_mutable_adc_funtips() {
  
  if (adc_funtips_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::ADCNotice>(GetArenaForAllocation());
    adc_funtips_ = p;
  }
  return adc_funtips_;
}
inline ::HmiInterface::ADCNotice* SmartDrivingTips::mutable_adc_funtips() {
  ::HmiInterface::ADCNotice* _msg = _internal_mutable_adc_funtips();
  // @@protoc_insertion_point(field_mutable:HmiInterface.SmartDrivingTips.adc_funtips)
  return _msg;
}
inline void SmartDrivingTips::set_allocated_adc_funtips(::HmiInterface::ADCNotice* adc_funtips) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete adc_funtips_;
  }
  if (adc_funtips) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::ADCNotice>::GetOwningArena(adc_funtips);
    if (message_arena != submessage_arena) {
      adc_funtips = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adc_funtips, submessage_arena);
    }
    
  } else {
    
  }
  adc_funtips_ = adc_funtips;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.SmartDrivingTips.adc_funtips)
}

// .HmiInterface.CNANotice cna_fun = 7;
inline bool SmartDrivingTips::_internal_has_cna_fun() const {
  return this != internal_default_instance() && cna_fun_ != nullptr;
}
inline bool SmartDrivingTips::has_cna_fun() const {
  return _internal_has_cna_fun();
}
inline void SmartDrivingTips::clear_cna_fun() {
  if (GetArenaForAllocation() == nullptr && cna_fun_ != nullptr) {
    delete cna_fun_;
  }
  cna_fun_ = nullptr;
}
inline const ::HmiInterface::CNANotice& SmartDrivingTips::_internal_cna_fun() const {
  const ::HmiInterface::CNANotice* p = cna_fun_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::CNANotice&>(
      ::HmiInterface::_CNANotice_default_instance_);
}
inline const ::HmiInterface::CNANotice& SmartDrivingTips::cna_fun() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SmartDrivingTips.cna_fun)
  return _internal_cna_fun();
}
inline void SmartDrivingTips::unsafe_arena_set_allocated_cna_fun(
    ::HmiInterface::CNANotice* cna_fun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cna_fun_);
  }
  cna_fun_ = cna_fun;
  if (cna_fun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.SmartDrivingTips.cna_fun)
}
inline ::HmiInterface::CNANotice* SmartDrivingTips::release_cna_fun() {
  
  ::HmiInterface::CNANotice* temp = cna_fun_;
  cna_fun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::CNANotice* SmartDrivingTips::unsafe_arena_release_cna_fun() {
  // @@protoc_insertion_point(field_release:HmiInterface.SmartDrivingTips.cna_fun)
  
  ::HmiInterface::CNANotice* temp = cna_fun_;
  cna_fun_ = nullptr;
  return temp;
}
inline ::HmiInterface::CNANotice* SmartDrivingTips::_internal_mutable_cna_fun() {
  
  if (cna_fun_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::CNANotice>(GetArenaForAllocation());
    cna_fun_ = p;
  }
  return cna_fun_;
}
inline ::HmiInterface::CNANotice* SmartDrivingTips::mutable_cna_fun() {
  ::HmiInterface::CNANotice* _msg = _internal_mutable_cna_fun();
  // @@protoc_insertion_point(field_mutable:HmiInterface.SmartDrivingTips.cna_fun)
  return _msg;
}
inline void SmartDrivingTips::set_allocated_cna_fun(::HmiInterface::CNANotice* cna_fun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cna_fun_;
  }
  if (cna_fun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::CNANotice>::GetOwningArena(cna_fun);
    if (message_arena != submessage_arena) {
      cna_fun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cna_fun, submessage_arena);
    }
    
  } else {
    
  }
  cna_fun_ = cna_fun;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.SmartDrivingTips.cna_fun)
}

// .HmiInterface.SpeedLimitShowDemand speedlimit_fun = 8;
inline bool SmartDrivingTips::_internal_has_speedlimit_fun() const {
  return this != internal_default_instance() && speedlimit_fun_ != nullptr;
}
inline bool SmartDrivingTips::has_speedlimit_fun() const {
  return _internal_has_speedlimit_fun();
}
inline void SmartDrivingTips::clear_speedlimit_fun() {
  if (GetArenaForAllocation() == nullptr && speedlimit_fun_ != nullptr) {
    delete speedlimit_fun_;
  }
  speedlimit_fun_ = nullptr;
}
inline const ::HmiInterface::SpeedLimitShowDemand& SmartDrivingTips::_internal_speedlimit_fun() const {
  const ::HmiInterface::SpeedLimitShowDemand* p = speedlimit_fun_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::SpeedLimitShowDemand&>(
      ::HmiInterface::_SpeedLimitShowDemand_default_instance_);
}
inline const ::HmiInterface::SpeedLimitShowDemand& SmartDrivingTips::speedlimit_fun() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SmartDrivingTips.speedlimit_fun)
  return _internal_speedlimit_fun();
}
inline void SmartDrivingTips::unsafe_arena_set_allocated_speedlimit_fun(
    ::HmiInterface::SpeedLimitShowDemand* speedlimit_fun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speedlimit_fun_);
  }
  speedlimit_fun_ = speedlimit_fun;
  if (speedlimit_fun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.SmartDrivingTips.speedlimit_fun)
}
inline ::HmiInterface::SpeedLimitShowDemand* SmartDrivingTips::release_speedlimit_fun() {
  
  ::HmiInterface::SpeedLimitShowDemand* temp = speedlimit_fun_;
  speedlimit_fun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::SpeedLimitShowDemand* SmartDrivingTips::unsafe_arena_release_speedlimit_fun() {
  // @@protoc_insertion_point(field_release:HmiInterface.SmartDrivingTips.speedlimit_fun)
  
  ::HmiInterface::SpeedLimitShowDemand* temp = speedlimit_fun_;
  speedlimit_fun_ = nullptr;
  return temp;
}
inline ::HmiInterface::SpeedLimitShowDemand* SmartDrivingTips::_internal_mutable_speedlimit_fun() {
  
  if (speedlimit_fun_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::SpeedLimitShowDemand>(GetArenaForAllocation());
    speedlimit_fun_ = p;
  }
  return speedlimit_fun_;
}
inline ::HmiInterface::SpeedLimitShowDemand* SmartDrivingTips::mutable_speedlimit_fun() {
  ::HmiInterface::SpeedLimitShowDemand* _msg = _internal_mutable_speedlimit_fun();
  // @@protoc_insertion_point(field_mutable:HmiInterface.SmartDrivingTips.speedlimit_fun)
  return _msg;
}
inline void SmartDrivingTips::set_allocated_speedlimit_fun(::HmiInterface::SpeedLimitShowDemand* speedlimit_fun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete speedlimit_fun_;
  }
  if (speedlimit_fun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::SpeedLimitShowDemand>::GetOwningArena(speedlimit_fun);
    if (message_arena != submessage_arena) {
      speedlimit_fun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speedlimit_fun, submessage_arena);
    }
    
  } else {
    
  }
  speedlimit_fun_ = speedlimit_fun;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.SmartDrivingTips.speedlimit_fun)
}

// float ads_latprohibitcountdown = 9;
inline void SmartDrivingTips::clear_ads_latprohibitcountdown() {
  ads_latprohibitcountdown_ = 0;
}
inline float SmartDrivingTips::_internal_ads_latprohibitcountdown() const {
  return ads_latprohibitcountdown_;
}
inline float SmartDrivingTips::ads_latprohibitcountdown() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SmartDrivingTips.ads_latprohibitcountdown)
  return _internal_ads_latprohibitcountdown();
}
inline void SmartDrivingTips::_internal_set_ads_latprohibitcountdown(float value) {
  
  ads_latprohibitcountdown_ = value;
}
inline void SmartDrivingTips::set_ads_latprohibitcountdown(float value) {
  _internal_set_ads_latprohibitcountdown(value);
  // @@protoc_insertion_point(field_set:HmiInterface.SmartDrivingTips.ads_latprohibitcountdown)
}

// float ads_sbuncountdown = 10;
inline void SmartDrivingTips::clear_ads_sbuncountdown() {
  ads_sbuncountdown_ = 0;
}
inline float SmartDrivingTips::_internal_ads_sbuncountdown() const {
  return ads_sbuncountdown_;
}
inline float SmartDrivingTips::ads_sbuncountdown() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SmartDrivingTips.ads_sbuncountdown)
  return _internal_ads_sbuncountdown();
}
inline void SmartDrivingTips::_internal_set_ads_sbuncountdown(float value) {
  
  ads_sbuncountdown_ = value;
}
inline void SmartDrivingTips::set_ads_sbuncountdown(float value) {
  _internal_set_ads_sbuncountdown(value);
  // @@protoc_insertion_point(field_set:HmiInterface.SmartDrivingTips.ads_sbuncountdown)
}

// .HmiInterface.ADAScruiseRecflag ads_adascruiserec = 11;
inline bool SmartDrivingTips::_internal_has_ads_adascruiserec() const {
  return this != internal_default_instance() && ads_adascruiserec_ != nullptr;
}
inline bool SmartDrivingTips::has_ads_adascruiserec() const {
  return _internal_has_ads_adascruiserec();
}
inline void SmartDrivingTips::clear_ads_adascruiserec() {
  if (GetArenaForAllocation() == nullptr && ads_adascruiserec_ != nullptr) {
    delete ads_adascruiserec_;
  }
  ads_adascruiserec_ = nullptr;
}
inline const ::HmiInterface::ADAScruiseRecflag& SmartDrivingTips::_internal_ads_adascruiserec() const {
  const ::HmiInterface::ADAScruiseRecflag* p = ads_adascruiserec_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::ADAScruiseRecflag&>(
      ::HmiInterface::_ADAScruiseRecflag_default_instance_);
}
inline const ::HmiInterface::ADAScruiseRecflag& SmartDrivingTips::ads_adascruiserec() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SmartDrivingTips.ads_adascruiserec)
  return _internal_ads_adascruiserec();
}
inline void SmartDrivingTips::unsafe_arena_set_allocated_ads_adascruiserec(
    ::HmiInterface::ADAScruiseRecflag* ads_adascruiserec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ads_adascruiserec_);
  }
  ads_adascruiserec_ = ads_adascruiserec;
  if (ads_adascruiserec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.SmartDrivingTips.ads_adascruiserec)
}
inline ::HmiInterface::ADAScruiseRecflag* SmartDrivingTips::release_ads_adascruiserec() {
  
  ::HmiInterface::ADAScruiseRecflag* temp = ads_adascruiserec_;
  ads_adascruiserec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::ADAScruiseRecflag* SmartDrivingTips::unsafe_arena_release_ads_adascruiserec() {
  // @@protoc_insertion_point(field_release:HmiInterface.SmartDrivingTips.ads_adascruiserec)
  
  ::HmiInterface::ADAScruiseRecflag* temp = ads_adascruiserec_;
  ads_adascruiserec_ = nullptr;
  return temp;
}
inline ::HmiInterface::ADAScruiseRecflag* SmartDrivingTips::_internal_mutable_ads_adascruiserec() {
  
  if (ads_adascruiserec_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::ADAScruiseRecflag>(GetArenaForAllocation());
    ads_adascruiserec_ = p;
  }
  return ads_adascruiserec_;
}
inline ::HmiInterface::ADAScruiseRecflag* SmartDrivingTips::mutable_ads_adascruiserec() {
  ::HmiInterface::ADAScruiseRecflag* _msg = _internal_mutable_ads_adascruiserec();
  // @@protoc_insertion_point(field_mutable:HmiInterface.SmartDrivingTips.ads_adascruiserec)
  return _msg;
}
inline void SmartDrivingTips::set_allocated_ads_adascruiserec(::HmiInterface::ADAScruiseRecflag* ads_adascruiserec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ads_adascruiserec_;
  }
  if (ads_adascruiserec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::ADAScruiseRecflag>::GetOwningArena(ads_adascruiserec);
    if (message_arena != submessage_arena) {
      ads_adascruiserec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ads_adascruiserec, submessage_arena);
    }
    
  } else {
    
  }
  ads_adascruiserec_ = ads_adascruiserec;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.SmartDrivingTips.ads_adascruiserec)
}

// .HmiInterface.ADSNIDOutDis ads_nidoutdistance = 12;
inline bool SmartDrivingTips::_internal_has_ads_nidoutdistance() const {
  return this != internal_default_instance() && ads_nidoutdistance_ != nullptr;
}
inline bool SmartDrivingTips::has_ads_nidoutdistance() const {
  return _internal_has_ads_nidoutdistance();
}
inline void SmartDrivingTips::clear_ads_nidoutdistance() {
  if (GetArenaForAllocation() == nullptr && ads_nidoutdistance_ != nullptr) {
    delete ads_nidoutdistance_;
  }
  ads_nidoutdistance_ = nullptr;
}
inline const ::HmiInterface::ADSNIDOutDis& SmartDrivingTips::_internal_ads_nidoutdistance() const {
  const ::HmiInterface::ADSNIDOutDis* p = ads_nidoutdistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::ADSNIDOutDis&>(
      ::HmiInterface::_ADSNIDOutDis_default_instance_);
}
inline const ::HmiInterface::ADSNIDOutDis& SmartDrivingTips::ads_nidoutdistance() const {
  // @@protoc_insertion_point(field_get:HmiInterface.SmartDrivingTips.ads_nidoutdistance)
  return _internal_ads_nidoutdistance();
}
inline void SmartDrivingTips::unsafe_arena_set_allocated_ads_nidoutdistance(
    ::HmiInterface::ADSNIDOutDis* ads_nidoutdistance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ads_nidoutdistance_);
  }
  ads_nidoutdistance_ = ads_nidoutdistance;
  if (ads_nidoutdistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.SmartDrivingTips.ads_nidoutdistance)
}
inline ::HmiInterface::ADSNIDOutDis* SmartDrivingTips::release_ads_nidoutdistance() {
  
  ::HmiInterface::ADSNIDOutDis* temp = ads_nidoutdistance_;
  ads_nidoutdistance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::ADSNIDOutDis* SmartDrivingTips::unsafe_arena_release_ads_nidoutdistance() {
  // @@protoc_insertion_point(field_release:HmiInterface.SmartDrivingTips.ads_nidoutdistance)
  
  ::HmiInterface::ADSNIDOutDis* temp = ads_nidoutdistance_;
  ads_nidoutdistance_ = nullptr;
  return temp;
}
inline ::HmiInterface::ADSNIDOutDis* SmartDrivingTips::_internal_mutable_ads_nidoutdistance() {
  
  if (ads_nidoutdistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::ADSNIDOutDis>(GetArenaForAllocation());
    ads_nidoutdistance_ = p;
  }
  return ads_nidoutdistance_;
}
inline ::HmiInterface::ADSNIDOutDis* SmartDrivingTips::mutable_ads_nidoutdistance() {
  ::HmiInterface::ADSNIDOutDis* _msg = _internal_mutable_ads_nidoutdistance();
  // @@protoc_insertion_point(field_mutable:HmiInterface.SmartDrivingTips.ads_nidoutdistance)
  return _msg;
}
inline void SmartDrivingTips::set_allocated_ads_nidoutdistance(::HmiInterface::ADSNIDOutDis* ads_nidoutdistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ads_nidoutdistance_;
  }
  if (ads_nidoutdistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::ADSNIDOutDis>::GetOwningArena(ads_nidoutdistance);
    if (message_arena != submessage_arena) {
      ads_nidoutdistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ads_nidoutdistance, submessage_arena);
    }
    
  } else {
    
  }
  ads_nidoutdistance_ = ads_nidoutdistance;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.SmartDrivingTips.ads_nidoutdistance)
}

// -------------------------------------------------------------------

// BasicSmartDrivingTips

// .HmiInterface.SmartDrivingTips smartdrivetips = 1;
inline bool BasicSmartDrivingTips::_internal_has_smartdrivetips() const {
  return this != internal_default_instance() && smartdrivetips_ != nullptr;
}
inline bool BasicSmartDrivingTips::has_smartdrivetips() const {
  return _internal_has_smartdrivetips();
}
inline void BasicSmartDrivingTips::clear_smartdrivetips() {
  if (GetArenaForAllocation() == nullptr && smartdrivetips_ != nullptr) {
    delete smartdrivetips_;
  }
  smartdrivetips_ = nullptr;
}
inline const ::HmiInterface::SmartDrivingTips& BasicSmartDrivingTips::_internal_smartdrivetips() const {
  const ::HmiInterface::SmartDrivingTips* p = smartdrivetips_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::SmartDrivingTips&>(
      ::HmiInterface::_SmartDrivingTips_default_instance_);
}
inline const ::HmiInterface::SmartDrivingTips& BasicSmartDrivingTips::smartdrivetips() const {
  // @@protoc_insertion_point(field_get:HmiInterface.BasicSmartDrivingTips.smartdrivetips)
  return _internal_smartdrivetips();
}
inline void BasicSmartDrivingTips::unsafe_arena_set_allocated_smartdrivetips(
    ::HmiInterface::SmartDrivingTips* smartdrivetips) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smartdrivetips_);
  }
  smartdrivetips_ = smartdrivetips;
  if (smartdrivetips) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.BasicSmartDrivingTips.smartdrivetips)
}
inline ::HmiInterface::SmartDrivingTips* BasicSmartDrivingTips::release_smartdrivetips() {
  
  ::HmiInterface::SmartDrivingTips* temp = smartdrivetips_;
  smartdrivetips_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::SmartDrivingTips* BasicSmartDrivingTips::unsafe_arena_release_smartdrivetips() {
  // @@protoc_insertion_point(field_release:HmiInterface.BasicSmartDrivingTips.smartdrivetips)
  
  ::HmiInterface::SmartDrivingTips* temp = smartdrivetips_;
  smartdrivetips_ = nullptr;
  return temp;
}
inline ::HmiInterface::SmartDrivingTips* BasicSmartDrivingTips::_internal_mutable_smartdrivetips() {
  
  if (smartdrivetips_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::SmartDrivingTips>(GetArenaForAllocation());
    smartdrivetips_ = p;
  }
  return smartdrivetips_;
}
inline ::HmiInterface::SmartDrivingTips* BasicSmartDrivingTips::mutable_smartdrivetips() {
  ::HmiInterface::SmartDrivingTips* _msg = _internal_mutable_smartdrivetips();
  // @@protoc_insertion_point(field_mutable:HmiInterface.BasicSmartDrivingTips.smartdrivetips)
  return _msg;
}
inline void BasicSmartDrivingTips::set_allocated_smartdrivetips(::HmiInterface::SmartDrivingTips* smartdrivetips) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete smartdrivetips_;
  }
  if (smartdrivetips) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::SmartDrivingTips>::GetOwningArena(smartdrivetips);
    if (message_arena != submessage_arena) {
      smartdrivetips = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smartdrivetips, submessage_arena);
    }
    
  } else {
    
  }
  smartdrivetips_ = smartdrivetips;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.BasicSmartDrivingTips.smartdrivetips)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HmiInterface

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hmi_5fbasic_5fsmartdrivingtips_2eproto
