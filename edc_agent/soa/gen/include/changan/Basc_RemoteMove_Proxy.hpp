/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.0.2
  ServiceLatestModifyTime: 2023-06-07T19:58:47
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#ifndef Basc_RemoteMove_Proxy_HPP
#define Basc_RemoteMove_Proxy_HPP
#include <string.h>
#include <future>
#include <chrono>
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "dds/ddsrt/sync.h"
#include "changan/Basc_RemoteMove.h"
#include "changan/base_proxy.hpp"
#include "changan/base_wait.hpp"
#include "changan/dds_client.hpp"
#include <mutex>

namespace com {
namespace changan {
namespace carCabin {
namespace remoteMove {
namespace proxy {
	extern void on_carCabin_Basc_RemoteMove_reply_data_available(int32_t reader, void* arg);
	class Basc_RemoteMove_Proxy : IBaseProxy,IBaseWait, public ProviderMatchedStatusHandler, public dds_link_count{
		public:
		    static Basc_RemoteMove_Proxy& get_instance();
			bool init(std::string config="");
			void wait_server_online();
			bool destroy();
			DDS_GuidPrefix_t guid;
			Msg<uint8_t> RR_ScreenCoordinate(const uint32_t &Xapp,const uint32_t &Yapp) {
				return this->RR_ScreenCoordinate<DEFAULT_TIMEOUT>(Xapp,Yapp);
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> RR_ScreenCoordinate(const uint32_t &Xapp,const uint32_t &Yapp) {
				return this->RR_ScreenCoordinate(Xapp,Yapp, TIMEOUT);
			}
			Msg<uint8_t> RR_FunSwitch(const uint8_t &State,const std::string &RoomId) {
				return this->RR_FunSwitch<DEFAULT_TIMEOUT>(State,RoomId);
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> RR_FunSwitch(const uint8_t &State,const std::string &RoomId) {
				return this->RR_FunSwitch(State,RoomId, TIMEOUT);
			}
			const std::string get_service_name() {
				return this->service_name;
			}

		private:
		    const std::string service_name = "Basc_RemoteMove_skeleton";
			Msg<uint8_t> RR_ScreenCoordinate(const uint32_t &Xapp,const uint32_t &Yapp, size_t dds_rpc_time_out);
			Msg<uint8_t> RR_FunSwitch(const uint8_t &State,const std::string &RoomId, size_t dds_rpc_time_out);

			dds_rpc_handle_t dds_rpc_request_handle = {-1,-1,-1};
			dds_rpc_handle_t dds_rpc_reply_handle = { -1,-1,-1 };

            bool init_flag = false;
            std::mutex init_mutex;

			Basc_RemoteMove_Proxy();
			~Basc_RemoteMove_Proxy();

			Basc_RemoteMove_Proxy(const Basc_RemoteMove_Proxy& signal);

			const Basc_RemoteMove_Proxy& operator=(const Basc_RemoteMove_Proxy& signal);
	};
}
}
}
}
}
#endif

