/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.6
  ServiceLatestModifyTime: 2023-07-14T09:59:34
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#ifndef Basc_APAnotice_Proxy_HPP
#define Basc_APAnotice_Proxy_HPP
#include <string.h>
#include <future>
#include <chrono>
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "dds/ddsrt/sync.h"
#include "changan/Basc_APAnotice.h"
#include "changan/base_proxy.hpp"
#include "changan/base_wait.hpp"
#include "changan/dds_client.hpp"
#include <mutex>

namespace com {
namespace changan {
namespace carDrive {
namespace C2Controller {
namespace proxy {
	namespace events {
        class Basc_APAnotice_Ntf_APAnotice{
			public:
			    void set_receive_handler(const EventReceiveHandler<const APAsetnotice&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const APAsetnotice &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const APAsetnotice&>> handler_list;
			    std::string event_name="Ntf_APAnotice";
        };
        class Basc_APAnotice_Ntf_APP_RMACntrlcomnd{
			public:
			    void set_receive_handler(const EventReceiveHandler<const RMAset_APP_MainScreenOperate&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const RMAset_APP_MainScreenOperate &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const RMAset_APP_MainScreenOperate&>> handler_list;
			    std::string event_name="Ntf_APP_RMACntrlcomnd";
        };
	}
	extern void on_carDrive_Basc_APAnotice_reply_data_available(int32_t reader, void* arg);
	class Basc_APAnotice_Proxy : IBaseProxy,IBaseWait, public ProviderMatchedStatusHandler, public dds_link_count{
		public:
		    static Basc_APAnotice_Proxy& get_instance();
			bool init(std::string config="");
			void wait_server_online();
			bool destroy();
            events::Basc_APAnotice_Ntf_APAnotice Ntf_APAnotice;
            events::Basc_APAnotice_Ntf_APP_RMACntrlcomnd Ntf_APP_RMACntrlcomnd;
			DDS_GuidPrefix_t guid;
			Msg<ResponseInfo> RR_EDC_MainScreenOperate(const EDCset_MainScreenOperate &EDCset_MainScreenOperate,const RequestInfo &requestinfo) {
				return this->RR_EDC_MainScreenOperate<DEFAULT_TIMEOUT>(EDCset_MainScreenOperate,requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_EDC_MainScreenOperate(const EDCset_MainScreenOperate &EDCset_MainScreenOperate,const RequestInfo &requestinfo) {
				return this->RR_EDC_MainScreenOperate(EDCset_MainScreenOperate,requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_EDC_PopUpWindowOperate(const EDCset_PopUpWindowOperate &EDCset_PopUpWindowOperate,const RequestInfo &requestinfo) {
				return this->RR_EDC_PopUpWindowOperate<DEFAULT_TIMEOUT>(EDCset_PopUpWindowOperate,requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_EDC_PopUpWindowOperate(const EDCset_PopUpWindowOperate &EDCset_PopUpWindowOperate,const RequestInfo &requestinfo) {
				return this->RR_EDC_PopUpWindowOperate(EDCset_PopUpWindowOperate,requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_EDC_slot_ID(const EDCset_slot_ID &EDCset_slot_ID,const RequestInfo &requestinfo) {
				return this->RR_EDC_slot_ID<DEFAULT_TIMEOUT>(EDCset_slot_ID,requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_EDC_slot_ID(const EDCset_slot_ID &EDCset_slot_ID,const RequestInfo &requestinfo) {
				return this->RR_EDC_slot_ID(EDCset_slot_ID,requestinfo, TIMEOUT);
			}
			Msg<APAsetnotice> Get_APAnotice() {
				return this->Get_APAnotice<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<APAsetnotice> Get_APAnotice() {
				return this->Get_APAnotice( TIMEOUT);
			}
			Msg<ResponseInfo> RR_EDC_EducatingModeOnOff(const EDCset_EducatingModeOnOff &EDCset_EducatingModeOnOff,const RequestInfo &requestinfo) {
				return this->RR_EDC_EducatingModeOnOff<DEFAULT_TIMEOUT>(EDCset_EducatingModeOnOff,requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_EDC_EducatingModeOnOff(const EDCset_EducatingModeOnOff &EDCset_EducatingModeOnOff,const RequestInfo &requestinfo) {
				return this->RR_EDC_EducatingModeOnOff(EDCset_EducatingModeOnOff,requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_EDC_APAvoicecontrol(const EDCset_APAvoicecontrol &EDCset_APAvoicecontrol,const RequestInfo &requestinfo) {
				return this->RR_EDC_APAvoicecontrol<DEFAULT_TIMEOUT>(EDCset_APAvoicecontrol,requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_EDC_APAvoicecontrol(const EDCset_APAvoicecontrol &EDCset_APAvoicecontrol,const RequestInfo &requestinfo) {
				return this->RR_EDC_APAvoicecontrol(EDCset_APAvoicecontrol,requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_APP_RMACntrlcomnd(const RMAset_APP_MainScreenOperate &RMAset_APP_MainScreenOperate,const RequestInfo &RequestInfo) {
				return this->RR_APP_RMACntrlcomnd<DEFAULT_TIMEOUT>(RMAset_APP_MainScreenOperate,RequestInfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_APP_RMACntrlcomnd(const RMAset_APP_MainScreenOperate &RMAset_APP_MainScreenOperate,const RequestInfo &RequestInfo) {
				return this->RR_APP_RMACntrlcomnd(RMAset_APP_MainScreenOperate,RequestInfo, TIMEOUT);
			}
			Msg<RMAset_APP_MainScreenOperate> Get_APP_RMACntrlcomnd() {
				return this->Get_APP_RMACntrlcomnd<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<RMAset_APP_MainScreenOperate> Get_APP_RMACntrlcomnd() {
				return this->Get_APP_RMACntrlcomnd( TIMEOUT);
			}
			Msg<uint8_t> RR_EDC_APAPOCDirSel(const EDC_APAPOCDirSelData &EDC_APAPOCDirSelData,const RequestInfo &RequestInfo) {
				return this->RR_EDC_APAPOCDirSel<DEFAULT_TIMEOUT>(EDC_APAPOCDirSelData,RequestInfo);
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> RR_EDC_APAPOCDirSel(const EDC_APAPOCDirSelData &EDC_APAPOCDirSelData,const RequestInfo &RequestInfo) {
				return this->RR_EDC_APAPOCDirSel(EDC_APAPOCDirSelData,RequestInfo, TIMEOUT);
			}
			Msg<uint8_t> RR_EDC_APASelfdefnSlot(const EDC_APASelfdefnSlotData &EDC_APASelfdefnSlotData,const RequestInfo &RequestInfo) {
				return this->RR_EDC_APASelfdefnSlot<DEFAULT_TIMEOUT>(EDC_APASelfdefnSlotData,RequestInfo);
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> RR_EDC_APASelfdefnSlot(const EDC_APASelfdefnSlotData &EDC_APASelfdefnSlotData,const RequestInfo &RequestInfo) {
				return this->RR_EDC_APASelfdefnSlot(EDC_APASelfdefnSlotData,RequestInfo, TIMEOUT);
			}
			Msg<uint8_t> RR_EDC_APAAudioRmnSet(const EDC_APAAudioRmnSetData &EDC_APAAudioRmnSetData,const RequestInfo &RequestInfo) {
				return this->RR_EDC_APAAudioRmnSet<DEFAULT_TIMEOUT>(EDC_APAAudioRmnSetData,RequestInfo);
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> RR_EDC_APAAudioRmnSet(const EDC_APAAudioRmnSetData &EDC_APAAudioRmnSetData,const RequestInfo &RequestInfo) {
				return this->RR_EDC_APAAudioRmnSet(EDC_APAAudioRmnSetData,RequestInfo, TIMEOUT);
			}
			const std::string get_service_name() {
				return this->service_name;
			}

		private:
		    const std::string service_name = "Basc_APAnotice_skeleton";
			Msg<ResponseInfo> RR_EDC_MainScreenOperate(const EDCset_MainScreenOperate &EDCset_MainScreenOperate,const RequestInfo &requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_EDC_PopUpWindowOperate(const EDCset_PopUpWindowOperate &EDCset_PopUpWindowOperate,const RequestInfo &requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_EDC_slot_ID(const EDCset_slot_ID &EDCset_slot_ID,const RequestInfo &requestinfo, size_t dds_rpc_time_out);
			Msg<APAsetnotice> Get_APAnotice( size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_EDC_EducatingModeOnOff(const EDCset_EducatingModeOnOff &EDCset_EducatingModeOnOff,const RequestInfo &requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_EDC_APAvoicecontrol(const EDCset_APAvoicecontrol &EDCset_APAvoicecontrol,const RequestInfo &requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_APP_RMACntrlcomnd(const RMAset_APP_MainScreenOperate &RMAset_APP_MainScreenOperate,const RequestInfo &RequestInfo, size_t dds_rpc_time_out);
			Msg<RMAset_APP_MainScreenOperate> Get_APP_RMACntrlcomnd( size_t dds_rpc_time_out);
			Msg<uint8_t> RR_EDC_APAPOCDirSel(const EDC_APAPOCDirSelData &EDC_APAPOCDirSelData,const RequestInfo &RequestInfo, size_t dds_rpc_time_out);
			Msg<uint8_t> RR_EDC_APASelfdefnSlot(const EDC_APASelfdefnSlotData &EDC_APASelfdefnSlotData,const RequestInfo &RequestInfo, size_t dds_rpc_time_out);
			Msg<uint8_t> RR_EDC_APAAudioRmnSet(const EDC_APAAudioRmnSetData &EDC_APAAudioRmnSetData,const RequestInfo &RequestInfo, size_t dds_rpc_time_out);

			dds_rpc_handle_t dds_rpc_request_handle = {-1,-1,-1};
			dds_rpc_handle_t dds_rpc_reply_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_APAnotice_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_APP_RMACntrlcomnd_handle = { -1,-1,-1 };

            bool init_flag = false;
            std::mutex init_mutex;

			Basc_APAnotice_Proxy();
			~Basc_APAnotice_Proxy();

			Basc_APAnotice_Proxy(const Basc_APAnotice_Proxy& signal);

			const Basc_APAnotice_Proxy& operator=(const Basc_APAnotice_Proxy& signal);
	};
}
}
}
}
}
#endif

