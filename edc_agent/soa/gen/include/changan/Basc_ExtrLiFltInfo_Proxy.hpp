/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  ServiceVersion: V2.3
  CmVersion： v2.0.3
  ServiceLatestModifyTime: 2023-07-25T12:19:34
  Generate Time: 2023-12-11 18:07:58
*****************************************************************/
#ifndef Basc_ExtrLiFltInfo_Proxy_HPP
#define Basc_ExtrLiFltInfo_Proxy_HPP
#include <string.h>
#include <future>
#include <chrono>
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "dds/ddsrt/sync.h"
#include "changan/base_proxy.hpp"
#include "changan/base_wait.hpp"
#include "changan/dds_client.hpp"
#include <mutex>
#include "changan/Car_Control.h"
namespace com {
namespace changan {
namespace carControl {
namespace ExteriorLight {
namespace proxy {
	namespace events {
        class Basc_ExtrLiFltInfo_Ntf_PosnLiFltInfo{
			public:
				void set_receive_handler(const EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_PosnLiFltInfo_PosnLiFltInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_PosnLiFltInfo_PosnLiFltInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_PosnLiFltInfo_PosnLiFltInfo&>> handler_list;
			    std::string event_name="Ntf_PosnLiFltInfo";
        };
        class Basc_ExtrLiFltInfo_Ntf_LoBeamFltInfo{
			public:
				void set_receive_handler(const EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_LoBeamFltInfo_LoBeamFltInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_LoBeamFltInfo_LoBeamFltInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_LoBeamFltInfo_LoBeamFltInfo&>> handler_list;
			    std::string event_name="Ntf_LoBeamFltInfo";
        };
        class Basc_ExtrLiFltInfo_Ntf_HiBeamFltInfo{
			public:
				void set_receive_handler(const EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_HiBeamFltInfo_HiBeamFltInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_HiBeamFltInfo_HiBeamFltInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_HiBeamFltInfo_HiBeamFltInfo&>> handler_list;
			    std::string event_name="Ntf_HiBeamFltInfo";
        };
        class Basc_ExtrLiFltInfo_Ntf_RvsLiFltInfo{
			public:
			    void set_receive_handler(const EventReceiveHandler<const RvsLiFltInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const RvsLiFltInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const RvsLiFltInfo&>> handler_list;
			    std::string event_name="Ntf_RvsLiFltInfo";
        };
        class Basc_ExtrLiFltInfo_Ntf_DRLFltInfo{
			public:
			    void set_receive_handler(const EventReceiveHandler<const DRLFltInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const DRLFltInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const DRLFltInfo&>> handler_list;
			    std::string event_name="Ntf_DRLFltInfo";
        };
        class Basc_ExtrLiFltInfo_Ntf_BrkLiFltInfo{
			public:
				void set_receive_handler(const EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_BrkLiFltInfo_BrkLiFltInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_BrkLiFltInfo_BrkLiFltInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_BrkLiFltInfo_BrkLiFltInfo&>> handler_list;
			    std::string event_name="Ntf_BrkLiFltInfo";
        };
        class Basc_ExtrLiFltInfo_Ntf_TurnLiFltInfo{
			public:
				void set_receive_handler(const EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_TurnLiFltInfo_TurnLiFltInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_TurnLiFltInfo_TurnLiFltInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiFltInfo_Ntf_TurnLiFltInfo_TurnLiFltInfo&>> handler_list;
			    std::string event_name="Ntf_TurnLiFltInfo";
        };
        class Basc_ExtrLiFltInfo_Ntf_FogFltInfo{
			public:
			    void set_receive_handler(const EventReceiveHandler<const FogFltInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const FogFltInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const FogFltInfo&>> handler_list;
			    std::string event_name="Ntf_FogFltInfo";
        };
	}
	extern void on_carControl_Basc_ExtrLiFltInfo_reply_data_available(int32_t reader, void* arg);
	class Basc_ExtrLiFltInfo_Proxy : IBaseProxy,IBaseWait, public ProviderMatchedStatusHandler{
		public:
		    static Basc_ExtrLiFltInfo_Proxy& get_instance();
			bool init(std::string config="");
			void wait_server_online();
			bool uninit();
			bool is_init();
            events::Basc_ExtrLiFltInfo_Ntf_PosnLiFltInfo Ntf_PosnLiFltInfo;
            events::Basc_ExtrLiFltInfo_Ntf_LoBeamFltInfo Ntf_LoBeamFltInfo;
            events::Basc_ExtrLiFltInfo_Ntf_HiBeamFltInfo Ntf_HiBeamFltInfo;
            events::Basc_ExtrLiFltInfo_Ntf_RvsLiFltInfo Ntf_RvsLiFltInfo;
            events::Basc_ExtrLiFltInfo_Ntf_DRLFltInfo Ntf_DRLFltInfo;
            events::Basc_ExtrLiFltInfo_Ntf_BrkLiFltInfo Ntf_BrkLiFltInfo;
            events::Basc_ExtrLiFltInfo_Ntf_TurnLiFltInfo Ntf_TurnLiFltInfo;
            events::Basc_ExtrLiFltInfo_Ntf_FogFltInfo Ntf_FogFltInfo;
			DDS_GuidPrefix_t guid;
			Msg<PosnLiFltInfo> Get_PosnLiFltInfo() {
				return this->Get_PosnLiFltInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<PosnLiFltInfo> Get_PosnLiFltInfo() {
				return this->Get_PosnLiFltInfo( TIMEOUT);
			}
			Msg<LoBeamFltInfo> Get_LoBeamFltInfo() {
				return this->Get_LoBeamFltInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<LoBeamFltInfo> Get_LoBeamFltInfo() {
				return this->Get_LoBeamFltInfo( TIMEOUT);
			}
			Msg<HiBeamFltInfo> Get_HiBeamFltInfo() {
				return this->Get_HiBeamFltInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<HiBeamFltInfo> Get_HiBeamFltInfo() {
				return this->Get_HiBeamFltInfo( TIMEOUT);
			}
			Msg<RvsLiFltInfo> Get_RvsLiFltInfo() {
				return this->Get_RvsLiFltInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<RvsLiFltInfo> Get_RvsLiFltInfo() {
				return this->Get_RvsLiFltInfo( TIMEOUT);
			}
			Msg<DRLFltInfo> Get_DRLFltInfo() {
				return this->Get_DRLFltInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<DRLFltInfo> Get_DRLFltInfo() {
				return this->Get_DRLFltInfo( TIMEOUT);
			}
			Msg<BrkLiFltInfo> Get_BrkLiFltInfo() {
				return this->Get_BrkLiFltInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<BrkLiFltInfo> Get_BrkLiFltInfo() {
				return this->Get_BrkLiFltInfo( TIMEOUT);
			}
			Msg<TurnLiFltInfo> Get_TurnLiFltInfo() {
				return this->Get_TurnLiFltInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<TurnLiFltInfo> Get_TurnLiFltInfo() {
				return this->Get_TurnLiFltInfo( TIMEOUT);
			}
			Msg<FogFltInfo> Get_FogFltInfo() {
				return this->Get_FogFltInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<FogFltInfo> Get_FogFltInfo() {
				return this->Get_FogFltInfo( TIMEOUT);
			}
			const std::string get_service_name() {
				return this->service_name;
			};
			uint16_t get_service_id(){
				return this->service_id;
			}

		private:
		    const std::string service_name = "Basc_ExtrLiFltInfo_skeleton";
			Msg<PosnLiFltInfo> Get_PosnLiFltInfo( size_t dds_rpc_time_out);
			Msg<LoBeamFltInfo> Get_LoBeamFltInfo( size_t dds_rpc_time_out);
			Msg<HiBeamFltInfo> Get_HiBeamFltInfo( size_t dds_rpc_time_out);
			Msg<RvsLiFltInfo> Get_RvsLiFltInfo( size_t dds_rpc_time_out);
			Msg<DRLFltInfo> Get_DRLFltInfo( size_t dds_rpc_time_out);
			Msg<BrkLiFltInfo> Get_BrkLiFltInfo( size_t dds_rpc_time_out);
			Msg<TurnLiFltInfo> Get_TurnLiFltInfo( size_t dds_rpc_time_out);
			Msg<FogFltInfo> Get_FogFltInfo( size_t dds_rpc_time_out);

			dds_rpc_handle_t dds_rpc_request_handle = {-1,-1,-1};
			dds_rpc_handle_t dds_rpc_reply_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_PosnLiFltInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_LoBeamFltInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_HiBeamFltInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_RvsLiFltInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_DRLFltInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_BrkLiFltInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_TurnLiFltInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_FogFltInfo_handle = { -1,-1,-1 };
            bool init_flag = false;
            std::mutex init_mutex;
			const uint16_t service_id = 1535;

			Basc_ExtrLiFltInfo_Proxy();
			~Basc_ExtrLiFltInfo_Proxy();

			Basc_ExtrLiFltInfo_Proxy(const Basc_ExtrLiFltInfo_Proxy& signal);

			const Basc_ExtrLiFltInfo_Proxy& operator=(const Basc_ExtrLiFltInfo_Proxy& signal);
	};
}
}
}
}
}
#endif

