/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  ServiceVersion: V1.2
  CmVersion： v2.0.3
  ServiceLatestModifyTime: 2023-07-25T13:37:03
  Generate Time: 2023-12-11 18:07:58
*****************************************************************/
#ifndef Basc_LiSnsrInfo_Proxy_HPP
#define Basc_LiSnsrInfo_Proxy_HPP
#include <string.h>
#include <future>
#include <chrono>
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "dds/ddsrt/sync.h"
#include "changan/base_proxy.hpp"
#include "changan/base_wait.hpp"
#include "changan/dds_client.hpp"
#include <mutex>
#include "changan/Car_Control.h"
namespace com {
namespace changan {
namespace carControl {
namespace S2S {
namespace proxy {
	namespace events {
        class Basc_LiSnsrInfo_Ntf_SolarLe{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_SolarLe";
        };
        class Basc_LiSnsrInfo_Ntf_SolarRi{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_SolarRi";
        };
        class Basc_LiSnsrInfo_Ntf_LiSnsrMod{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_LiSnsrMod";
        };
        class Basc_LiSnsrInfo_Ntf_LiSnsrLoBeamReq{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_LiSnsrLoBeamReq";
        };
        class Basc_LiSnsrInfo_Ntf_LiSnsrRunSt{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_LiSnsrRunSt";
        };
        class Basc_LiSnsrInfo_Ntf_LiSnsrErrSt{
			public:
				void set_receive_handler(const EventReceiveHandler<const carControl_Secure_Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrErrSt_uint8&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const carControl_Secure_Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrErrSt_uint8 &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const carControl_Secure_Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrErrSt_uint8&>> handler_list;
			    std::string event_name="Ntf_LiSnsrErrSt";
        };
        class Basc_LiSnsrInfo_Ntf_IRBri{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_IRBri";
        };
        class Basc_LiSnsrInfo_Ntf_FWBri{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint16_t&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const uint16_t &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint16_t&>> handler_list;
			    std::string event_name="Ntf_FWBri";
        };
        class Basc_LiSnsrInfo_Ntf_AMBBri{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint16_t&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const uint16_t &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint16_t&>> handler_list;
			    std::string event_name="Ntf_AMBBri";
        };
        class Basc_LiSnsrInfo_Ntf_HUDBri{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint16_t&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const uint16_t &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint16_t&>> handler_list;
			    std::string event_name="Ntf_HUDBri";
        };
        class Basc_LiSnsrInfo_Ntf_LostComFltSt{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_LostComFltSt";
        };
	}
	extern void on_carControl_Basc_LiSnsrInfo_reply_data_available(int32_t reader, void* arg);
	class Basc_LiSnsrInfo_Proxy : IBaseProxy,IBaseWait, public ProviderMatchedStatusHandler{
		public:
		    static Basc_LiSnsrInfo_Proxy& get_instance();
			bool init(std::string config="");
			void wait_server_online();
			bool uninit();
			bool is_init();
            events::Basc_LiSnsrInfo_Ntf_SolarLe Ntf_SolarLe;
            events::Basc_LiSnsrInfo_Ntf_SolarRi Ntf_SolarRi;
            events::Basc_LiSnsrInfo_Ntf_LiSnsrMod Ntf_LiSnsrMod;
            events::Basc_LiSnsrInfo_Ntf_LiSnsrLoBeamReq Ntf_LiSnsrLoBeamReq;
            events::Basc_LiSnsrInfo_Ntf_LiSnsrRunSt Ntf_LiSnsrRunSt;
            events::Basc_LiSnsrInfo_Ntf_LiSnsrErrSt Ntf_LiSnsrErrSt;
            events::Basc_LiSnsrInfo_Ntf_IRBri Ntf_IRBri;
            events::Basc_LiSnsrInfo_Ntf_FWBri Ntf_FWBri;
            events::Basc_LiSnsrInfo_Ntf_AMBBri Ntf_AMBBri;
            events::Basc_LiSnsrInfo_Ntf_HUDBri Ntf_HUDBri;
            events::Basc_LiSnsrInfo_Ntf_LostComFltSt Ntf_LostComFltSt;
			DDS_GuidPrefix_t guid;
			Msg<uint8_t> RR_LiSnsrThd(const uint8_t &LiSnsrThd) {
				return this->RR_LiSnsrThd<DEFAULT_TIMEOUT>(LiSnsrThd);
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> RR_LiSnsrThd(const uint8_t &LiSnsrThd) {
				return this->RR_LiSnsrThd(LiSnsrThd, TIMEOUT);
			}
			Msg<uint8_t> Get_SolarLe() {
				return this->Get_SolarLe<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> Get_SolarLe() {
				return this->Get_SolarLe( TIMEOUT);
			}
			Msg<uint8_t> Get_SolarRi() {
				return this->Get_SolarRi<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> Get_SolarRi() {
				return this->Get_SolarRi( TIMEOUT);
			}
			Msg<uint8_t> Get_LiSnsrMod() {
				return this->Get_LiSnsrMod<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> Get_LiSnsrMod() {
				return this->Get_LiSnsrMod( TIMEOUT);
			}
			Msg<uint8_t> Get_LiSnsrLoBeamReq() {
				return this->Get_LiSnsrLoBeamReq<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> Get_LiSnsrLoBeamReq() {
				return this->Get_LiSnsrLoBeamReq( TIMEOUT);
			}
			Msg<uint8_t> Get_LiSnsrRunSt() {
				return this->Get_LiSnsrRunSt<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> Get_LiSnsrRunSt() {
				return this->Get_LiSnsrRunSt( TIMEOUT);
			}
			Msg<uint8_t> Get_LiSnsrErrSt() {
				return this->Get_LiSnsrErrSt<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> Get_LiSnsrErrSt() {
				return this->Get_LiSnsrErrSt( TIMEOUT);
			}
			Msg<uint8_t> Get_IRBri() {
				return this->Get_IRBri<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> Get_IRBri() {
				return this->Get_IRBri( TIMEOUT);
			}
			Msg<uint16_t> Get_FWBri() {
				return this->Get_FWBri<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint16_t> Get_FWBri() {
				return this->Get_FWBri( TIMEOUT);
			}
			Msg<uint16_t> Get_AMBBri() {
				return this->Get_AMBBri<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint16_t> Get_AMBBri() {
				return this->Get_AMBBri( TIMEOUT);
			}
			Msg<uint16_t> Get_HUDBri() {
				return this->Get_HUDBri<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint16_t> Get_HUDBri() {
				return this->Get_HUDBri( TIMEOUT);
			}
			Msg<uint8_t> Get_LostComFltSt() {
				return this->Get_LostComFltSt<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> Get_LostComFltSt() {
				return this->Get_LostComFltSt( TIMEOUT);
			}
			const std::string get_service_name() {
				return this->service_name;
			};
			uint16_t get_service_id(){
				return this->service_id;
			}

		private:
		    const std::string service_name = "Basc_LiSnsrInfo_skeleton";
			Msg<uint8_t> RR_LiSnsrThd(const uint8_t &LiSnsrThd, size_t dds_rpc_time_out);
			Msg<uint8_t> Get_SolarLe( size_t dds_rpc_time_out);
			Msg<uint8_t> Get_SolarRi( size_t dds_rpc_time_out);
			Msg<uint8_t> Get_LiSnsrMod( size_t dds_rpc_time_out);
			Msg<uint8_t> Get_LiSnsrLoBeamReq( size_t dds_rpc_time_out);
			Msg<uint8_t> Get_LiSnsrRunSt( size_t dds_rpc_time_out);
			Msg<uint8_t> Get_LiSnsrErrSt( size_t dds_rpc_time_out);
			Msg<uint8_t> Get_IRBri( size_t dds_rpc_time_out);
			Msg<uint16_t> Get_FWBri( size_t dds_rpc_time_out);
			Msg<uint16_t> Get_AMBBri( size_t dds_rpc_time_out);
			Msg<uint16_t> Get_HUDBri( size_t dds_rpc_time_out);
			Msg<uint8_t> Get_LostComFltSt( size_t dds_rpc_time_out);

			dds_rpc_handle_t dds_rpc_request_handle = {-1,-1,-1};
			dds_rpc_handle_t dds_rpc_reply_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_SolarLe_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_SolarRi_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_LiSnsrMod_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_LiSnsrLoBeamReq_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_LiSnsrRunSt_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_LiSnsrErrSt_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_IRBri_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_FWBri_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_AMBBri_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_HUDBri_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_LostComFltSt_handle = { -1,-1,-1 };
            bool init_flag = false;
            std::mutex init_mutex;
			const uint16_t service_id = 1803;

			Basc_LiSnsrInfo_Proxy();
			~Basc_LiSnsrInfo_Proxy();

			Basc_LiSnsrInfo_Proxy(const Basc_LiSnsrInfo_Proxy& signal);

			const Basc_LiSnsrInfo_Proxy& operator=(const Basc_LiSnsrInfo_Proxy& signal);
	};
}
}
}
}
}
#endif

