/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  ServiceVersion: V2.0
  CmVersion： v2.0.3
  ServiceLatestModifyTime: 2023-05-15T19:13:51
  Generate Time: 2023-12-11 18:07:58
*****************************************************************/
#ifndef Enh_TurnLi_Proxy_HPP
#define Enh_TurnLi_Proxy_HPP
#include <string.h>
#include <future>
#include <chrono>
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "dds/ddsrt/sync.h"
#include "changan/base_proxy.hpp"
#include "changan/base_wait.hpp"
#include "changan/dds_client.hpp"
#include <mutex>
#include "changan/Car_Control.h"
namespace com {
namespace changan {
namespace carControl {
namespace ExteriorLight {
namespace proxy {
	namespace events {
        class Enh_TurnLi_Ntf_LoglCtrlSt{
			public:
			    void set_receive_handler(const EventReceiveHandler<const TurnLiSt&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const TurnLiSt &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const TurnLiSt&>> handler_list;
			    std::string event_name="Ntf_LoglCtrlSt";
        };
        class Enh_TurnLi_Ntf_SrvOperInfo{
			public:
			    void set_receive_handler(const EventReceiveHandler<const OperationInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const OperationInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const OperationInfo&>> handler_list;
			    std::string event_name="Ntf_SrvOperInfo";
        };
        class Enh_TurnLi_Ntf_SrvRespSt{
			public:
			    void set_receive_handler(const EventReceiveHandler<const TurnLiCtrlCmd&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const TurnLiCtrlCmd &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const TurnLiCtrlCmd&>> handler_list;
			    std::string event_name="Ntf_SrvRespSt";
        };
        class Enh_TurnLi_Ntf_TurnLiFltMonrSt{
			public:
			    void set_receive_handler(const EventReceiveHandler<const TurnLiFltMonrSt&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const TurnLiFltMonrSt &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const TurnLiFltMonrSt&>> handler_list;
			    std::string event_name="Ntf_TurnLiFltMonrSt";
        };
        class Enh_TurnLi_Ntf_OperationCode{
			public:
			    void set_receive_handler(const EventReceiveHandler<const OperationCode&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const OperationCode &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const OperationCode&>> handler_list;
			    std::string event_name="Ntf_OperationCode";
        };
	}
	extern void on_carControl_Enh_TurnLi_reply_data_available(int32_t reader, void* arg);
	class Enh_TurnLi_Proxy : IBaseProxy,IBaseWait, public ProviderMatchedStatusHandler{
		public:
		    static Enh_TurnLi_Proxy& get_instance();
			bool init(std::string config="");
			void wait_server_online();
			bool uninit();
			bool is_init();
            events::Enh_TurnLi_Ntf_LoglCtrlSt Ntf_LoglCtrlSt;
            events::Enh_TurnLi_Ntf_SrvOperInfo Ntf_SrvOperInfo;
            events::Enh_TurnLi_Ntf_SrvRespSt Ntf_SrvRespSt;
            events::Enh_TurnLi_Ntf_TurnLiFltMonrSt Ntf_TurnLiFltMonrSt;
            events::Enh_TurnLi_Ntf_OperationCode Ntf_OperationCode;
			DDS_GuidPrefix_t guid;
			Msg<TurnLiSt> Get_LoglCtrlSt() {
				return this->Get_LoglCtrlSt<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<TurnLiSt> Get_LoglCtrlSt() {
				return this->Get_LoglCtrlSt( TIMEOUT);
			}
			Msg<OperationInfo> Get_SrvOperInfo() {
				return this->Get_SrvOperInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<OperationInfo> Get_SrvOperInfo() {
				return this->Get_SrvOperInfo( TIMEOUT);
			}
			Msg<TurnLiCtrlCmd> Get_SrvRespSt() {
				return this->Get_SrvRespSt<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<TurnLiCtrlCmd> Get_SrvRespSt() {
				return this->Get_SrvRespSt( TIMEOUT);
			}
			Msg<TurnLiFltMonrSt> Get_TurnLiFltMonrSt() {
				return this->Get_TurnLiFltMonrSt<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<TurnLiFltMonrSt> Get_TurnLiFltMonrSt() {
				return this->Get_TurnLiFltMonrSt( TIMEOUT);
			}
			Msg<ResponseInfo> RR_TurnOFF(const TurnLiCtrlCmd &TurnLiCtrlCmd,const RequestInfo &RequestInfo) {
				return this->RR_TurnOFF<DEFAULT_TIMEOUT>(TurnLiCtrlCmd,RequestInfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_TurnOFF(const TurnLiCtrlCmd &TurnLiCtrlCmd,const RequestInfo &RequestInfo) {
				return this->RR_TurnOFF(TurnLiCtrlCmd,RequestInfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_TurnON(const TurnLiCtrlCmd &TurnLiCtrlCmd,const RequestInfo &RequestInfo) {
				return this->RR_TurnON<DEFAULT_TIMEOUT>(TurnLiCtrlCmd,RequestInfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_TurnON(const TurnLiCtrlCmd &TurnLiCtrlCmd,const RequestInfo &RequestInfo) {
				return this->RR_TurnON(TurnLiCtrlCmd,RequestInfo, TIMEOUT);
			}
			const std::string get_service_name() {
				return this->service_name;
			};
			uint16_t get_service_id(){
				return this->service_id;
			}

		private:
		    const std::string service_name = "Enh_TurnLi_skeleton";
			Msg<TurnLiSt> Get_LoglCtrlSt( size_t dds_rpc_time_out);
			Msg<OperationInfo> Get_SrvOperInfo( size_t dds_rpc_time_out);
			Msg<TurnLiCtrlCmd> Get_SrvRespSt( size_t dds_rpc_time_out);
			Msg<TurnLiFltMonrSt> Get_TurnLiFltMonrSt( size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_TurnOFF(const TurnLiCtrlCmd &TurnLiCtrlCmd,const RequestInfo &RequestInfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_TurnON(const TurnLiCtrlCmd &TurnLiCtrlCmd,const RequestInfo &RequestInfo, size_t dds_rpc_time_out);

			dds_rpc_handle_t dds_rpc_request_handle = {-1,-1,-1};
			dds_rpc_handle_t dds_rpc_reply_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_LoglCtrlSt_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_SrvOperInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_SrvRespSt_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_TurnLiFltMonrSt_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_OperationCode_handle = { -1,-1,-1 };
            bool init_flag = false;
            std::mutex init_mutex;
			const uint16_t service_id = 27;

			Enh_TurnLi_Proxy();
			~Enh_TurnLi_Proxy();

			Enh_TurnLi_Proxy(const Enh_TurnLi_Proxy& signal);

			const Enh_TurnLi_Proxy& operator=(const Enh_TurnLi_Proxy& signal);
	};
}
}
}
}
}
#endif

