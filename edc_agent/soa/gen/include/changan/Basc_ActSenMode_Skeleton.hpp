/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.1.6
  ServiceLatestModifyTime: 2023-10-07T15:03:14
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#ifndef Basc_ActSenMode_SKELETON_HPP
#define Basc_ActSenMode_SKELETON_HPP
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "changan/Basc_ActSenMode.h"
#include "changan/base_skeleton.hpp"
#include "changan/base_wait.hpp"
#include <iostream>
#include <string.h>
#include <mutex>
namespace com {
namespace changan {
namespace carCabin {
namespace BasicService {
namespace skeleton {
	namespace events {
        class Basc_ActSenMode_Ntf_ActSenMoSwitSt{
            private:
                dds_rpc_handle_t dds_Ntf_ActSenMoSwitSt_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_ActSenMoSwitSt";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_ActSenMoSwitSt_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_ActSenMoSwitSt_event_handle);
				}
                void send(const uint8_t &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_ActSenMoSwitSt_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_ActSenMoSwitSt = data;
                    dds_write(dds_Ntf_ActSenMoSwitSt_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_ActSenFunEnSt{
            private:
                dds_rpc_handle_t dds_Ntf_ActSenFunEnSt_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_ActSenFunEnSt";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_ActSenFunEnSt_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_ActSenFunEnSt_event_handle);
				}
                void send(const uint8_t &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_ActSenFunEnSt_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_ActSenFunEnSt = data;
                    dds_write(dds_Ntf_ActSenFunEnSt_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf__ActSenMoInfoSet{
            private:
                dds_rpc_handle_t dds_Ntf__ActSenMoInfoSet_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf__ActSenMoInfoSet";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf__ActSenMoInfoSet_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf__ActSenMoInfoSet_event_handle);
				}
				void send(const SenMoInfoSet &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf__ActSenMoInfoSet_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf__ActSenMoInfoSet = data;
                    dds_write(dds_Ntf__ActSenMoInfoSet_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_UserNotiConfir{
            private:
                dds_rpc_handle_t dds_Ntf_UserNotiConfir_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_UserNotiConfir";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_UserNotiConfir_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_UserNotiConfir_event_handle);
				}
				void send(const UserNotiConfirEvt &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_UserNotiConfir_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_UserNotiConfir = data;
                    dds_write(dds_Ntf_UserNotiConfir_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_ActSenTrig{
            private:
                dds_rpc_handle_t dds_Ntf_ActSenTrig_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_ActSenTrig";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_ActSenTrig_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_ActSenTrig_event_handle);
				}
				void send(const TrigEvt &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_ActSenTrig_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_ActSenTrig = data;
                    dds_write(dds_Ntf_ActSenTrig_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_ActSenFunEn{
            private:
                dds_rpc_handle_t dds_Ntf_ActSenFunEn_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_ActSenFunEn";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_ActSenFunEn_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_ActSenFunEn_event_handle);
				}
				void send(const FunEnEvt &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_ActSenFunEn_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_ActSenFunEn = data;
                    dds_write(dds_Ntf_ActSenFunEn_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_SdcardSenErrTrig{
            private:
                dds_rpc_handle_t dds_Ntf_SdcardSenErrTrig_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_SdcardSenErrTrig";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_SdcardSenErrTrig_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_SdcardSenErrTrig_event_handle);
				}
                void send(const uint8_t &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_SdcardSenErrTrig_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_SdcardSenErrTrig = data;
                    dds_write(dds_Ntf_SdcardSenErrTrig_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_ActCampSwitSet{
            private:
                dds_rpc_handle_t dds_Ntf_ActCampSwitSet_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_ActCampSwitSet";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_ActCampSwitSet_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_ActCampSwitSet_event_handle);
				}
                void send(const uint8_t &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_ActCampSwitSet_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_ActCampSwitSet = data;
                    dds_write(dds_Ntf_ActCampSwitSet_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_CampRangeSet{
            private:
                dds_rpc_handle_t dds_Ntf_CampRangeSet_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_CampRangeSet";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_CampRangeSet_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_CampRangeSet_event_handle);
				}
                void send(const uint8_t &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_CampRangeSet_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_CampRangeSet = data;
                    dds_write(dds_Ntf_CampRangeSet_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_SenWarningSetSwitchEarly{
            private:
                dds_rpc_handle_t dds_Ntf_SenWarningSetSwitchEarly_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_SenWarningSetSwitchEarly";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_SenWarningSetSwitchEarly_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_SenWarningSetSwitchEarly_event_handle);
				}
				void send(const SenWarningSet &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_SenWarningSetSwitchEarly_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_SenWarningSetSwitchEarly = data;
                    dds_write(dds_Ntf_SenWarningSetSwitchEarly_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_SenWarningSetSwitchCollision{
            private:
                dds_rpc_handle_t dds_Ntf_SenWarningSetSwitchCollision_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_SenWarningSetSwitchCollision";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_SenWarningSetSwitchCollision_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_SenWarningSetSwitchCollision_event_handle);
				}
				void send(const SenWarningSet &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_SenWarningSetSwitchCollision_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_SenWarningSetSwitchCollision = data;
                    dds_write(dds_Ntf_SenWarningSetSwitchCollision_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_SenWarningSetSwitchTheft{
            private:
                dds_rpc_handle_t dds_Ntf_SenWarningSetSwitchTheft_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_SenWarningSetSwitchTheft";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_SenWarningSetSwitchTheft_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_SenWarningSetSwitchTheft_event_handle);
				}
				void send(const SenWarningSet &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_SenWarningSetSwitchTheft_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_SenWarningSetSwitchTheft = data;
                    dds_write(dds_Ntf_SenWarningSetSwitchTheft_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_CampWarningSetSwitchS{
            private:
                dds_rpc_handle_t dds_Ntf_CampWarningSetSwitchS_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_CampWarningSetSwitchS";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_CampWarningSetSwitchS_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_CampWarningSetSwitchS_event_handle);
				}
				void send(const CampWarningSet &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_CampWarningSetSwitchS_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_CampWarningSetSwitchS = data;
                    dds_write(dds_Ntf_CampWarningSetSwitchS_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_CampWarningSetSwitchM{
            private:
                dds_rpc_handle_t dds_Ntf_CampWarningSetSwitchM_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_CampWarningSetSwitchM";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_CampWarningSetSwitchM_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_CampWarningSetSwitchM_event_handle);
				}
				void send(const CampWarningSet &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_CampWarningSetSwitchM_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_CampWarningSetSwitchM = data;
                    dds_write(dds_Ntf_CampWarningSetSwitchM_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_CampWarningSetSwitchL{
            private:
                dds_rpc_handle_t dds_Ntf_CampWarningSetSwitchL_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_CampWarningSetSwitchL";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_CampWarningSetSwitchL_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_CampWarningSetSwitchL_event_handle);
				}
				void send(const CampWarningSet &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_CampWarningSetSwitchL_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_CampWarningSetSwitchL = data;
                    dds_write(dds_Ntf_CampWarningSetSwitchL_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_SenRecordCameraSet{
            private:
                dds_rpc_handle_t dds_Ntf_SenRecordCameraSet_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_SenRecordCameraSet";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_SenRecordCameraSet_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_SenRecordCameraSet_event_handle);
				}
                void send(const uint32_t &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_SenRecordCameraSet_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_SenRecordCameraSet = data;
                    dds_write(dds_Ntf_SenRecordCameraSet_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_CampRecordCameraSet{
            private:
                dds_rpc_handle_t dds_Ntf_CampRecordCameraSet_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_CampRecordCameraSet";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_CampRecordCameraSet_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_CampRecordCameraSet_event_handle);
				}
                void send(const uint32_t &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_CampRecordCameraSet_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_CampRecordCameraSet = data;
                    dds_write(dds_Ntf_CampRecordCameraSet_event_handle.writer, &event_data);
				}
        };
        class Basc_ActSenMode_Ntf_ActCampTrig{
            private:
                dds_rpc_handle_t dds_Ntf_ActCampTrig_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ActSenMode_skeleton_Ntf_ActCampTrig";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carCabin_Basc_ActSenMode_Ntf_desc, &dds_Ntf_ActCampTrig_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_ActCampTrig_event_handle);
				}
                void send(const uint8_t &data) {
					carCabin_Basc_ActSenMode_Ntf event_data;
					event_data.data._d = carCabin_Basc_ActSenMode_Ntf_ActCampTrig_Hash;
					event_data.data._u.Basc_ActSenMode_Ntf_ActCampTrig = data;
                    dds_write(dds_Ntf_ActCampTrig_event_handle.writer, &event_data);
				}
        };
	}
	extern void on_carCabin_Basc_ActSenMode_request_data_available(int32_t reader, void* arg);

	class Basc_ActSenMode_service_interface {
	public:
	    virtual ~Basc_ActSenMode_service_interface() = default;

		virtual SwitSetResult RR_ActSenMoSwitSet(const SentrySwitchParam &sentrySwitchParam) = 0;
		virtual InfoSetResult RR_ActSenMoInfoSet(const SenMoInfoSet &SenMoInfoSet) = 0;
		virtual uint8_t Get__ActSenMoSwitSt() = 0;
		virtual uint8_t Get_ActSenFunEnSt() = 0;
		virtual SenMoInfoSet Get__ActSenMoInfoSet() = 0;
		virtual SwitSetResult RR_ActSenWarningSet(const SenWarningSet &SenWarningSet) = 0;
		virtual SwitSetResult RR_ActCampSwitSet(const SentrySwitchParam &campSwitchParam) = 0;
		virtual SwitSetResult RR_ActCampWarningSet(const CampWarningSet &CampWarningSet) = 0;
		virtual SwitSetResult RR_ActCampRangeSet(const uint8_t &CampRangeSet) = 0;
		virtual uint8_t Get_ActCampSwitSet() = 0;
		virtual uint8_t RR_SenRecordCameraSet(const uint32_t &camera) = 0;
		virtual uint8_t RR_CampRecordCameraSet(const uint32_t &camera) = 0;
	};
    class Basc_ActSenMode_Skeleton :public Basc_ActSenMode_service_interface, public IBaseWait,public IBaseSkeleton,public ConsumerMatchedStatusHandler{
		public:
			Basc_ActSenMode_Skeleton(Basc_ActSenMode_service_interface* service,std::string config="");
			bool init();
			bool destroy();
			void wait_client_online();
            const std::string get_service_name() {
				return this->service_name;
			}
			SwitSetResult RR_ActSenMoSwitSet(const SentrySwitchParam &sentrySwitchParam) {
				return this->_service->RR_ActSenMoSwitSet(sentrySwitchParam);
			}
			InfoSetResult RR_ActSenMoInfoSet(const SenMoInfoSet &SenMoInfoSet) {
				return this->_service->RR_ActSenMoInfoSet(SenMoInfoSet);
			}
			uint8_t Get__ActSenMoSwitSt() {
				return this->_service->Get__ActSenMoSwitSt();
			}
			uint8_t Get_ActSenFunEnSt() {
				return this->_service->Get_ActSenFunEnSt();
			}
			SenMoInfoSet Get__ActSenMoInfoSet() {
				return this->_service->Get__ActSenMoInfoSet();
			}
			SwitSetResult RR_ActSenWarningSet(const SenWarningSet &SenWarningSet) {
				return this->_service->RR_ActSenWarningSet(SenWarningSet);
			}
			SwitSetResult RR_ActCampSwitSet(const SentrySwitchParam &campSwitchParam) {
				return this->_service->RR_ActCampSwitSet(campSwitchParam);
			}
			SwitSetResult RR_ActCampWarningSet(const CampWarningSet &CampWarningSet) {
				return this->_service->RR_ActCampWarningSet(CampWarningSet);
			}
			SwitSetResult RR_ActCampRangeSet(const uint8_t &CampRangeSet) {
				return this->_service->RR_ActCampRangeSet(CampRangeSet);
			}
			uint8_t Get_ActCampSwitSet() {
				return this->_service->Get_ActCampSwitSet();
			}
			uint8_t RR_SenRecordCameraSet(const uint32_t &camera) {
				return this->_service->RR_SenRecordCameraSet(camera);
			}
			uint8_t RR_CampRecordCameraSet(const uint32_t &camera) {
				return this->_service->RR_CampRecordCameraSet(camera);
			}
            dds_return_t send_reply(carCabin_Basc_ActSenMode_Reply* reply);
            events::Basc_ActSenMode_Ntf_ActSenMoSwitSt Ntf_ActSenMoSwitSt;
            events::Basc_ActSenMode_Ntf_ActSenFunEnSt Ntf_ActSenFunEnSt;
            events::Basc_ActSenMode_Ntf__ActSenMoInfoSet Ntf__ActSenMoInfoSet;
            events::Basc_ActSenMode_Ntf_UserNotiConfir Ntf_UserNotiConfir;
            events::Basc_ActSenMode_Ntf_ActSenTrig Ntf_ActSenTrig;
            events::Basc_ActSenMode_Ntf_ActSenFunEn Ntf_ActSenFunEn;
            events::Basc_ActSenMode_Ntf_SdcardSenErrTrig Ntf_SdcardSenErrTrig;
            events::Basc_ActSenMode_Ntf_ActCampSwitSet Ntf_ActCampSwitSet;
            events::Basc_ActSenMode_Ntf_CampRangeSet Ntf_CampRangeSet;
            events::Basc_ActSenMode_Ntf_SenWarningSetSwitchEarly Ntf_SenWarningSetSwitchEarly;
            events::Basc_ActSenMode_Ntf_SenWarningSetSwitchCollision Ntf_SenWarningSetSwitchCollision;
            events::Basc_ActSenMode_Ntf_SenWarningSetSwitchTheft Ntf_SenWarningSetSwitchTheft;
            events::Basc_ActSenMode_Ntf_CampWarningSetSwitchS Ntf_CampWarningSetSwitchS;
            events::Basc_ActSenMode_Ntf_CampWarningSetSwitchM Ntf_CampWarningSetSwitchM;
            events::Basc_ActSenMode_Ntf_CampWarningSetSwitchL Ntf_CampWarningSetSwitchL;
            events::Basc_ActSenMode_Ntf_SenRecordCameraSet Ntf_SenRecordCameraSet;
            events::Basc_ActSenMode_Ntf_CampRecordCameraSet Ntf_CampRecordCameraSet;
            events::Basc_ActSenMode_Ntf_ActCampTrig Ntf_ActCampTrig;

		private:
		    std::string _config;
			bool init_flag=false;
			std::mutex init_mutex;

			const std::string service_name="Basc_ActSenMode_skeleton";
			Basc_ActSenMode_service_interface * _service;
			dds_rpc_handle_t dds_rpc_request_handle= { -1, -1, -1 };
			dds_rpc_handle_t dds_rpc_reply_handle= { -1, -1, -1 };

	};

}
}
}
}
}
#endif

