// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_basic_trafficsign.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hmi_5fbasic_5ftrafficsign_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hmi_5fbasic_5ftrafficsign_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hmi_5fbasic_5ftrafficsign_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hmi_5fbasic_5ftrafficsign_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5fbasic_5ftrafficsign_2eproto;
namespace HmiInterface {
class BasicTrafficSign;
struct BasicTrafficSignDefaultTypeInternal;
extern BasicTrafficSignDefaultTypeInternal _BasicTrafficSign_default_instance_;
class LaneArrowArray;
struct LaneArrowArrayDefaultTypeInternal;
extern LaneArrowArrayDefaultTypeInternal _LaneArrowArray_default_instance_;
class TrafficSign;
struct TrafficSignDefaultTypeInternal;
extern TrafficSignDefaultTypeInternal _TrafficSign_default_instance_;
}  // namespace HmiInterface
PROTOBUF_NAMESPACE_OPEN
template<> ::HmiInterface::BasicTrafficSign* Arena::CreateMaybeMessage<::HmiInterface::BasicTrafficSign>(Arena*);
template<> ::HmiInterface::LaneArrowArray* Arena::CreateMaybeMessage<::HmiInterface::LaneArrowArray>(Arena*);
template<> ::HmiInterface::TrafficSign* Arena::CreateMaybeMessage<::HmiInterface::TrafficSign>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HmiInterface {

// ===================================================================

class LaneArrowArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.LaneArrowArray) */ {
 public:
  inline LaneArrowArray() : LaneArrowArray(nullptr) {}
  ~LaneArrowArray() override;
  explicit constexpr LaneArrowArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneArrowArray(const LaneArrowArray& from);
  LaneArrowArray(LaneArrowArray&& from) noexcept
    : LaneArrowArray() {
    *this = ::std::move(from);
  }

  inline LaneArrowArray& operator=(const LaneArrowArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneArrowArray& operator=(LaneArrowArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneArrowArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneArrowArray* internal_default_instance() {
    return reinterpret_cast<const LaneArrowArray*>(
               &_LaneArrowArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaneArrowArray& a, LaneArrowArray& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneArrowArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneArrowArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneArrowArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneArrowArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneArrowArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneArrowArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneArrowArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.LaneArrowArray";
  }
  protected:
  explicit LaneArrowArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLane1GarrowtypeFieldNumber = 1,
  };
  // uint32 lane1garrowtype = 1;
  void clear_lane1garrowtype();
  uint32_t lane1garrowtype() const;
  void set_lane1garrowtype(uint32_t value);
  private:
  uint32_t _internal_lane1garrowtype() const;
  void _internal_set_lane1garrowtype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.LaneArrowArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t lane1garrowtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5ftrafficsign_2eproto;
};
// -------------------------------------------------------------------

class TrafficSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.TrafficSign) */ {
 public:
  inline TrafficSign() : TrafficSign(nullptr) {}
  ~TrafficSign() override;
  explicit constexpr TrafficSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrafficSign(const TrafficSign& from);
  TrafficSign(TrafficSign&& from) noexcept
    : TrafficSign() {
    *this = ::std::move(from);
  }

  inline TrafficSign& operator=(const TrafficSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficSign& operator=(TrafficSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficSign* internal_default_instance() {
    return reinterpret_cast<const TrafficSign*>(
               &_TrafficSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrafficSign& a, TrafficSign& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrafficSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrafficSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrafficSign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.TrafficSign";
  }
  protected:
  explicit TrafficSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanearrowdataFieldNumber = 4,
    kWarningsignFieldNumber = 1,
    kProhibitionsignFieldNumber = 2,
    kMandatorysignFieldNumber = 3,
  };
  // repeated .HmiInterface.LaneArrowArray lanearrowdata = 4;
  int lanearrowdata_size() const;
  private:
  int _internal_lanearrowdata_size() const;
  public:
  void clear_lanearrowdata();
  ::HmiInterface::LaneArrowArray* mutable_lanearrowdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiInterface::LaneArrowArray >*
      mutable_lanearrowdata();
  private:
  const ::HmiInterface::LaneArrowArray& _internal_lanearrowdata(int index) const;
  ::HmiInterface::LaneArrowArray* _internal_add_lanearrowdata();
  public:
  const ::HmiInterface::LaneArrowArray& lanearrowdata(int index) const;
  ::HmiInterface::LaneArrowArray* add_lanearrowdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiInterface::LaneArrowArray >&
      lanearrowdata() const;

  // uint32 warningsign = 1;
  void clear_warningsign();
  uint32_t warningsign() const;
  void set_warningsign(uint32_t value);
  private:
  uint32_t _internal_warningsign() const;
  void _internal_set_warningsign(uint32_t value);
  public:

  // uint32 prohibitionsign = 2;
  void clear_prohibitionsign();
  uint32_t prohibitionsign() const;
  void set_prohibitionsign(uint32_t value);
  private:
  uint32_t _internal_prohibitionsign() const;
  void _internal_set_prohibitionsign(uint32_t value);
  public:

  // uint32 mandatorysign = 3;
  void clear_mandatorysign();
  uint32_t mandatorysign() const;
  void set_mandatorysign(uint32_t value);
  private:
  uint32_t _internal_mandatorysign() const;
  void _internal_set_mandatorysign(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.TrafficSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiInterface::LaneArrowArray > lanearrowdata_;
  uint32_t warningsign_;
  uint32_t prohibitionsign_;
  uint32_t mandatorysign_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5ftrafficsign_2eproto;
};
// -------------------------------------------------------------------

class BasicTrafficSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.BasicTrafficSign) */ {
 public:
  inline BasicTrafficSign() : BasicTrafficSign(nullptr) {}
  ~BasicTrafficSign() override;
  explicit constexpr BasicTrafficSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasicTrafficSign(const BasicTrafficSign& from);
  BasicTrafficSign(BasicTrafficSign&& from) noexcept
    : BasicTrafficSign() {
    *this = ::std::move(from);
  }

  inline BasicTrafficSign& operator=(const BasicTrafficSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicTrafficSign& operator=(BasicTrafficSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasicTrafficSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicTrafficSign* internal_default_instance() {
    return reinterpret_cast<const BasicTrafficSign*>(
               &_BasicTrafficSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BasicTrafficSign& a, BasicTrafficSign& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicTrafficSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicTrafficSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BasicTrafficSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BasicTrafficSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasicTrafficSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BasicTrafficSign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicTrafficSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.BasicTrafficSign";
  }
  protected:
  explicit BasicTrafficSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficsignFieldNumber = 1,
  };
  // .HmiInterface.TrafficSign trafficsign = 1;
  bool has_trafficsign() const;
  private:
  bool _internal_has_trafficsign() const;
  public:
  void clear_trafficsign();
  const ::HmiInterface::TrafficSign& trafficsign() const;
  PROTOBUF_NODISCARD ::HmiInterface::TrafficSign* release_trafficsign();
  ::HmiInterface::TrafficSign* mutable_trafficsign();
  void set_allocated_trafficsign(::HmiInterface::TrafficSign* trafficsign);
  private:
  const ::HmiInterface::TrafficSign& _internal_trafficsign() const;
  ::HmiInterface::TrafficSign* _internal_mutable_trafficsign();
  public:
  void unsafe_arena_set_allocated_trafficsign(
      ::HmiInterface::TrafficSign* trafficsign);
  ::HmiInterface::TrafficSign* unsafe_arena_release_trafficsign();

  // @@protoc_insertion_point(class_scope:HmiInterface.BasicTrafficSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::HmiInterface::TrafficSign* trafficsign_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5ftrafficsign_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneArrowArray

// uint32 lane1garrowtype = 1;
inline void LaneArrowArray::clear_lane1garrowtype() {
  lane1garrowtype_ = 0u;
}
inline uint32_t LaneArrowArray::_internal_lane1garrowtype() const {
  return lane1garrowtype_;
}
inline uint32_t LaneArrowArray::lane1garrowtype() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LaneArrowArray.lane1garrowtype)
  return _internal_lane1garrowtype();
}
inline void LaneArrowArray::_internal_set_lane1garrowtype(uint32_t value) {
  
  lane1garrowtype_ = value;
}
inline void LaneArrowArray::set_lane1garrowtype(uint32_t value) {
  _internal_set_lane1garrowtype(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LaneArrowArray.lane1garrowtype)
}

// -------------------------------------------------------------------

// TrafficSign

// uint32 warningsign = 1;
inline void TrafficSign::clear_warningsign() {
  warningsign_ = 0u;
}
inline uint32_t TrafficSign::_internal_warningsign() const {
  return warningsign_;
}
inline uint32_t TrafficSign::warningsign() const {
  // @@protoc_insertion_point(field_get:HmiInterface.TrafficSign.warningsign)
  return _internal_warningsign();
}
inline void TrafficSign::_internal_set_warningsign(uint32_t value) {
  
  warningsign_ = value;
}
inline void TrafficSign::set_warningsign(uint32_t value) {
  _internal_set_warningsign(value);
  // @@protoc_insertion_point(field_set:HmiInterface.TrafficSign.warningsign)
}

// uint32 prohibitionsign = 2;
inline void TrafficSign::clear_prohibitionsign() {
  prohibitionsign_ = 0u;
}
inline uint32_t TrafficSign::_internal_prohibitionsign() const {
  return prohibitionsign_;
}
inline uint32_t TrafficSign::prohibitionsign() const {
  // @@protoc_insertion_point(field_get:HmiInterface.TrafficSign.prohibitionsign)
  return _internal_prohibitionsign();
}
inline void TrafficSign::_internal_set_prohibitionsign(uint32_t value) {
  
  prohibitionsign_ = value;
}
inline void TrafficSign::set_prohibitionsign(uint32_t value) {
  _internal_set_prohibitionsign(value);
  // @@protoc_insertion_point(field_set:HmiInterface.TrafficSign.prohibitionsign)
}

// uint32 mandatorysign = 3;
inline void TrafficSign::clear_mandatorysign() {
  mandatorysign_ = 0u;
}
inline uint32_t TrafficSign::_internal_mandatorysign() const {
  return mandatorysign_;
}
inline uint32_t TrafficSign::mandatorysign() const {
  // @@protoc_insertion_point(field_get:HmiInterface.TrafficSign.mandatorysign)
  return _internal_mandatorysign();
}
inline void TrafficSign::_internal_set_mandatorysign(uint32_t value) {
  
  mandatorysign_ = value;
}
inline void TrafficSign::set_mandatorysign(uint32_t value) {
  _internal_set_mandatorysign(value);
  // @@protoc_insertion_point(field_set:HmiInterface.TrafficSign.mandatorysign)
}

// repeated .HmiInterface.LaneArrowArray lanearrowdata = 4;
inline int TrafficSign::_internal_lanearrowdata_size() const {
  return lanearrowdata_.size();
}
inline int TrafficSign::lanearrowdata_size() const {
  return _internal_lanearrowdata_size();
}
inline void TrafficSign::clear_lanearrowdata() {
  lanearrowdata_.Clear();
}
inline ::HmiInterface::LaneArrowArray* TrafficSign::mutable_lanearrowdata(int index) {
  // @@protoc_insertion_point(field_mutable:HmiInterface.TrafficSign.lanearrowdata)
  return lanearrowdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiInterface::LaneArrowArray >*
TrafficSign::mutable_lanearrowdata() {
  // @@protoc_insertion_point(field_mutable_list:HmiInterface.TrafficSign.lanearrowdata)
  return &lanearrowdata_;
}
inline const ::HmiInterface::LaneArrowArray& TrafficSign::_internal_lanearrowdata(int index) const {
  return lanearrowdata_.Get(index);
}
inline const ::HmiInterface::LaneArrowArray& TrafficSign::lanearrowdata(int index) const {
  // @@protoc_insertion_point(field_get:HmiInterface.TrafficSign.lanearrowdata)
  return _internal_lanearrowdata(index);
}
inline ::HmiInterface::LaneArrowArray* TrafficSign::_internal_add_lanearrowdata() {
  return lanearrowdata_.Add();
}
inline ::HmiInterface::LaneArrowArray* TrafficSign::add_lanearrowdata() {
  ::HmiInterface::LaneArrowArray* _add = _internal_add_lanearrowdata();
  // @@protoc_insertion_point(field_add:HmiInterface.TrafficSign.lanearrowdata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiInterface::LaneArrowArray >&
TrafficSign::lanearrowdata() const {
  // @@protoc_insertion_point(field_list:HmiInterface.TrafficSign.lanearrowdata)
  return lanearrowdata_;
}

// -------------------------------------------------------------------

// BasicTrafficSign

// .HmiInterface.TrafficSign trafficsign = 1;
inline bool BasicTrafficSign::_internal_has_trafficsign() const {
  return this != internal_default_instance() && trafficsign_ != nullptr;
}
inline bool BasicTrafficSign::has_trafficsign() const {
  return _internal_has_trafficsign();
}
inline void BasicTrafficSign::clear_trafficsign() {
  if (GetArenaForAllocation() == nullptr && trafficsign_ != nullptr) {
    delete trafficsign_;
  }
  trafficsign_ = nullptr;
}
inline const ::HmiInterface::TrafficSign& BasicTrafficSign::_internal_trafficsign() const {
  const ::HmiInterface::TrafficSign* p = trafficsign_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::TrafficSign&>(
      ::HmiInterface::_TrafficSign_default_instance_);
}
inline const ::HmiInterface::TrafficSign& BasicTrafficSign::trafficsign() const {
  // @@protoc_insertion_point(field_get:HmiInterface.BasicTrafficSign.trafficsign)
  return _internal_trafficsign();
}
inline void BasicTrafficSign::unsafe_arena_set_allocated_trafficsign(
    ::HmiInterface::TrafficSign* trafficsign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trafficsign_);
  }
  trafficsign_ = trafficsign;
  if (trafficsign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.BasicTrafficSign.trafficsign)
}
inline ::HmiInterface::TrafficSign* BasicTrafficSign::release_trafficsign() {
  
  ::HmiInterface::TrafficSign* temp = trafficsign_;
  trafficsign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::TrafficSign* BasicTrafficSign::unsafe_arena_release_trafficsign() {
  // @@protoc_insertion_point(field_release:HmiInterface.BasicTrafficSign.trafficsign)
  
  ::HmiInterface::TrafficSign* temp = trafficsign_;
  trafficsign_ = nullptr;
  return temp;
}
inline ::HmiInterface::TrafficSign* BasicTrafficSign::_internal_mutable_trafficsign() {
  
  if (trafficsign_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::TrafficSign>(GetArenaForAllocation());
    trafficsign_ = p;
  }
  return trafficsign_;
}
inline ::HmiInterface::TrafficSign* BasicTrafficSign::mutable_trafficsign() {
  ::HmiInterface::TrafficSign* _msg = _internal_mutable_trafficsign();
  // @@protoc_insertion_point(field_mutable:HmiInterface.BasicTrafficSign.trafficsign)
  return _msg;
}
inline void BasicTrafficSign::set_allocated_trafficsign(::HmiInterface::TrafficSign* trafficsign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete trafficsign_;
  }
  if (trafficsign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::TrafficSign>::GetOwningArena(trafficsign);
    if (message_arena != submessage_arena) {
      trafficsign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trafficsign, submessage_arena);
    }
    
  } else {
    
  }
  trafficsign_ = trafficsign;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.BasicTrafficSign.trafficsign)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HmiInterface

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hmi_5fbasic_5ftrafficsign_2eproto
