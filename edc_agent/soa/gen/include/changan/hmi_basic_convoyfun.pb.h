// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_basic_convoyfun.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hmi_5fbasic_5fconvoyfun_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hmi_5fbasic_5fconvoyfun_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hmi_5fbasic_5fconvoyfun_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hmi_5fbasic_5fconvoyfun_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto;
namespace HmiInterface {
class BasicConvoyFunInfo;
struct BasicConvoyFunInfoDefaultTypeInternal;
extern BasicConvoyFunInfoDefaultTypeInternal _BasicConvoyFunInfo_default_instance_;
class ConvoyFunInfo;
struct ConvoyFunInfoDefaultTypeInternal;
extern ConvoyFunInfoDefaultTypeInternal _ConvoyFunInfo_default_instance_;
class FCWAEBEDS;
struct FCWAEBEDSDefaultTypeInternal;
extern FCWAEBEDSDefaultTypeInternal _FCWAEBEDS_default_instance_;
class LCDAFUN;
struct LCDAFUNDefaultTypeInternal;
extern LCDAFUNDefaultTypeInternal _LCDAFUN_default_instance_;
class LDWLKAELK;
struct LDWLKAELKDefaultTypeInternal;
extern LDWLKAELKDefaultTypeInternal _LDWLKAELK_default_instance_;
}  // namespace HmiInterface
PROTOBUF_NAMESPACE_OPEN
template<> ::HmiInterface::BasicConvoyFunInfo* Arena::CreateMaybeMessage<::HmiInterface::BasicConvoyFunInfo>(Arena*);
template<> ::HmiInterface::ConvoyFunInfo* Arena::CreateMaybeMessage<::HmiInterface::ConvoyFunInfo>(Arena*);
template<> ::HmiInterface::FCWAEBEDS* Arena::CreateMaybeMessage<::HmiInterface::FCWAEBEDS>(Arena*);
template<> ::HmiInterface::LCDAFUN* Arena::CreateMaybeMessage<::HmiInterface::LCDAFUN>(Arena*);
template<> ::HmiInterface::LDWLKAELK* Arena::CreateMaybeMessage<::HmiInterface::LDWLKAELK>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HmiInterface {

// ===================================================================

class LDWLKAELK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.LDWLKAELK) */ {
 public:
  inline LDWLKAELK() : LDWLKAELK(nullptr) {}
  ~LDWLKAELK() override;
  explicit constexpr LDWLKAELK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LDWLKAELK(const LDWLKAELK& from);
  LDWLKAELK(LDWLKAELK&& from) noexcept
    : LDWLKAELK() {
    *this = ::std::move(from);
  }

  inline LDWLKAELK& operator=(const LDWLKAELK& from) {
    CopyFrom(from);
    return *this;
  }
  inline LDWLKAELK& operator=(LDWLKAELK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LDWLKAELK& default_instance() {
    return *internal_default_instance();
  }
  static inline const LDWLKAELK* internal_default_instance() {
    return reinterpret_cast<const LDWLKAELK*>(
               &_LDWLKAELK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LDWLKAELK& a, LDWLKAELK& b) {
    a.Swap(&b);
  }
  inline void Swap(LDWLKAELK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LDWLKAELK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LDWLKAELK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LDWLKAELK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LDWLKAELK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LDWLKAELK& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LDWLKAELK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.LDWLKAELK";
  }
  protected:
  explicit LDWLKAELK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdLdwstatusFieldNumber = 1,
    kAdLkastatusFieldNumber = 2,
    kAdVoiceinfoFieldNumber = 3,
    kAdElkmodeFieldNumber = 4,
    kAdElkleftinterventionmodeFieldNumber = 5,
    kAdElkrightinterventionmodeFieldNumber = 6,
    kAdLdwinhaitwarningFieldNumber = 7,
    kAdLkainhaitwarningFieldNumber = 8,
  };
  // uint32 ad_ldwstatus = 1;
  void clear_ad_ldwstatus();
  uint32_t ad_ldwstatus() const;
  void set_ad_ldwstatus(uint32_t value);
  private:
  uint32_t _internal_ad_ldwstatus() const;
  void _internal_set_ad_ldwstatus(uint32_t value);
  public:

  // uint32 ad_lkastatus = 2;
  void clear_ad_lkastatus();
  uint32_t ad_lkastatus() const;
  void set_ad_lkastatus(uint32_t value);
  private:
  uint32_t _internal_ad_lkastatus() const;
  void _internal_set_ad_lkastatus(uint32_t value);
  public:

  // uint32 ad_voiceinfo = 3;
  void clear_ad_voiceinfo();
  uint32_t ad_voiceinfo() const;
  void set_ad_voiceinfo(uint32_t value);
  private:
  uint32_t _internal_ad_voiceinfo() const;
  void _internal_set_ad_voiceinfo(uint32_t value);
  public:

  // uint32 ad_elkmode = 4;
  void clear_ad_elkmode();
  uint32_t ad_elkmode() const;
  void set_ad_elkmode(uint32_t value);
  private:
  uint32_t _internal_ad_elkmode() const;
  void _internal_set_ad_elkmode(uint32_t value);
  public:

  // uint32 ad_elkleftinterventionmode = 5;
  void clear_ad_elkleftinterventionmode();
  uint32_t ad_elkleftinterventionmode() const;
  void set_ad_elkleftinterventionmode(uint32_t value);
  private:
  uint32_t _internal_ad_elkleftinterventionmode() const;
  void _internal_set_ad_elkleftinterventionmode(uint32_t value);
  public:

  // uint32 ad_elkrightinterventionmode = 6;
  void clear_ad_elkrightinterventionmode();
  uint32_t ad_elkrightinterventionmode() const;
  void set_ad_elkrightinterventionmode(uint32_t value);
  private:
  uint32_t _internal_ad_elkrightinterventionmode() const;
  void _internal_set_ad_elkrightinterventionmode(uint32_t value);
  public:

  // uint32 ad_ldwinhaitwarning = 7;
  void clear_ad_ldwinhaitwarning();
  uint32_t ad_ldwinhaitwarning() const;
  void set_ad_ldwinhaitwarning(uint32_t value);
  private:
  uint32_t _internal_ad_ldwinhaitwarning() const;
  void _internal_set_ad_ldwinhaitwarning(uint32_t value);
  public:

  // uint32 ad_lkainhaitwarning = 8;
  void clear_ad_lkainhaitwarning();
  uint32_t ad_lkainhaitwarning() const;
  void set_ad_lkainhaitwarning(uint32_t value);
  private:
  uint32_t _internal_ad_lkainhaitwarning() const;
  void _internal_set_ad_lkainhaitwarning(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.LDWLKAELK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t ad_ldwstatus_;
  uint32_t ad_lkastatus_;
  uint32_t ad_voiceinfo_;
  uint32_t ad_elkmode_;
  uint32_t ad_elkleftinterventionmode_;
  uint32_t ad_elkrightinterventionmode_;
  uint32_t ad_ldwinhaitwarning_;
  uint32_t ad_lkainhaitwarning_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fconvoyfun_2eproto;
};
// -------------------------------------------------------------------

class FCWAEBEDS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.FCWAEBEDS) */ {
 public:
  inline FCWAEBEDS() : FCWAEBEDS(nullptr) {}
  ~FCWAEBEDS() override;
  explicit constexpr FCWAEBEDS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FCWAEBEDS(const FCWAEBEDS& from);
  FCWAEBEDS(FCWAEBEDS&& from) noexcept
    : FCWAEBEDS() {
    *this = ::std::move(from);
  }

  inline FCWAEBEDS& operator=(const FCWAEBEDS& from) {
    CopyFrom(from);
    return *this;
  }
  inline FCWAEBEDS& operator=(FCWAEBEDS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FCWAEBEDS& default_instance() {
    return *internal_default_instance();
  }
  static inline const FCWAEBEDS* internal_default_instance() {
    return reinterpret_cast<const FCWAEBEDS*>(
               &_FCWAEBEDS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FCWAEBEDS& a, FCWAEBEDS& b) {
    a.Swap(&b);
  }
  inline void Swap(FCWAEBEDS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FCWAEBEDS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FCWAEBEDS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FCWAEBEDS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FCWAEBEDS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FCWAEBEDS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FCWAEBEDS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.FCWAEBEDS";
  }
  protected:
  explicit FCWAEBEDS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdAebstatusFieldNumber = 1,
    kAdRebstatusFieldNumber = 2,
    kAdAesstatusFieldNumber = 3,
    kAdFcwlatentwarningFieldNumber = 4,
    kAdFcwactiveFieldNumber = 5,
    kAdRewalertFieldNumber = 6,
    kAdFctbactiveFieldNumber = 7,
    kAdRctbactiveFieldNumber = 8,
    kAdRebactiveFieldNumber = 9,
    kAdFctaleftalertFieldNumber = 10,
    kAdFctarightalertFieldNumber = 11,
    kAdAebactiveFieldNumber = 12,
    kAdRunredlightwarningFieldNumber = 13,
    kAdAesactiveFieldNumber = 14,
  };
  // uint32 ad_aebstatus = 1;
  void clear_ad_aebstatus();
  uint32_t ad_aebstatus() const;
  void set_ad_aebstatus(uint32_t value);
  private:
  uint32_t _internal_ad_aebstatus() const;
  void _internal_set_ad_aebstatus(uint32_t value);
  public:

  // uint32 ad_rebstatus = 2;
  void clear_ad_rebstatus();
  uint32_t ad_rebstatus() const;
  void set_ad_rebstatus(uint32_t value);
  private:
  uint32_t _internal_ad_rebstatus() const;
  void _internal_set_ad_rebstatus(uint32_t value);
  public:

  // uint32 ad_aesstatus = 3;
  void clear_ad_aesstatus();
  uint32_t ad_aesstatus() const;
  void set_ad_aesstatus(uint32_t value);
  private:
  uint32_t _internal_ad_aesstatus() const;
  void _internal_set_ad_aesstatus(uint32_t value);
  public:

  // uint32 ad_fcwlatentwarning = 4;
  void clear_ad_fcwlatentwarning();
  uint32_t ad_fcwlatentwarning() const;
  void set_ad_fcwlatentwarning(uint32_t value);
  private:
  uint32_t _internal_ad_fcwlatentwarning() const;
  void _internal_set_ad_fcwlatentwarning(uint32_t value);
  public:

  // uint32 ad_fcwactive = 5;
  void clear_ad_fcwactive();
  uint32_t ad_fcwactive() const;
  void set_ad_fcwactive(uint32_t value);
  private:
  uint32_t _internal_ad_fcwactive() const;
  void _internal_set_ad_fcwactive(uint32_t value);
  public:

  // uint32 ad_rewalert = 6;
  void clear_ad_rewalert();
  uint32_t ad_rewalert() const;
  void set_ad_rewalert(uint32_t value);
  private:
  uint32_t _internal_ad_rewalert() const;
  void _internal_set_ad_rewalert(uint32_t value);
  public:

  // uint32 ad_fctbactive = 7;
  void clear_ad_fctbactive();
  uint32_t ad_fctbactive() const;
  void set_ad_fctbactive(uint32_t value);
  private:
  uint32_t _internal_ad_fctbactive() const;
  void _internal_set_ad_fctbactive(uint32_t value);
  public:

  // uint32 ad_rctbactive = 8;
  void clear_ad_rctbactive();
  uint32_t ad_rctbactive() const;
  void set_ad_rctbactive(uint32_t value);
  private:
  uint32_t _internal_ad_rctbactive() const;
  void _internal_set_ad_rctbactive(uint32_t value);
  public:

  // uint32 ad_rebactive = 9;
  void clear_ad_rebactive();
  uint32_t ad_rebactive() const;
  void set_ad_rebactive(uint32_t value);
  private:
  uint32_t _internal_ad_rebactive() const;
  void _internal_set_ad_rebactive(uint32_t value);
  public:

  // uint32 ad_fctaleftalert = 10;
  void clear_ad_fctaleftalert();
  uint32_t ad_fctaleftalert() const;
  void set_ad_fctaleftalert(uint32_t value);
  private:
  uint32_t _internal_ad_fctaleftalert() const;
  void _internal_set_ad_fctaleftalert(uint32_t value);
  public:

  // uint32 ad_fctarightalert = 11;
  void clear_ad_fctarightalert();
  uint32_t ad_fctarightalert() const;
  void set_ad_fctarightalert(uint32_t value);
  private:
  uint32_t _internal_ad_fctarightalert() const;
  void _internal_set_ad_fctarightalert(uint32_t value);
  public:

  // uint32 ad_aebactive = 12;
  void clear_ad_aebactive();
  uint32_t ad_aebactive() const;
  void set_ad_aebactive(uint32_t value);
  private:
  uint32_t _internal_ad_aebactive() const;
  void _internal_set_ad_aebactive(uint32_t value);
  public:

  // uint32 ad_runredlightwarning = 13;
  void clear_ad_runredlightwarning();
  uint32_t ad_runredlightwarning() const;
  void set_ad_runredlightwarning(uint32_t value);
  private:
  uint32_t _internal_ad_runredlightwarning() const;
  void _internal_set_ad_runredlightwarning(uint32_t value);
  public:

  // uint32 ad_aesactive = 14;
  void clear_ad_aesactive();
  uint32_t ad_aesactive() const;
  void set_ad_aesactive(uint32_t value);
  private:
  uint32_t _internal_ad_aesactive() const;
  void _internal_set_ad_aesactive(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.FCWAEBEDS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t ad_aebstatus_;
  uint32_t ad_rebstatus_;
  uint32_t ad_aesstatus_;
  uint32_t ad_fcwlatentwarning_;
  uint32_t ad_fcwactive_;
  uint32_t ad_rewalert_;
  uint32_t ad_fctbactive_;
  uint32_t ad_rctbactive_;
  uint32_t ad_rebactive_;
  uint32_t ad_fctaleftalert_;
  uint32_t ad_fctarightalert_;
  uint32_t ad_aebactive_;
  uint32_t ad_runredlightwarning_;
  uint32_t ad_aesactive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fconvoyfun_2eproto;
};
// -------------------------------------------------------------------

class LCDAFUN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.LCDAFUN) */ {
 public:
  inline LCDAFUN() : LCDAFUN(nullptr) {}
  ~LCDAFUN() override;
  explicit constexpr LCDAFUN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LCDAFUN(const LCDAFUN& from);
  LCDAFUN(LCDAFUN&& from) noexcept
    : LCDAFUN() {
    *this = ::std::move(from);
  }

  inline LCDAFUN& operator=(const LCDAFUN& from) {
    CopyFrom(from);
    return *this;
  }
  inline LCDAFUN& operator=(LCDAFUN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LCDAFUN& default_instance() {
    return *internal_default_instance();
  }
  static inline const LCDAFUN* internal_default_instance() {
    return reinterpret_cast<const LCDAFUN*>(
               &_LCDAFUN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LCDAFUN& a, LCDAFUN& b) {
    a.Swap(&b);
  }
  inline void Swap(LCDAFUN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LCDAFUN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LCDAFUN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LCDAFUN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LCDAFUN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LCDAFUN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LCDAFUN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.LCDAFUN";
  }
  protected:
  explicit LCDAFUN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdBsdlcaLeftalertFieldNumber = 1,
    kAdRctaleftalertFieldNumber = 2,
    kAdSealeftalertFieldNumber = 3,
    kAdDowleftalertFieldNumber = 4,
    kAdRcwalertFieldNumber = 5,
    kAdBsdlcaRightalertFieldNumber = 6,
    kAdRctarightalertFieldNumber = 7,
    kAdSearightalertFieldNumber = 8,
    kAdDowrightalertFieldNumber = 9,
  };
  // uint32 ad_bsdlca_leftalert = 1;
  void clear_ad_bsdlca_leftalert();
  uint32_t ad_bsdlca_leftalert() const;
  void set_ad_bsdlca_leftalert(uint32_t value);
  private:
  uint32_t _internal_ad_bsdlca_leftalert() const;
  void _internal_set_ad_bsdlca_leftalert(uint32_t value);
  public:

  // uint32 ad_rctaleftalert = 2;
  void clear_ad_rctaleftalert();
  uint32_t ad_rctaleftalert() const;
  void set_ad_rctaleftalert(uint32_t value);
  private:
  uint32_t _internal_ad_rctaleftalert() const;
  void _internal_set_ad_rctaleftalert(uint32_t value);
  public:

  // uint32 ad_sealeftalert = 3;
  void clear_ad_sealeftalert();
  uint32_t ad_sealeftalert() const;
  void set_ad_sealeftalert(uint32_t value);
  private:
  uint32_t _internal_ad_sealeftalert() const;
  void _internal_set_ad_sealeftalert(uint32_t value);
  public:

  // uint32 ad_dowleftalert = 4;
  void clear_ad_dowleftalert();
  uint32_t ad_dowleftalert() const;
  void set_ad_dowleftalert(uint32_t value);
  private:
  uint32_t _internal_ad_dowleftalert() const;
  void _internal_set_ad_dowleftalert(uint32_t value);
  public:

  // uint32 ad_rcwalert = 5;
  void clear_ad_rcwalert();
  uint32_t ad_rcwalert() const;
  void set_ad_rcwalert(uint32_t value);
  private:
  uint32_t _internal_ad_rcwalert() const;
  void _internal_set_ad_rcwalert(uint32_t value);
  public:

  // uint32 ad_bsdlca_rightalert = 6;
  void clear_ad_bsdlca_rightalert();
  uint32_t ad_bsdlca_rightalert() const;
  void set_ad_bsdlca_rightalert(uint32_t value);
  private:
  uint32_t _internal_ad_bsdlca_rightalert() const;
  void _internal_set_ad_bsdlca_rightalert(uint32_t value);
  public:

  // uint32 ad_rctarightalert = 7;
  void clear_ad_rctarightalert();
  uint32_t ad_rctarightalert() const;
  void set_ad_rctarightalert(uint32_t value);
  private:
  uint32_t _internal_ad_rctarightalert() const;
  void _internal_set_ad_rctarightalert(uint32_t value);
  public:

  // uint32 ad_searightalert = 8;
  void clear_ad_searightalert();
  uint32_t ad_searightalert() const;
  void set_ad_searightalert(uint32_t value);
  private:
  uint32_t _internal_ad_searightalert() const;
  void _internal_set_ad_searightalert(uint32_t value);
  public:

  // uint32 ad_dowrightalert = 9;
  void clear_ad_dowrightalert();
  uint32_t ad_dowrightalert() const;
  void set_ad_dowrightalert(uint32_t value);
  private:
  uint32_t _internal_ad_dowrightalert() const;
  void _internal_set_ad_dowrightalert(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiInterface.LCDAFUN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t ad_bsdlca_leftalert_;
  uint32_t ad_rctaleftalert_;
  uint32_t ad_sealeftalert_;
  uint32_t ad_dowleftalert_;
  uint32_t ad_rcwalert_;
  uint32_t ad_bsdlca_rightalert_;
  uint32_t ad_rctarightalert_;
  uint32_t ad_searightalert_;
  uint32_t ad_dowrightalert_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fconvoyfun_2eproto;
};
// -------------------------------------------------------------------

class ConvoyFunInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.ConvoyFunInfo) */ {
 public:
  inline ConvoyFunInfo() : ConvoyFunInfo(nullptr) {}
  ~ConvoyFunInfo() override;
  explicit constexpr ConvoyFunInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConvoyFunInfo(const ConvoyFunInfo& from);
  ConvoyFunInfo(ConvoyFunInfo&& from) noexcept
    : ConvoyFunInfo() {
    *this = ::std::move(from);
  }

  inline ConvoyFunInfo& operator=(const ConvoyFunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvoyFunInfo& operator=(ConvoyFunInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConvoyFunInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConvoyFunInfo* internal_default_instance() {
    return reinterpret_cast<const ConvoyFunInfo*>(
               &_ConvoyFunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConvoyFunInfo& a, ConvoyFunInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvoyFunInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvoyFunInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConvoyFunInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConvoyFunInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConvoyFunInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConvoyFunInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConvoyFunInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.ConvoyFunInfo";
  }
  protected:
  explicit ConvoyFunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLcdafunFieldNumber = 1,
    kFcwaebedsFieldNumber = 2,
    kLdwlkaelkFieldNumber = 3,
  };
  // .HmiInterface.LCDAFUN lcdafun = 1;
  bool has_lcdafun() const;
  private:
  bool _internal_has_lcdafun() const;
  public:
  void clear_lcdafun();
  const ::HmiInterface::LCDAFUN& lcdafun() const;
  PROTOBUF_NODISCARD ::HmiInterface::LCDAFUN* release_lcdafun();
  ::HmiInterface::LCDAFUN* mutable_lcdafun();
  void set_allocated_lcdafun(::HmiInterface::LCDAFUN* lcdafun);
  private:
  const ::HmiInterface::LCDAFUN& _internal_lcdafun() const;
  ::HmiInterface::LCDAFUN* _internal_mutable_lcdafun();
  public:
  void unsafe_arena_set_allocated_lcdafun(
      ::HmiInterface::LCDAFUN* lcdafun);
  ::HmiInterface::LCDAFUN* unsafe_arena_release_lcdafun();

  // .HmiInterface.FCWAEBEDS fcwaebeds = 2;
  bool has_fcwaebeds() const;
  private:
  bool _internal_has_fcwaebeds() const;
  public:
  void clear_fcwaebeds();
  const ::HmiInterface::FCWAEBEDS& fcwaebeds() const;
  PROTOBUF_NODISCARD ::HmiInterface::FCWAEBEDS* release_fcwaebeds();
  ::HmiInterface::FCWAEBEDS* mutable_fcwaebeds();
  void set_allocated_fcwaebeds(::HmiInterface::FCWAEBEDS* fcwaebeds);
  private:
  const ::HmiInterface::FCWAEBEDS& _internal_fcwaebeds() const;
  ::HmiInterface::FCWAEBEDS* _internal_mutable_fcwaebeds();
  public:
  void unsafe_arena_set_allocated_fcwaebeds(
      ::HmiInterface::FCWAEBEDS* fcwaebeds);
  ::HmiInterface::FCWAEBEDS* unsafe_arena_release_fcwaebeds();

  // .HmiInterface.LDWLKAELK ldwlkaelk = 3;
  bool has_ldwlkaelk() const;
  private:
  bool _internal_has_ldwlkaelk() const;
  public:
  void clear_ldwlkaelk();
  const ::HmiInterface::LDWLKAELK& ldwlkaelk() const;
  PROTOBUF_NODISCARD ::HmiInterface::LDWLKAELK* release_ldwlkaelk();
  ::HmiInterface::LDWLKAELK* mutable_ldwlkaelk();
  void set_allocated_ldwlkaelk(::HmiInterface::LDWLKAELK* ldwlkaelk);
  private:
  const ::HmiInterface::LDWLKAELK& _internal_ldwlkaelk() const;
  ::HmiInterface::LDWLKAELK* _internal_mutable_ldwlkaelk();
  public:
  void unsafe_arena_set_allocated_ldwlkaelk(
      ::HmiInterface::LDWLKAELK* ldwlkaelk);
  ::HmiInterface::LDWLKAELK* unsafe_arena_release_ldwlkaelk();

  // @@protoc_insertion_point(class_scope:HmiInterface.ConvoyFunInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::HmiInterface::LCDAFUN* lcdafun_;
  ::HmiInterface::FCWAEBEDS* fcwaebeds_;
  ::HmiInterface::LDWLKAELK* ldwlkaelk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fconvoyfun_2eproto;
};
// -------------------------------------------------------------------

class BasicConvoyFunInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiInterface.BasicConvoyFunInfo) */ {
 public:
  inline BasicConvoyFunInfo() : BasicConvoyFunInfo(nullptr) {}
  ~BasicConvoyFunInfo() override;
  explicit constexpr BasicConvoyFunInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasicConvoyFunInfo(const BasicConvoyFunInfo& from);
  BasicConvoyFunInfo(BasicConvoyFunInfo&& from) noexcept
    : BasicConvoyFunInfo() {
    *this = ::std::move(from);
  }

  inline BasicConvoyFunInfo& operator=(const BasicConvoyFunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicConvoyFunInfo& operator=(BasicConvoyFunInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasicConvoyFunInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicConvoyFunInfo* internal_default_instance() {
    return reinterpret_cast<const BasicConvoyFunInfo*>(
               &_BasicConvoyFunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BasicConvoyFunInfo& a, BasicConvoyFunInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicConvoyFunInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicConvoyFunInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BasicConvoyFunInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BasicConvoyFunInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasicConvoyFunInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BasicConvoyFunInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicConvoyFunInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiInterface.BasicConvoyFunInfo";
  }
  protected:
  explicit BasicConvoyFunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConvoyFunInfoFieldNumber = 1,
  };
  // .HmiInterface.ConvoyFunInfo convoy_fun_info = 1;
  bool has_convoy_fun_info() const;
  private:
  bool _internal_has_convoy_fun_info() const;
  public:
  void clear_convoy_fun_info();
  const ::HmiInterface::ConvoyFunInfo& convoy_fun_info() const;
  PROTOBUF_NODISCARD ::HmiInterface::ConvoyFunInfo* release_convoy_fun_info();
  ::HmiInterface::ConvoyFunInfo* mutable_convoy_fun_info();
  void set_allocated_convoy_fun_info(::HmiInterface::ConvoyFunInfo* convoy_fun_info);
  private:
  const ::HmiInterface::ConvoyFunInfo& _internal_convoy_fun_info() const;
  ::HmiInterface::ConvoyFunInfo* _internal_mutable_convoy_fun_info();
  public:
  void unsafe_arena_set_allocated_convoy_fun_info(
      ::HmiInterface::ConvoyFunInfo* convoy_fun_info);
  ::HmiInterface::ConvoyFunInfo* unsafe_arena_release_convoy_fun_info();

  // @@protoc_insertion_point(class_scope:HmiInterface.BasicConvoyFunInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::HmiInterface::ConvoyFunInfo* convoy_fun_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hmi_5fbasic_5fconvoyfun_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LDWLKAELK

// uint32 ad_ldwstatus = 1;
inline void LDWLKAELK::clear_ad_ldwstatus() {
  ad_ldwstatus_ = 0u;
}
inline uint32_t LDWLKAELK::_internal_ad_ldwstatus() const {
  return ad_ldwstatus_;
}
inline uint32_t LDWLKAELK::ad_ldwstatus() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LDWLKAELK.ad_ldwstatus)
  return _internal_ad_ldwstatus();
}
inline void LDWLKAELK::_internal_set_ad_ldwstatus(uint32_t value) {
  
  ad_ldwstatus_ = value;
}
inline void LDWLKAELK::set_ad_ldwstatus(uint32_t value) {
  _internal_set_ad_ldwstatus(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LDWLKAELK.ad_ldwstatus)
}

// uint32 ad_lkastatus = 2;
inline void LDWLKAELK::clear_ad_lkastatus() {
  ad_lkastatus_ = 0u;
}
inline uint32_t LDWLKAELK::_internal_ad_lkastatus() const {
  return ad_lkastatus_;
}
inline uint32_t LDWLKAELK::ad_lkastatus() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LDWLKAELK.ad_lkastatus)
  return _internal_ad_lkastatus();
}
inline void LDWLKAELK::_internal_set_ad_lkastatus(uint32_t value) {
  
  ad_lkastatus_ = value;
}
inline void LDWLKAELK::set_ad_lkastatus(uint32_t value) {
  _internal_set_ad_lkastatus(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LDWLKAELK.ad_lkastatus)
}

// uint32 ad_voiceinfo = 3;
inline void LDWLKAELK::clear_ad_voiceinfo() {
  ad_voiceinfo_ = 0u;
}
inline uint32_t LDWLKAELK::_internal_ad_voiceinfo() const {
  return ad_voiceinfo_;
}
inline uint32_t LDWLKAELK::ad_voiceinfo() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LDWLKAELK.ad_voiceinfo)
  return _internal_ad_voiceinfo();
}
inline void LDWLKAELK::_internal_set_ad_voiceinfo(uint32_t value) {
  
  ad_voiceinfo_ = value;
}
inline void LDWLKAELK::set_ad_voiceinfo(uint32_t value) {
  _internal_set_ad_voiceinfo(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LDWLKAELK.ad_voiceinfo)
}

// uint32 ad_elkmode = 4;
inline void LDWLKAELK::clear_ad_elkmode() {
  ad_elkmode_ = 0u;
}
inline uint32_t LDWLKAELK::_internal_ad_elkmode() const {
  return ad_elkmode_;
}
inline uint32_t LDWLKAELK::ad_elkmode() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LDWLKAELK.ad_elkmode)
  return _internal_ad_elkmode();
}
inline void LDWLKAELK::_internal_set_ad_elkmode(uint32_t value) {
  
  ad_elkmode_ = value;
}
inline void LDWLKAELK::set_ad_elkmode(uint32_t value) {
  _internal_set_ad_elkmode(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LDWLKAELK.ad_elkmode)
}

// uint32 ad_elkleftinterventionmode = 5;
inline void LDWLKAELK::clear_ad_elkleftinterventionmode() {
  ad_elkleftinterventionmode_ = 0u;
}
inline uint32_t LDWLKAELK::_internal_ad_elkleftinterventionmode() const {
  return ad_elkleftinterventionmode_;
}
inline uint32_t LDWLKAELK::ad_elkleftinterventionmode() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LDWLKAELK.ad_elkleftinterventionmode)
  return _internal_ad_elkleftinterventionmode();
}
inline void LDWLKAELK::_internal_set_ad_elkleftinterventionmode(uint32_t value) {
  
  ad_elkleftinterventionmode_ = value;
}
inline void LDWLKAELK::set_ad_elkleftinterventionmode(uint32_t value) {
  _internal_set_ad_elkleftinterventionmode(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LDWLKAELK.ad_elkleftinterventionmode)
}

// uint32 ad_elkrightinterventionmode = 6;
inline void LDWLKAELK::clear_ad_elkrightinterventionmode() {
  ad_elkrightinterventionmode_ = 0u;
}
inline uint32_t LDWLKAELK::_internal_ad_elkrightinterventionmode() const {
  return ad_elkrightinterventionmode_;
}
inline uint32_t LDWLKAELK::ad_elkrightinterventionmode() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LDWLKAELK.ad_elkrightinterventionmode)
  return _internal_ad_elkrightinterventionmode();
}
inline void LDWLKAELK::_internal_set_ad_elkrightinterventionmode(uint32_t value) {
  
  ad_elkrightinterventionmode_ = value;
}
inline void LDWLKAELK::set_ad_elkrightinterventionmode(uint32_t value) {
  _internal_set_ad_elkrightinterventionmode(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LDWLKAELK.ad_elkrightinterventionmode)
}

// uint32 ad_ldwinhaitwarning = 7;
inline void LDWLKAELK::clear_ad_ldwinhaitwarning() {
  ad_ldwinhaitwarning_ = 0u;
}
inline uint32_t LDWLKAELK::_internal_ad_ldwinhaitwarning() const {
  return ad_ldwinhaitwarning_;
}
inline uint32_t LDWLKAELK::ad_ldwinhaitwarning() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LDWLKAELK.ad_ldwinhaitwarning)
  return _internal_ad_ldwinhaitwarning();
}
inline void LDWLKAELK::_internal_set_ad_ldwinhaitwarning(uint32_t value) {
  
  ad_ldwinhaitwarning_ = value;
}
inline void LDWLKAELK::set_ad_ldwinhaitwarning(uint32_t value) {
  _internal_set_ad_ldwinhaitwarning(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LDWLKAELK.ad_ldwinhaitwarning)
}

// uint32 ad_lkainhaitwarning = 8;
inline void LDWLKAELK::clear_ad_lkainhaitwarning() {
  ad_lkainhaitwarning_ = 0u;
}
inline uint32_t LDWLKAELK::_internal_ad_lkainhaitwarning() const {
  return ad_lkainhaitwarning_;
}
inline uint32_t LDWLKAELK::ad_lkainhaitwarning() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LDWLKAELK.ad_lkainhaitwarning)
  return _internal_ad_lkainhaitwarning();
}
inline void LDWLKAELK::_internal_set_ad_lkainhaitwarning(uint32_t value) {
  
  ad_lkainhaitwarning_ = value;
}
inline void LDWLKAELK::set_ad_lkainhaitwarning(uint32_t value) {
  _internal_set_ad_lkainhaitwarning(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LDWLKAELK.ad_lkainhaitwarning)
}

// -------------------------------------------------------------------

// FCWAEBEDS

// uint32 ad_aebstatus = 1;
inline void FCWAEBEDS::clear_ad_aebstatus() {
  ad_aebstatus_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_aebstatus() const {
  return ad_aebstatus_;
}
inline uint32_t FCWAEBEDS::ad_aebstatus() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_aebstatus)
  return _internal_ad_aebstatus();
}
inline void FCWAEBEDS::_internal_set_ad_aebstatus(uint32_t value) {
  
  ad_aebstatus_ = value;
}
inline void FCWAEBEDS::set_ad_aebstatus(uint32_t value) {
  _internal_set_ad_aebstatus(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_aebstatus)
}

// uint32 ad_rebstatus = 2;
inline void FCWAEBEDS::clear_ad_rebstatus() {
  ad_rebstatus_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_rebstatus() const {
  return ad_rebstatus_;
}
inline uint32_t FCWAEBEDS::ad_rebstatus() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_rebstatus)
  return _internal_ad_rebstatus();
}
inline void FCWAEBEDS::_internal_set_ad_rebstatus(uint32_t value) {
  
  ad_rebstatus_ = value;
}
inline void FCWAEBEDS::set_ad_rebstatus(uint32_t value) {
  _internal_set_ad_rebstatus(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_rebstatus)
}

// uint32 ad_aesstatus = 3;
inline void FCWAEBEDS::clear_ad_aesstatus() {
  ad_aesstatus_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_aesstatus() const {
  return ad_aesstatus_;
}
inline uint32_t FCWAEBEDS::ad_aesstatus() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_aesstatus)
  return _internal_ad_aesstatus();
}
inline void FCWAEBEDS::_internal_set_ad_aesstatus(uint32_t value) {
  
  ad_aesstatus_ = value;
}
inline void FCWAEBEDS::set_ad_aesstatus(uint32_t value) {
  _internal_set_ad_aesstatus(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_aesstatus)
}

// uint32 ad_fcwlatentwarning = 4;
inline void FCWAEBEDS::clear_ad_fcwlatentwarning() {
  ad_fcwlatentwarning_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_fcwlatentwarning() const {
  return ad_fcwlatentwarning_;
}
inline uint32_t FCWAEBEDS::ad_fcwlatentwarning() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_fcwlatentwarning)
  return _internal_ad_fcwlatentwarning();
}
inline void FCWAEBEDS::_internal_set_ad_fcwlatentwarning(uint32_t value) {
  
  ad_fcwlatentwarning_ = value;
}
inline void FCWAEBEDS::set_ad_fcwlatentwarning(uint32_t value) {
  _internal_set_ad_fcwlatentwarning(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_fcwlatentwarning)
}

// uint32 ad_fcwactive = 5;
inline void FCWAEBEDS::clear_ad_fcwactive() {
  ad_fcwactive_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_fcwactive() const {
  return ad_fcwactive_;
}
inline uint32_t FCWAEBEDS::ad_fcwactive() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_fcwactive)
  return _internal_ad_fcwactive();
}
inline void FCWAEBEDS::_internal_set_ad_fcwactive(uint32_t value) {
  
  ad_fcwactive_ = value;
}
inline void FCWAEBEDS::set_ad_fcwactive(uint32_t value) {
  _internal_set_ad_fcwactive(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_fcwactive)
}

// uint32 ad_rewalert = 6;
inline void FCWAEBEDS::clear_ad_rewalert() {
  ad_rewalert_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_rewalert() const {
  return ad_rewalert_;
}
inline uint32_t FCWAEBEDS::ad_rewalert() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_rewalert)
  return _internal_ad_rewalert();
}
inline void FCWAEBEDS::_internal_set_ad_rewalert(uint32_t value) {
  
  ad_rewalert_ = value;
}
inline void FCWAEBEDS::set_ad_rewalert(uint32_t value) {
  _internal_set_ad_rewalert(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_rewalert)
}

// uint32 ad_fctbactive = 7;
inline void FCWAEBEDS::clear_ad_fctbactive() {
  ad_fctbactive_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_fctbactive() const {
  return ad_fctbactive_;
}
inline uint32_t FCWAEBEDS::ad_fctbactive() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_fctbactive)
  return _internal_ad_fctbactive();
}
inline void FCWAEBEDS::_internal_set_ad_fctbactive(uint32_t value) {
  
  ad_fctbactive_ = value;
}
inline void FCWAEBEDS::set_ad_fctbactive(uint32_t value) {
  _internal_set_ad_fctbactive(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_fctbactive)
}

// uint32 ad_rctbactive = 8;
inline void FCWAEBEDS::clear_ad_rctbactive() {
  ad_rctbactive_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_rctbactive() const {
  return ad_rctbactive_;
}
inline uint32_t FCWAEBEDS::ad_rctbactive() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_rctbactive)
  return _internal_ad_rctbactive();
}
inline void FCWAEBEDS::_internal_set_ad_rctbactive(uint32_t value) {
  
  ad_rctbactive_ = value;
}
inline void FCWAEBEDS::set_ad_rctbactive(uint32_t value) {
  _internal_set_ad_rctbactive(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_rctbactive)
}

// uint32 ad_rebactive = 9;
inline void FCWAEBEDS::clear_ad_rebactive() {
  ad_rebactive_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_rebactive() const {
  return ad_rebactive_;
}
inline uint32_t FCWAEBEDS::ad_rebactive() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_rebactive)
  return _internal_ad_rebactive();
}
inline void FCWAEBEDS::_internal_set_ad_rebactive(uint32_t value) {
  
  ad_rebactive_ = value;
}
inline void FCWAEBEDS::set_ad_rebactive(uint32_t value) {
  _internal_set_ad_rebactive(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_rebactive)
}

// uint32 ad_fctaleftalert = 10;
inline void FCWAEBEDS::clear_ad_fctaleftalert() {
  ad_fctaleftalert_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_fctaleftalert() const {
  return ad_fctaleftalert_;
}
inline uint32_t FCWAEBEDS::ad_fctaleftalert() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_fctaleftalert)
  return _internal_ad_fctaleftalert();
}
inline void FCWAEBEDS::_internal_set_ad_fctaleftalert(uint32_t value) {
  
  ad_fctaleftalert_ = value;
}
inline void FCWAEBEDS::set_ad_fctaleftalert(uint32_t value) {
  _internal_set_ad_fctaleftalert(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_fctaleftalert)
}

// uint32 ad_fctarightalert = 11;
inline void FCWAEBEDS::clear_ad_fctarightalert() {
  ad_fctarightalert_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_fctarightalert() const {
  return ad_fctarightalert_;
}
inline uint32_t FCWAEBEDS::ad_fctarightalert() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_fctarightalert)
  return _internal_ad_fctarightalert();
}
inline void FCWAEBEDS::_internal_set_ad_fctarightalert(uint32_t value) {
  
  ad_fctarightalert_ = value;
}
inline void FCWAEBEDS::set_ad_fctarightalert(uint32_t value) {
  _internal_set_ad_fctarightalert(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_fctarightalert)
}

// uint32 ad_aebactive = 12;
inline void FCWAEBEDS::clear_ad_aebactive() {
  ad_aebactive_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_aebactive() const {
  return ad_aebactive_;
}
inline uint32_t FCWAEBEDS::ad_aebactive() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_aebactive)
  return _internal_ad_aebactive();
}
inline void FCWAEBEDS::_internal_set_ad_aebactive(uint32_t value) {
  
  ad_aebactive_ = value;
}
inline void FCWAEBEDS::set_ad_aebactive(uint32_t value) {
  _internal_set_ad_aebactive(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_aebactive)
}

// uint32 ad_runredlightwarning = 13;
inline void FCWAEBEDS::clear_ad_runredlightwarning() {
  ad_runredlightwarning_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_runredlightwarning() const {
  return ad_runredlightwarning_;
}
inline uint32_t FCWAEBEDS::ad_runredlightwarning() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_runredlightwarning)
  return _internal_ad_runredlightwarning();
}
inline void FCWAEBEDS::_internal_set_ad_runredlightwarning(uint32_t value) {
  
  ad_runredlightwarning_ = value;
}
inline void FCWAEBEDS::set_ad_runredlightwarning(uint32_t value) {
  _internal_set_ad_runredlightwarning(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_runredlightwarning)
}

// uint32 ad_aesactive = 14;
inline void FCWAEBEDS::clear_ad_aesactive() {
  ad_aesactive_ = 0u;
}
inline uint32_t FCWAEBEDS::_internal_ad_aesactive() const {
  return ad_aesactive_;
}
inline uint32_t FCWAEBEDS::ad_aesactive() const {
  // @@protoc_insertion_point(field_get:HmiInterface.FCWAEBEDS.ad_aesactive)
  return _internal_ad_aesactive();
}
inline void FCWAEBEDS::_internal_set_ad_aesactive(uint32_t value) {
  
  ad_aesactive_ = value;
}
inline void FCWAEBEDS::set_ad_aesactive(uint32_t value) {
  _internal_set_ad_aesactive(value);
  // @@protoc_insertion_point(field_set:HmiInterface.FCWAEBEDS.ad_aesactive)
}

// -------------------------------------------------------------------

// LCDAFUN

// uint32 ad_bsdlca_leftalert = 1;
inline void LCDAFUN::clear_ad_bsdlca_leftalert() {
  ad_bsdlca_leftalert_ = 0u;
}
inline uint32_t LCDAFUN::_internal_ad_bsdlca_leftalert() const {
  return ad_bsdlca_leftalert_;
}
inline uint32_t LCDAFUN::ad_bsdlca_leftalert() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LCDAFUN.ad_bsdlca_leftalert)
  return _internal_ad_bsdlca_leftalert();
}
inline void LCDAFUN::_internal_set_ad_bsdlca_leftalert(uint32_t value) {
  
  ad_bsdlca_leftalert_ = value;
}
inline void LCDAFUN::set_ad_bsdlca_leftalert(uint32_t value) {
  _internal_set_ad_bsdlca_leftalert(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LCDAFUN.ad_bsdlca_leftalert)
}

// uint32 ad_rctaleftalert = 2;
inline void LCDAFUN::clear_ad_rctaleftalert() {
  ad_rctaleftalert_ = 0u;
}
inline uint32_t LCDAFUN::_internal_ad_rctaleftalert() const {
  return ad_rctaleftalert_;
}
inline uint32_t LCDAFUN::ad_rctaleftalert() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LCDAFUN.ad_rctaleftalert)
  return _internal_ad_rctaleftalert();
}
inline void LCDAFUN::_internal_set_ad_rctaleftalert(uint32_t value) {
  
  ad_rctaleftalert_ = value;
}
inline void LCDAFUN::set_ad_rctaleftalert(uint32_t value) {
  _internal_set_ad_rctaleftalert(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LCDAFUN.ad_rctaleftalert)
}

// uint32 ad_sealeftalert = 3;
inline void LCDAFUN::clear_ad_sealeftalert() {
  ad_sealeftalert_ = 0u;
}
inline uint32_t LCDAFUN::_internal_ad_sealeftalert() const {
  return ad_sealeftalert_;
}
inline uint32_t LCDAFUN::ad_sealeftalert() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LCDAFUN.ad_sealeftalert)
  return _internal_ad_sealeftalert();
}
inline void LCDAFUN::_internal_set_ad_sealeftalert(uint32_t value) {
  
  ad_sealeftalert_ = value;
}
inline void LCDAFUN::set_ad_sealeftalert(uint32_t value) {
  _internal_set_ad_sealeftalert(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LCDAFUN.ad_sealeftalert)
}

// uint32 ad_dowleftalert = 4;
inline void LCDAFUN::clear_ad_dowleftalert() {
  ad_dowleftalert_ = 0u;
}
inline uint32_t LCDAFUN::_internal_ad_dowleftalert() const {
  return ad_dowleftalert_;
}
inline uint32_t LCDAFUN::ad_dowleftalert() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LCDAFUN.ad_dowleftalert)
  return _internal_ad_dowleftalert();
}
inline void LCDAFUN::_internal_set_ad_dowleftalert(uint32_t value) {
  
  ad_dowleftalert_ = value;
}
inline void LCDAFUN::set_ad_dowleftalert(uint32_t value) {
  _internal_set_ad_dowleftalert(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LCDAFUN.ad_dowleftalert)
}

// uint32 ad_rcwalert = 5;
inline void LCDAFUN::clear_ad_rcwalert() {
  ad_rcwalert_ = 0u;
}
inline uint32_t LCDAFUN::_internal_ad_rcwalert() const {
  return ad_rcwalert_;
}
inline uint32_t LCDAFUN::ad_rcwalert() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LCDAFUN.ad_rcwalert)
  return _internal_ad_rcwalert();
}
inline void LCDAFUN::_internal_set_ad_rcwalert(uint32_t value) {
  
  ad_rcwalert_ = value;
}
inline void LCDAFUN::set_ad_rcwalert(uint32_t value) {
  _internal_set_ad_rcwalert(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LCDAFUN.ad_rcwalert)
}

// uint32 ad_bsdlca_rightalert = 6;
inline void LCDAFUN::clear_ad_bsdlca_rightalert() {
  ad_bsdlca_rightalert_ = 0u;
}
inline uint32_t LCDAFUN::_internal_ad_bsdlca_rightalert() const {
  return ad_bsdlca_rightalert_;
}
inline uint32_t LCDAFUN::ad_bsdlca_rightalert() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LCDAFUN.ad_bsdlca_rightalert)
  return _internal_ad_bsdlca_rightalert();
}
inline void LCDAFUN::_internal_set_ad_bsdlca_rightalert(uint32_t value) {
  
  ad_bsdlca_rightalert_ = value;
}
inline void LCDAFUN::set_ad_bsdlca_rightalert(uint32_t value) {
  _internal_set_ad_bsdlca_rightalert(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LCDAFUN.ad_bsdlca_rightalert)
}

// uint32 ad_rctarightalert = 7;
inline void LCDAFUN::clear_ad_rctarightalert() {
  ad_rctarightalert_ = 0u;
}
inline uint32_t LCDAFUN::_internal_ad_rctarightalert() const {
  return ad_rctarightalert_;
}
inline uint32_t LCDAFUN::ad_rctarightalert() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LCDAFUN.ad_rctarightalert)
  return _internal_ad_rctarightalert();
}
inline void LCDAFUN::_internal_set_ad_rctarightalert(uint32_t value) {
  
  ad_rctarightalert_ = value;
}
inline void LCDAFUN::set_ad_rctarightalert(uint32_t value) {
  _internal_set_ad_rctarightalert(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LCDAFUN.ad_rctarightalert)
}

// uint32 ad_searightalert = 8;
inline void LCDAFUN::clear_ad_searightalert() {
  ad_searightalert_ = 0u;
}
inline uint32_t LCDAFUN::_internal_ad_searightalert() const {
  return ad_searightalert_;
}
inline uint32_t LCDAFUN::ad_searightalert() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LCDAFUN.ad_searightalert)
  return _internal_ad_searightalert();
}
inline void LCDAFUN::_internal_set_ad_searightalert(uint32_t value) {
  
  ad_searightalert_ = value;
}
inline void LCDAFUN::set_ad_searightalert(uint32_t value) {
  _internal_set_ad_searightalert(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LCDAFUN.ad_searightalert)
}

// uint32 ad_dowrightalert = 9;
inline void LCDAFUN::clear_ad_dowrightalert() {
  ad_dowrightalert_ = 0u;
}
inline uint32_t LCDAFUN::_internal_ad_dowrightalert() const {
  return ad_dowrightalert_;
}
inline uint32_t LCDAFUN::ad_dowrightalert() const {
  // @@protoc_insertion_point(field_get:HmiInterface.LCDAFUN.ad_dowrightalert)
  return _internal_ad_dowrightalert();
}
inline void LCDAFUN::_internal_set_ad_dowrightalert(uint32_t value) {
  
  ad_dowrightalert_ = value;
}
inline void LCDAFUN::set_ad_dowrightalert(uint32_t value) {
  _internal_set_ad_dowrightalert(value);
  // @@protoc_insertion_point(field_set:HmiInterface.LCDAFUN.ad_dowrightalert)
}

// -------------------------------------------------------------------

// ConvoyFunInfo

// .HmiInterface.LCDAFUN lcdafun = 1;
inline bool ConvoyFunInfo::_internal_has_lcdafun() const {
  return this != internal_default_instance() && lcdafun_ != nullptr;
}
inline bool ConvoyFunInfo::has_lcdafun() const {
  return _internal_has_lcdafun();
}
inline void ConvoyFunInfo::clear_lcdafun() {
  if (GetArenaForAllocation() == nullptr && lcdafun_ != nullptr) {
    delete lcdafun_;
  }
  lcdafun_ = nullptr;
}
inline const ::HmiInterface::LCDAFUN& ConvoyFunInfo::_internal_lcdafun() const {
  const ::HmiInterface::LCDAFUN* p = lcdafun_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::LCDAFUN&>(
      ::HmiInterface::_LCDAFUN_default_instance_);
}
inline const ::HmiInterface::LCDAFUN& ConvoyFunInfo::lcdafun() const {
  // @@protoc_insertion_point(field_get:HmiInterface.ConvoyFunInfo.lcdafun)
  return _internal_lcdafun();
}
inline void ConvoyFunInfo::unsafe_arena_set_allocated_lcdafun(
    ::HmiInterface::LCDAFUN* lcdafun) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lcdafun_);
  }
  lcdafun_ = lcdafun;
  if (lcdafun) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.ConvoyFunInfo.lcdafun)
}
inline ::HmiInterface::LCDAFUN* ConvoyFunInfo::release_lcdafun() {
  
  ::HmiInterface::LCDAFUN* temp = lcdafun_;
  lcdafun_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::LCDAFUN* ConvoyFunInfo::unsafe_arena_release_lcdafun() {
  // @@protoc_insertion_point(field_release:HmiInterface.ConvoyFunInfo.lcdafun)
  
  ::HmiInterface::LCDAFUN* temp = lcdafun_;
  lcdafun_ = nullptr;
  return temp;
}
inline ::HmiInterface::LCDAFUN* ConvoyFunInfo::_internal_mutable_lcdafun() {
  
  if (lcdafun_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::LCDAFUN>(GetArenaForAllocation());
    lcdafun_ = p;
  }
  return lcdafun_;
}
inline ::HmiInterface::LCDAFUN* ConvoyFunInfo::mutable_lcdafun() {
  ::HmiInterface::LCDAFUN* _msg = _internal_mutable_lcdafun();
  // @@protoc_insertion_point(field_mutable:HmiInterface.ConvoyFunInfo.lcdafun)
  return _msg;
}
inline void ConvoyFunInfo::set_allocated_lcdafun(::HmiInterface::LCDAFUN* lcdafun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lcdafun_;
  }
  if (lcdafun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::LCDAFUN>::GetOwningArena(lcdafun);
    if (message_arena != submessage_arena) {
      lcdafun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lcdafun, submessage_arena);
    }
    
  } else {
    
  }
  lcdafun_ = lcdafun;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.ConvoyFunInfo.lcdafun)
}

// .HmiInterface.FCWAEBEDS fcwaebeds = 2;
inline bool ConvoyFunInfo::_internal_has_fcwaebeds() const {
  return this != internal_default_instance() && fcwaebeds_ != nullptr;
}
inline bool ConvoyFunInfo::has_fcwaebeds() const {
  return _internal_has_fcwaebeds();
}
inline void ConvoyFunInfo::clear_fcwaebeds() {
  if (GetArenaForAllocation() == nullptr && fcwaebeds_ != nullptr) {
    delete fcwaebeds_;
  }
  fcwaebeds_ = nullptr;
}
inline const ::HmiInterface::FCWAEBEDS& ConvoyFunInfo::_internal_fcwaebeds() const {
  const ::HmiInterface::FCWAEBEDS* p = fcwaebeds_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::FCWAEBEDS&>(
      ::HmiInterface::_FCWAEBEDS_default_instance_);
}
inline const ::HmiInterface::FCWAEBEDS& ConvoyFunInfo::fcwaebeds() const {
  // @@protoc_insertion_point(field_get:HmiInterface.ConvoyFunInfo.fcwaebeds)
  return _internal_fcwaebeds();
}
inline void ConvoyFunInfo::unsafe_arena_set_allocated_fcwaebeds(
    ::HmiInterface::FCWAEBEDS* fcwaebeds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fcwaebeds_);
  }
  fcwaebeds_ = fcwaebeds;
  if (fcwaebeds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.ConvoyFunInfo.fcwaebeds)
}
inline ::HmiInterface::FCWAEBEDS* ConvoyFunInfo::release_fcwaebeds() {
  
  ::HmiInterface::FCWAEBEDS* temp = fcwaebeds_;
  fcwaebeds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::FCWAEBEDS* ConvoyFunInfo::unsafe_arena_release_fcwaebeds() {
  // @@protoc_insertion_point(field_release:HmiInterface.ConvoyFunInfo.fcwaebeds)
  
  ::HmiInterface::FCWAEBEDS* temp = fcwaebeds_;
  fcwaebeds_ = nullptr;
  return temp;
}
inline ::HmiInterface::FCWAEBEDS* ConvoyFunInfo::_internal_mutable_fcwaebeds() {
  
  if (fcwaebeds_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::FCWAEBEDS>(GetArenaForAllocation());
    fcwaebeds_ = p;
  }
  return fcwaebeds_;
}
inline ::HmiInterface::FCWAEBEDS* ConvoyFunInfo::mutable_fcwaebeds() {
  ::HmiInterface::FCWAEBEDS* _msg = _internal_mutable_fcwaebeds();
  // @@protoc_insertion_point(field_mutable:HmiInterface.ConvoyFunInfo.fcwaebeds)
  return _msg;
}
inline void ConvoyFunInfo::set_allocated_fcwaebeds(::HmiInterface::FCWAEBEDS* fcwaebeds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fcwaebeds_;
  }
  if (fcwaebeds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::FCWAEBEDS>::GetOwningArena(fcwaebeds);
    if (message_arena != submessage_arena) {
      fcwaebeds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fcwaebeds, submessage_arena);
    }
    
  } else {
    
  }
  fcwaebeds_ = fcwaebeds;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.ConvoyFunInfo.fcwaebeds)
}

// .HmiInterface.LDWLKAELK ldwlkaelk = 3;
inline bool ConvoyFunInfo::_internal_has_ldwlkaelk() const {
  return this != internal_default_instance() && ldwlkaelk_ != nullptr;
}
inline bool ConvoyFunInfo::has_ldwlkaelk() const {
  return _internal_has_ldwlkaelk();
}
inline void ConvoyFunInfo::clear_ldwlkaelk() {
  if (GetArenaForAllocation() == nullptr && ldwlkaelk_ != nullptr) {
    delete ldwlkaelk_;
  }
  ldwlkaelk_ = nullptr;
}
inline const ::HmiInterface::LDWLKAELK& ConvoyFunInfo::_internal_ldwlkaelk() const {
  const ::HmiInterface::LDWLKAELK* p = ldwlkaelk_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::LDWLKAELK&>(
      ::HmiInterface::_LDWLKAELK_default_instance_);
}
inline const ::HmiInterface::LDWLKAELK& ConvoyFunInfo::ldwlkaelk() const {
  // @@protoc_insertion_point(field_get:HmiInterface.ConvoyFunInfo.ldwlkaelk)
  return _internal_ldwlkaelk();
}
inline void ConvoyFunInfo::unsafe_arena_set_allocated_ldwlkaelk(
    ::HmiInterface::LDWLKAELK* ldwlkaelk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ldwlkaelk_);
  }
  ldwlkaelk_ = ldwlkaelk;
  if (ldwlkaelk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.ConvoyFunInfo.ldwlkaelk)
}
inline ::HmiInterface::LDWLKAELK* ConvoyFunInfo::release_ldwlkaelk() {
  
  ::HmiInterface::LDWLKAELK* temp = ldwlkaelk_;
  ldwlkaelk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::LDWLKAELK* ConvoyFunInfo::unsafe_arena_release_ldwlkaelk() {
  // @@protoc_insertion_point(field_release:HmiInterface.ConvoyFunInfo.ldwlkaelk)
  
  ::HmiInterface::LDWLKAELK* temp = ldwlkaelk_;
  ldwlkaelk_ = nullptr;
  return temp;
}
inline ::HmiInterface::LDWLKAELK* ConvoyFunInfo::_internal_mutable_ldwlkaelk() {
  
  if (ldwlkaelk_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::LDWLKAELK>(GetArenaForAllocation());
    ldwlkaelk_ = p;
  }
  return ldwlkaelk_;
}
inline ::HmiInterface::LDWLKAELK* ConvoyFunInfo::mutable_ldwlkaelk() {
  ::HmiInterface::LDWLKAELK* _msg = _internal_mutable_ldwlkaelk();
  // @@protoc_insertion_point(field_mutable:HmiInterface.ConvoyFunInfo.ldwlkaelk)
  return _msg;
}
inline void ConvoyFunInfo::set_allocated_ldwlkaelk(::HmiInterface::LDWLKAELK* ldwlkaelk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ldwlkaelk_;
  }
  if (ldwlkaelk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::LDWLKAELK>::GetOwningArena(ldwlkaelk);
    if (message_arena != submessage_arena) {
      ldwlkaelk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ldwlkaelk, submessage_arena);
    }
    
  } else {
    
  }
  ldwlkaelk_ = ldwlkaelk;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.ConvoyFunInfo.ldwlkaelk)
}

// -------------------------------------------------------------------

// BasicConvoyFunInfo

// .HmiInterface.ConvoyFunInfo convoy_fun_info = 1;
inline bool BasicConvoyFunInfo::_internal_has_convoy_fun_info() const {
  return this != internal_default_instance() && convoy_fun_info_ != nullptr;
}
inline bool BasicConvoyFunInfo::has_convoy_fun_info() const {
  return _internal_has_convoy_fun_info();
}
inline void BasicConvoyFunInfo::clear_convoy_fun_info() {
  if (GetArenaForAllocation() == nullptr && convoy_fun_info_ != nullptr) {
    delete convoy_fun_info_;
  }
  convoy_fun_info_ = nullptr;
}
inline const ::HmiInterface::ConvoyFunInfo& BasicConvoyFunInfo::_internal_convoy_fun_info() const {
  const ::HmiInterface::ConvoyFunInfo* p = convoy_fun_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiInterface::ConvoyFunInfo&>(
      ::HmiInterface::_ConvoyFunInfo_default_instance_);
}
inline const ::HmiInterface::ConvoyFunInfo& BasicConvoyFunInfo::convoy_fun_info() const {
  // @@protoc_insertion_point(field_get:HmiInterface.BasicConvoyFunInfo.convoy_fun_info)
  return _internal_convoy_fun_info();
}
inline void BasicConvoyFunInfo::unsafe_arena_set_allocated_convoy_fun_info(
    ::HmiInterface::ConvoyFunInfo* convoy_fun_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convoy_fun_info_);
  }
  convoy_fun_info_ = convoy_fun_info;
  if (convoy_fun_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiInterface.BasicConvoyFunInfo.convoy_fun_info)
}
inline ::HmiInterface::ConvoyFunInfo* BasicConvoyFunInfo::release_convoy_fun_info() {
  
  ::HmiInterface::ConvoyFunInfo* temp = convoy_fun_info_;
  convoy_fun_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiInterface::ConvoyFunInfo* BasicConvoyFunInfo::unsafe_arena_release_convoy_fun_info() {
  // @@protoc_insertion_point(field_release:HmiInterface.BasicConvoyFunInfo.convoy_fun_info)
  
  ::HmiInterface::ConvoyFunInfo* temp = convoy_fun_info_;
  convoy_fun_info_ = nullptr;
  return temp;
}
inline ::HmiInterface::ConvoyFunInfo* BasicConvoyFunInfo::_internal_mutable_convoy_fun_info() {
  
  if (convoy_fun_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiInterface::ConvoyFunInfo>(GetArenaForAllocation());
    convoy_fun_info_ = p;
  }
  return convoy_fun_info_;
}
inline ::HmiInterface::ConvoyFunInfo* BasicConvoyFunInfo::mutable_convoy_fun_info() {
  ::HmiInterface::ConvoyFunInfo* _msg = _internal_mutable_convoy_fun_info();
  // @@protoc_insertion_point(field_mutable:HmiInterface.BasicConvoyFunInfo.convoy_fun_info)
  return _msg;
}
inline void BasicConvoyFunInfo::set_allocated_convoy_fun_info(::HmiInterface::ConvoyFunInfo* convoy_fun_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete convoy_fun_info_;
  }
  if (convoy_fun_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HmiInterface::ConvoyFunInfo>::GetOwningArena(convoy_fun_info);
    if (message_arena != submessage_arena) {
      convoy_fun_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convoy_fun_info, submessage_arena);
    }
    
  } else {
    
  }
  convoy_fun_info_ = convoy_fun_info;
  // @@protoc_insertion_point(field_set_allocated:HmiInterface.BasicConvoyFunInfo.convoy_fun_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HmiInterface

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hmi_5fbasic_5fconvoyfun_2eproto
