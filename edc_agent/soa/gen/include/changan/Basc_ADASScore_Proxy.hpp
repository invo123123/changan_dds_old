/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.1
  ServiceLatestModifyTime: 2023-08-17T18:18:24
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#ifndef Basc_ADASScore_Proxy_HPP
#define Basc_ADASScore_Proxy_HPP
#include <string.h>
#include <future>
#include <chrono>
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "dds/ddsrt/sync.h"
#include "changan/Basc_ADASScore.h"
#include "changan/base_proxy.hpp"
#include "changan/base_wait.hpp"
#include "changan/dds_client.hpp"
#include <mutex>

namespace com {
namespace changan {
namespace carDrive {
namespace C2Controller {
namespace proxy {
	namespace events {
        class Basc_ADASScore_Ntf_C2_ADASScore{
			public:
			    void set_receive_handler(const EventReceiveHandler<const C2_ADASScore&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const C2_ADASScore &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const C2_ADASScore&>> handler_list;
			    std::string event_name="Ntf_C2_ADASScore";
        };
	}
	extern void on_carDrive_Basc_ADASScore_reply_data_available(int32_t reader, void* arg);
	class Basc_ADASScore_Proxy : IBaseProxy,IBaseWait, public ProviderMatchedStatusHandler, public dds_link_count{
		public:
		    static Basc_ADASScore_Proxy& get_instance();
			bool init(std::string config="");
			void wait_server_online();
			bool destroy();
            events::Basc_ADASScore_Ntf_C2_ADASScore Ntf_C2_ADASScore;
			DDS_GuidPrefix_t guid;
			Msg<C2_GetADASScore> Get_C2_GetADASScore() {
				return this->Get_C2_GetADASScore<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<C2_GetADASScore> Get_C2_GetADASScore() {
				return this->Get_C2_GetADASScore( TIMEOUT);
			}
			const std::string get_service_name() {
				return this->service_name;
			}

		private:
		    const std::string service_name = "Basc_ADASScore_skeleton";
			Msg<C2_GetADASScore> Get_C2_GetADASScore( size_t dds_rpc_time_out);

			dds_rpc_handle_t dds_rpc_request_handle = {-1,-1,-1};
			dds_rpc_handle_t dds_rpc_reply_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_C2_ADASScore_handle = { -1,-1,-1 };

            bool init_flag = false;
            std::mutex init_mutex;

			Basc_ADASScore_Proxy();
			~Basc_ADASScore_Proxy();

			Basc_ADASScore_Proxy(const Basc_ADASScore_Proxy& signal);

			const Basc_ADASScore_Proxy& operator=(const Basc_ADASScore_Proxy& signal);
	};
}
}
}
}
}
#endif

