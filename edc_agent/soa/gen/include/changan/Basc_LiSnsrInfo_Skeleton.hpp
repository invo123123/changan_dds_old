/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  ServiceVersion: V1.2
  CmVersion： v2.0.3
  ServiceLatestModifyTime: 2023-07-25T13:37:03
  Generate Time: 2023-12-11 18:07:58
*****************************************************************/
#ifndef Basc_LiSnsrInfo_SKELETON_HPP
#define Basc_LiSnsrInfo_SKELETON_HPP
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "changan/string_util.hpp"
#include "changan/base_skeleton.hpp"
#include "changan/base_wait.hpp"
#include <iostream>
#include <string.h>
#include "changan/Car_Control_fl_Skeleton.hpp"
#include "changan/Car_Control.h"
#include <mutex>
namespace com {
namespace changan {
namespace carControl {
namespace S2S {
namespace skeleton {
	namespace events {
		using CarControlFLSkeleton = com::changan::carControl::skeleton::CarControlFLSkeleton;
        class Basc_LiSnsrInfo_Ntf_SolarLe{
            private:
                dds_rpc_handle_t dds_Ntf_SolarLe_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Basc_LiSnsrInfo_skeleton_Ntf_SolarLe";
			public:
			    Basc_LiSnsrInfo_Ntf_SolarLe() {
			    }
			    ~Basc_LiSnsrInfo_Ntf_SolarLe() {
                }
                void send(const uint8_t &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Basc_LiSnsrInfo_Ntf_SolarLe_Hash;
					ntf_message._u.Car_Control_Basc_LiSnsrInfo_Ntf_SolarLe = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Ntf_SolarLe_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Basc_LiSnsrInfo_Ntf_SolarRi{
            private:
                dds_rpc_handle_t dds_Ntf_SolarRi_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Basc_LiSnsrInfo_skeleton_Ntf_SolarRi";
			public:
			    Basc_LiSnsrInfo_Ntf_SolarRi() {
			    }
			    ~Basc_LiSnsrInfo_Ntf_SolarRi() {
                }
                void send(const uint8_t &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Basc_LiSnsrInfo_Ntf_SolarRi_Hash;
					ntf_message._u.Car_Control_Basc_LiSnsrInfo_Ntf_SolarRi = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Ntf_SolarRi_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Basc_LiSnsrInfo_Ntf_LiSnsrMod{
            private:
                dds_rpc_handle_t dds_Ntf_LiSnsrMod_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Basc_LiSnsrInfo_skeleton_Ntf_LiSnsrMod";
			public:
			    Basc_LiSnsrInfo_Ntf_LiSnsrMod() {
			    }
			    ~Basc_LiSnsrInfo_Ntf_LiSnsrMod() {
                }
                void send(const uint8_t &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrMod_Hash;
					ntf_message._u.Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrMod = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrMod_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Basc_LiSnsrInfo_Ntf_LiSnsrLoBeamReq{
            private:
                dds_rpc_handle_t dds_Ntf_LiSnsrLoBeamReq_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Basc_LiSnsrInfo_skeleton_Ntf_LiSnsrLoBeamReq";
			public:
			    Basc_LiSnsrInfo_Ntf_LiSnsrLoBeamReq() {
			    }
			    ~Basc_LiSnsrInfo_Ntf_LiSnsrLoBeamReq() {
                }
                void send(const uint8_t &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrLoBeamReq_Hash;
					ntf_message._u.Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrLoBeamReq = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrLoBeamReq_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Basc_LiSnsrInfo_Ntf_LiSnsrRunSt{
            private:
                dds_rpc_handle_t dds_Ntf_LiSnsrRunSt_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Basc_LiSnsrInfo_skeleton_Ntf_LiSnsrRunSt";
			public:
			    Basc_LiSnsrInfo_Ntf_LiSnsrRunSt() {
			    }
			    ~Basc_LiSnsrInfo_Ntf_LiSnsrRunSt() {
                }
                void send(const uint8_t &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrRunSt_Hash;
					ntf_message._u.Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrRunSt = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrRunSt_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Basc_LiSnsrInfo_Ntf_LiSnsrErrSt{
            private:
                dds_rpc_handle_t dds_Ntf_LiSnsrErrSt_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Basc_LiSnsrInfo_skeleton_Ntf_LiSnsrErrSt";
			public:
			    Basc_LiSnsrInfo_Ntf_LiSnsrErrSt() {
			    }
			    ~Basc_LiSnsrInfo_Ntf_LiSnsrErrSt() {
                }
				void send(const carControl_Secure_Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrErrSt_uint8 &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrErrSt_Hash;
					ntf_message._u.Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrErrSt = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Ntf_LiSnsrErrSt_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Basc_LiSnsrInfo_Ntf_IRBri{
            private:
                dds_rpc_handle_t dds_Ntf_IRBri_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Basc_LiSnsrInfo_skeleton_Ntf_IRBri";
			public:
			    Basc_LiSnsrInfo_Ntf_IRBri() {
			    }
			    ~Basc_LiSnsrInfo_Ntf_IRBri() {
                }
                void send(const uint8_t &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Basc_LiSnsrInfo_Ntf_IRBri_Hash;
					ntf_message._u.Car_Control_Basc_LiSnsrInfo_Ntf_IRBri = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Ntf_IRBri_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Basc_LiSnsrInfo_Ntf_FWBri{
            private:
                dds_rpc_handle_t dds_Ntf_FWBri_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Basc_LiSnsrInfo_skeleton_Ntf_FWBri";
			public:
			    Basc_LiSnsrInfo_Ntf_FWBri() {
			    }
			    ~Basc_LiSnsrInfo_Ntf_FWBri() {
                }
                void send(const uint16_t &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Basc_LiSnsrInfo_Ntf_FWBri_Hash;
					ntf_message._u.Car_Control_Basc_LiSnsrInfo_Ntf_FWBri = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Ntf_FWBri_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Basc_LiSnsrInfo_Ntf_AMBBri{
            private:
                dds_rpc_handle_t dds_Ntf_AMBBri_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Basc_LiSnsrInfo_skeleton_Ntf_AMBBri";
			public:
			    Basc_LiSnsrInfo_Ntf_AMBBri() {
			    }
			    ~Basc_LiSnsrInfo_Ntf_AMBBri() {
                }
                void send(const uint16_t &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Basc_LiSnsrInfo_Ntf_AMBBri_Hash;
					ntf_message._u.Car_Control_Basc_LiSnsrInfo_Ntf_AMBBri = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Ntf_AMBBri_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Basc_LiSnsrInfo_Ntf_HUDBri{
            private:
                dds_rpc_handle_t dds_Ntf_HUDBri_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Basc_LiSnsrInfo_skeleton_Ntf_HUDBri";
			public:
			    Basc_LiSnsrInfo_Ntf_HUDBri() {
			    }
			    ~Basc_LiSnsrInfo_Ntf_HUDBri() {
                }
                void send(const uint16_t &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Basc_LiSnsrInfo_Ntf_HUDBri_Hash;
					ntf_message._u.Car_Control_Basc_LiSnsrInfo_Ntf_HUDBri = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Ntf_HUDBri_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Basc_LiSnsrInfo_Ntf_LostComFltSt{
            private:
                dds_rpc_handle_t dds_Ntf_LostComFltSt_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Basc_LiSnsrInfo_skeleton_Ntf_LostComFltSt";
			public:
			    Basc_LiSnsrInfo_Ntf_LostComFltSt() {
			    }
			    ~Basc_LiSnsrInfo_Ntf_LostComFltSt() {
                }
                void send(const uint8_t &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Basc_LiSnsrInfo_Ntf_LostComFltSt_Hash;
					ntf_message._u.Car_Control_Basc_LiSnsrInfo_Ntf_LostComFltSt = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Ntf_LostComFltSt_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
	}
	extern void on_carControl_Basc_LiSnsrInfo_request_data_available(int32_t reader, void* arg);

	class Basc_LiSnsrInfo_service_interface {
	public:
	    virtual ~Basc_LiSnsrInfo_service_interface() = default;

		virtual uint8_t RR_LiSnsrThd(const uint8_t &LiSnsrThd) = 0;
		virtual uint8_t Get_SolarLe() = 0;
		virtual uint8_t Get_SolarRi() = 0;
		virtual uint8_t Get_LiSnsrMod() = 0;
		virtual uint8_t Get_LiSnsrLoBeamReq() = 0;
		virtual uint8_t Get_LiSnsrRunSt() = 0;
		virtual uint8_t Get_LiSnsrErrSt() = 0;
		virtual uint8_t Get_IRBri() = 0;
		virtual uint16_t Get_FWBri() = 0;
		virtual uint16_t Get_AMBBri() = 0;
		virtual uint16_t Get_HUDBri() = 0;
		virtual uint8_t Get_LostComFltSt() = 0;
	};
    class Basc_LiSnsrInfo_Skeleton :public Basc_LiSnsrInfo_service_interface, public IBaseWait,public IBaseSkeleton,public ConsumerMatchedStatusHandler{
		public:
			Basc_LiSnsrInfo_Skeleton(Basc_LiSnsrInfo_service_interface* service,std::string config="");
			bool init();
			void wait_client_online();
            const std::string get_service_name() {
				return this->service_name;
			}
			uint8_t RR_LiSnsrThd(const uint8_t &LiSnsrThd) {
				return this->_service->RR_LiSnsrThd(LiSnsrThd);
			}
			uint8_t Get_SolarLe() {
				return this->_service->Get_SolarLe();
			}
			uint8_t Get_SolarRi() {
				return this->_service->Get_SolarRi();
			}
			uint8_t Get_LiSnsrMod() {
				return this->_service->Get_LiSnsrMod();
			}
			uint8_t Get_LiSnsrLoBeamReq() {
				return this->_service->Get_LiSnsrLoBeamReq();
			}
			uint8_t Get_LiSnsrRunSt() {
				return this->_service->Get_LiSnsrRunSt();
			}
			uint8_t Get_LiSnsrErrSt() {
				return this->_service->Get_LiSnsrErrSt();
			}
			uint8_t Get_IRBri() {
				return this->_service->Get_IRBri();
			}
			uint16_t Get_FWBri() {
				return this->_service->Get_FWBri();
			}
			uint16_t Get_AMBBri() {
				return this->_service->Get_AMBBri();
			}
			uint16_t Get_HUDBri() {
				return this->_service->Get_HUDBri();
			}
			uint8_t Get_LostComFltSt() {
				return this->_service->Get_LostComFltSt();
			}
            dds_return_t send_reply(carControl_Car_Control_Reply* reply);
            events::Basc_LiSnsrInfo_Ntf_SolarLe Ntf_SolarLe;
            events::Basc_LiSnsrInfo_Ntf_SolarRi Ntf_SolarRi;
            events::Basc_LiSnsrInfo_Ntf_LiSnsrMod Ntf_LiSnsrMod;
            events::Basc_LiSnsrInfo_Ntf_LiSnsrLoBeamReq Ntf_LiSnsrLoBeamReq;
            events::Basc_LiSnsrInfo_Ntf_LiSnsrRunSt Ntf_LiSnsrRunSt;
            events::Basc_LiSnsrInfo_Ntf_LiSnsrErrSt Ntf_LiSnsrErrSt;
            events::Basc_LiSnsrInfo_Ntf_IRBri Ntf_IRBri;
            events::Basc_LiSnsrInfo_Ntf_FWBri Ntf_FWBri;
            events::Basc_LiSnsrInfo_Ntf_AMBBri Ntf_AMBBri;
            events::Basc_LiSnsrInfo_Ntf_HUDBri Ntf_HUDBri;
            events::Basc_LiSnsrInfo_Ntf_LostComFltSt Ntf_LostComFltSt;


		private:
		    std::string _config;
			const std::string service_name="Basc_LiSnsrInfo_skeleton";
			Basc_LiSnsrInfo_service_interface * _service;

			dds_rpc_handle_t dds_rpc_request_handle= { -1, -1, -1 };
			dds_rpc_handle_t dds_rpc_reply_handle= { -1, -1, -1 };
	};

}
}
}
}
}
#endif

