/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.1.4
  ServiceLatestModifyTime: 2023-10-23T18:21:16
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#ifndef Basc_ADASSecureSet_SKELETON_HPP
#define Basc_ADASSecureSet_SKELETON_HPP
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "changan/Basc_ADASSecureSet.h"
#include "changan/base_skeleton.hpp"
#include "changan/base_wait.hpp"
#include <iostream>
#include <string.h>
#include <mutex>
namespace com {
namespace changan {
namespace carDrive {
namespace C2Controller {
namespace skeleton {
	namespace events {
        class Basc_ADASSecureSet_Ntf_ADASSecureSet{
            private:
                dds_rpc_handle_t dds_Ntf_ADASSecureSet_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ADASSecureSet_skeleton_Ntf_ADASSecureSet";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carDrive_Basc_ADASSecureSet_Ntf_desc, &dds_Ntf_ADASSecureSet_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_ADASSecureSet_event_handle);
				}
				void send(const ADASSecureSet &data) {
					carDrive_Basc_ADASSecureSet_Ntf event_data;
					event_data.data._d = carDrive_Basc_ADASSecureSet_Ntf_ADASSecureSet_Hash;
					event_data.data._u.Basc_ADASSecureSet_Ntf_ADASSecureSet = data;
                    dds_write(dds_Ntf_ADASSecureSet_event_handle.writer, &event_data);
				}
        };
        class Basc_ADASSecureSet_Ntf_AD_RedLightRemindEnable{
            private:
                dds_rpc_handle_t dds_Ntf_AD_RedLightRemindEnable_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_ADASSecureSet_skeleton_Ntf_AD_RedLightRemindEnable";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carDrive_Basc_ADASSecureSet_Ntf_desc, &dds_Ntf_AD_RedLightRemindEnable_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_AD_RedLightRemindEnable_event_handle);
				}
				void send(const AD_RedLightReEnSet &data) {
					carDrive_Basc_ADASSecureSet_Ntf event_data;
					event_data.data._d = carDrive_Basc_ADASSecureSet_Ntf_AD_RedLightRemindEnable_Hash;
					event_data.data._u.Basc_ADASSecureSet_Ntf_AD_RedLightRemindEnable = data;
                    dds_write(dds_Ntf_AD_RedLightRemindEnable_event_handle.writer, &event_data);
				}
        };
	}
	extern void on_carDrive_Basc_ADASSecureSet_request_data_available(int32_t reader, void* arg);

	class Basc_ADASSecureSet_service_interface {
	public:
	    virtual ~Basc_ADASSecureSet_service_interface() = default;

		virtual ADASSecureSet Get_ADASSecureSet() = 0;
		virtual ResponseInfo RR_HU_ELKEnable(const HUset_ELKEnable &HUset_ELKEnable,const RequestInfo &Requestinfo) = 0;
		virtual ResponseInfo RR_HU_CESEnable(const HUset_CESEnable &HUset_CESEnable,const RequestInfo &Requestinfo) = 0;
		virtual ResponseInfo RR_HU_LASModeSelection(const HUset_LASModeSelection &HUset_LASModeSelection,const RequestInfo &Requestinfo) = 0;
		virtual ResponseInfo RR_HU_LASIntellgentModeSelection(const HUset_LASIntellgentModeSelection &HUset_LASIntellgentModeSelection,const RequestInfo &Requestinfo) = 0;
		virtual ResponseInfo RR_HU_LASWarningModeSelection(const HUset_LASWarningModeSelection &HUset_LASWarningModeSelection,const RequestInfo &Requestinfo) = 0;
		virtual ResponseInfo RR_HU_ForwardColliAstType(const HUset_ForwardColliAstType &HUset_ForwardColliAstType,const RequestInfo &Requestinfo) = 0;
		virtual ResponseInfo RR_HU_ForwardColliAstSenStyle(const HUset_ForwardColliAstSenStyle &HUset_ForwardColliAstSenStyle,const RequestInfo &Requestinfo) = 0;
		virtual ResponseInfo RR_HU_RearColliAstType(const HUset_RearColliAstType &HUset_RearColliAstType,const RequestInfo &Requestinfo) = 0;
		virtual ResponseInfo RR_HU_RedLightRemindEnable(const HUset_RedLightRemindEnable &HUset_RedLightRemindEnable,const RequestInfo &RequestInfo) = 0;
		virtual AD_RedLightReEnSet Get_AD_RedLightRemindEnable() = 0;
	};
    class Basc_ADASSecureSet_Skeleton :public Basc_ADASSecureSet_service_interface, public IBaseWait,public IBaseSkeleton,public ConsumerMatchedStatusHandler{
		public:
			Basc_ADASSecureSet_Skeleton(Basc_ADASSecureSet_service_interface* service,std::string config="");
			bool init();
			bool destroy();
			void wait_client_online();
            const std::string get_service_name() {
				return this->service_name;
			}
			ADASSecureSet Get_ADASSecureSet() {
				return this->_service->Get_ADASSecureSet();
			}
			ResponseInfo RR_HU_ELKEnable(const HUset_ELKEnable &HUset_ELKEnable,const RequestInfo &Requestinfo) {
				return this->_service->RR_HU_ELKEnable(HUset_ELKEnable,Requestinfo);
			}
			ResponseInfo RR_HU_CESEnable(const HUset_CESEnable &HUset_CESEnable,const RequestInfo &Requestinfo) {
				return this->_service->RR_HU_CESEnable(HUset_CESEnable,Requestinfo);
			}
			ResponseInfo RR_HU_LASModeSelection(const HUset_LASModeSelection &HUset_LASModeSelection,const RequestInfo &Requestinfo) {
				return this->_service->RR_HU_LASModeSelection(HUset_LASModeSelection,Requestinfo);
			}
			ResponseInfo RR_HU_LASIntellgentModeSelection(const HUset_LASIntellgentModeSelection &HUset_LASIntellgentModeSelection,const RequestInfo &Requestinfo) {
				return this->_service->RR_HU_LASIntellgentModeSelection(HUset_LASIntellgentModeSelection,Requestinfo);
			}
			ResponseInfo RR_HU_LASWarningModeSelection(const HUset_LASWarningModeSelection &HUset_LASWarningModeSelection,const RequestInfo &Requestinfo) {
				return this->_service->RR_HU_LASWarningModeSelection(HUset_LASWarningModeSelection,Requestinfo);
			}
			ResponseInfo RR_HU_ForwardColliAstType(const HUset_ForwardColliAstType &HUset_ForwardColliAstType,const RequestInfo &Requestinfo) {
				return this->_service->RR_HU_ForwardColliAstType(HUset_ForwardColliAstType,Requestinfo);
			}
			ResponseInfo RR_HU_ForwardColliAstSenStyle(const HUset_ForwardColliAstSenStyle &HUset_ForwardColliAstSenStyle,const RequestInfo &Requestinfo) {
				return this->_service->RR_HU_ForwardColliAstSenStyle(HUset_ForwardColliAstSenStyle,Requestinfo);
			}
			ResponseInfo RR_HU_RearColliAstType(const HUset_RearColliAstType &HUset_RearColliAstType,const RequestInfo &Requestinfo) {
				return this->_service->RR_HU_RearColliAstType(HUset_RearColliAstType,Requestinfo);
			}
			ResponseInfo RR_HU_RedLightRemindEnable(const HUset_RedLightRemindEnable &HUset_RedLightRemindEnable,const RequestInfo &RequestInfo) {
				return this->_service->RR_HU_RedLightRemindEnable(HUset_RedLightRemindEnable,RequestInfo);
			}
			AD_RedLightReEnSet Get_AD_RedLightRemindEnable() {
				return this->_service->Get_AD_RedLightRemindEnable();
			}
            dds_return_t send_reply(carDrive_Basc_ADASSecureSet_Reply* reply);
            events::Basc_ADASSecureSet_Ntf_ADASSecureSet Ntf_ADASSecureSet;
            events::Basc_ADASSecureSet_Ntf_AD_RedLightRemindEnable Ntf_AD_RedLightRemindEnable;

		private:
		    std::string _config;
			bool init_flag=false;
			std::mutex init_mutex;

			const std::string service_name="Basc_ADASSecureSet_skeleton";
			Basc_ADASSecureSet_service_interface * _service;
			dds_rpc_handle_t dds_rpc_request_handle= { -1, -1, -1 };
			dds_rpc_handle_t dds_rpc_reply_handle= { -1, -1, -1 };

	};

}
}
}
}
}
#endif

