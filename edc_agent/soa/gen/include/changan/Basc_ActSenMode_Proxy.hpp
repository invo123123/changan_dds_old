/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.1.6
  ServiceLatestModifyTime: 2023-10-07T15:03:14
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#ifndef Basc_ActSenMode_Proxy_HPP
#define Basc_ActSenMode_Proxy_HPP
#include <string.h>
#include <future>
#include <chrono>
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "dds/ddsrt/sync.h"
#include "changan/Basc_ActSenMode.h"
#include "changan/base_proxy.hpp"
#include "changan/base_wait.hpp"
#include "changan/dds_client.hpp"
#include <mutex>

namespace com {
namespace changan {
namespace carCabin {
namespace BasicService {
namespace proxy {
	namespace events {
        class Basc_ActSenMode_Ntf_ActSenMoSwitSt{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_ActSenMoSwitSt";
        };
        class Basc_ActSenMode_Ntf_ActSenFunEnSt{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_ActSenFunEnSt";
        };
        class Basc_ActSenMode_Ntf__ActSenMoInfoSet{
			public:
			    void set_receive_handler(const EventReceiveHandler<const SenMoInfoSet&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const SenMoInfoSet &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const SenMoInfoSet&>> handler_list;
			    std::string event_name="Ntf__ActSenMoInfoSet";
        };
        class Basc_ActSenMode_Ntf_UserNotiConfir{
			public:
			    void set_receive_handler(const EventReceiveHandler<const UserNotiConfirEvt&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const UserNotiConfirEvt &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const UserNotiConfirEvt&>> handler_list;
			    std::string event_name="Ntf_UserNotiConfir";
        };
        class Basc_ActSenMode_Ntf_ActSenTrig{
			public:
			    void set_receive_handler(const EventReceiveHandler<const TrigEvt&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const TrigEvt &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const TrigEvt&>> handler_list;
			    std::string event_name="Ntf_ActSenTrig";
        };
        class Basc_ActSenMode_Ntf_ActSenFunEn{
			public:
			    void set_receive_handler(const EventReceiveHandler<const FunEnEvt&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const FunEnEvt &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const FunEnEvt&>> handler_list;
			    std::string event_name="Ntf_ActSenFunEn";
        };
        class Basc_ActSenMode_Ntf_SdcardSenErrTrig{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_SdcardSenErrTrig";
        };
        class Basc_ActSenMode_Ntf_ActCampSwitSet{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_ActCampSwitSet";
        };
        class Basc_ActSenMode_Ntf_CampRangeSet{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_CampRangeSet";
        };
        class Basc_ActSenMode_Ntf_SenWarningSetSwitchEarly{
			public:
			    void set_receive_handler(const EventReceiveHandler<const SenWarningSet&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const SenWarningSet &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const SenWarningSet&>> handler_list;
			    std::string event_name="Ntf_SenWarningSetSwitchEarly";
        };
        class Basc_ActSenMode_Ntf_SenWarningSetSwitchCollision{
			public:
			    void set_receive_handler(const EventReceiveHandler<const SenWarningSet&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const SenWarningSet &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const SenWarningSet&>> handler_list;
			    std::string event_name="Ntf_SenWarningSetSwitchCollision";
        };
        class Basc_ActSenMode_Ntf_SenWarningSetSwitchTheft{
			public:
			    void set_receive_handler(const EventReceiveHandler<const SenWarningSet&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const SenWarningSet &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const SenWarningSet&>> handler_list;
			    std::string event_name="Ntf_SenWarningSetSwitchTheft";
        };
        class Basc_ActSenMode_Ntf_CampWarningSetSwitchS{
			public:
			    void set_receive_handler(const EventReceiveHandler<const CampWarningSet&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const CampWarningSet &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const CampWarningSet&>> handler_list;
			    std::string event_name="Ntf_CampWarningSetSwitchS";
        };
        class Basc_ActSenMode_Ntf_CampWarningSetSwitchM{
			public:
			    void set_receive_handler(const EventReceiveHandler<const CampWarningSet&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const CampWarningSet &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const CampWarningSet&>> handler_list;
			    std::string event_name="Ntf_CampWarningSetSwitchM";
        };
        class Basc_ActSenMode_Ntf_CampWarningSetSwitchL{
			public:
			    void set_receive_handler(const EventReceiveHandler<const CampWarningSet&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const CampWarningSet &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const CampWarningSet&>> handler_list;
			    std::string event_name="Ntf_CampWarningSetSwitchL";
        };
        class Basc_ActSenMode_Ntf_SenRecordCameraSet{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint32_t&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const uint32_t &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint32_t&>> handler_list;
			    std::string event_name="Ntf_SenRecordCameraSet";
        };
        class Basc_ActSenMode_Ntf_CampRecordCameraSet{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint32_t&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const uint32_t &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint32_t&>> handler_list;
			    std::string event_name="Ntf_CampRecordCameraSet";
        };
        class Basc_ActSenMode_Ntf_ActCampTrig{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_ActCampTrig";
        };
	}
	extern void on_carCabin_Basc_ActSenMode_reply_data_available(int32_t reader, void* arg);
	class Basc_ActSenMode_Proxy : IBaseProxy,IBaseWait, public ProviderMatchedStatusHandler, public dds_link_count{
		public:
		    static Basc_ActSenMode_Proxy& get_instance();
			bool init(std::string config="");
			void wait_server_online();
			bool destroy();
            events::Basc_ActSenMode_Ntf_ActSenMoSwitSt Ntf_ActSenMoSwitSt;
            events::Basc_ActSenMode_Ntf_ActSenFunEnSt Ntf_ActSenFunEnSt;
            events::Basc_ActSenMode_Ntf__ActSenMoInfoSet Ntf__ActSenMoInfoSet;
            events::Basc_ActSenMode_Ntf_UserNotiConfir Ntf_UserNotiConfir;
            events::Basc_ActSenMode_Ntf_ActSenTrig Ntf_ActSenTrig;
            events::Basc_ActSenMode_Ntf_ActSenFunEn Ntf_ActSenFunEn;
            events::Basc_ActSenMode_Ntf_SdcardSenErrTrig Ntf_SdcardSenErrTrig;
            events::Basc_ActSenMode_Ntf_ActCampSwitSet Ntf_ActCampSwitSet;
            events::Basc_ActSenMode_Ntf_CampRangeSet Ntf_CampRangeSet;
            events::Basc_ActSenMode_Ntf_SenWarningSetSwitchEarly Ntf_SenWarningSetSwitchEarly;
            events::Basc_ActSenMode_Ntf_SenWarningSetSwitchCollision Ntf_SenWarningSetSwitchCollision;
            events::Basc_ActSenMode_Ntf_SenWarningSetSwitchTheft Ntf_SenWarningSetSwitchTheft;
            events::Basc_ActSenMode_Ntf_CampWarningSetSwitchS Ntf_CampWarningSetSwitchS;
            events::Basc_ActSenMode_Ntf_CampWarningSetSwitchM Ntf_CampWarningSetSwitchM;
            events::Basc_ActSenMode_Ntf_CampWarningSetSwitchL Ntf_CampWarningSetSwitchL;
            events::Basc_ActSenMode_Ntf_SenRecordCameraSet Ntf_SenRecordCameraSet;
            events::Basc_ActSenMode_Ntf_CampRecordCameraSet Ntf_CampRecordCameraSet;
            events::Basc_ActSenMode_Ntf_ActCampTrig Ntf_ActCampTrig;
			DDS_GuidPrefix_t guid;
			Msg<SwitSetResult> RR_ActSenMoSwitSet(const SentrySwitchParam &sentrySwitchParam) {
				return this->RR_ActSenMoSwitSet<DEFAULT_TIMEOUT>(sentrySwitchParam);
			}
			template<size_t TIMEOUT>
			Msg<SwitSetResult> RR_ActSenMoSwitSet(const SentrySwitchParam &sentrySwitchParam) {
				return this->RR_ActSenMoSwitSet(sentrySwitchParam, TIMEOUT);
			}
			Msg<InfoSetResult> RR_ActSenMoInfoSet(const SenMoInfoSet &SenMoInfoSet) {
				return this->RR_ActSenMoInfoSet<DEFAULT_TIMEOUT>(SenMoInfoSet);
			}
			template<size_t TIMEOUT>
			Msg<InfoSetResult> RR_ActSenMoInfoSet(const SenMoInfoSet &SenMoInfoSet) {
				return this->RR_ActSenMoInfoSet(SenMoInfoSet, TIMEOUT);
			}
			Msg<uint8_t> Get__ActSenMoSwitSt() {
				return this->Get__ActSenMoSwitSt<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> Get__ActSenMoSwitSt() {
				return this->Get__ActSenMoSwitSt( TIMEOUT);
			}
			Msg<uint8_t> Get_ActSenFunEnSt() {
				return this->Get_ActSenFunEnSt<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> Get_ActSenFunEnSt() {
				return this->Get_ActSenFunEnSt( TIMEOUT);
			}
			Msg<SenMoInfoSet> Get__ActSenMoInfoSet() {
				return this->Get__ActSenMoInfoSet<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<SenMoInfoSet> Get__ActSenMoInfoSet() {
				return this->Get__ActSenMoInfoSet( TIMEOUT);
			}
			Msg<SwitSetResult> RR_ActSenWarningSet(const SenWarningSet &SenWarningSet) {
				return this->RR_ActSenWarningSet<DEFAULT_TIMEOUT>(SenWarningSet);
			}
			template<size_t TIMEOUT>
			Msg<SwitSetResult> RR_ActSenWarningSet(const SenWarningSet &SenWarningSet) {
				return this->RR_ActSenWarningSet(SenWarningSet, TIMEOUT);
			}
			Msg<SwitSetResult> RR_ActCampSwitSet(const SentrySwitchParam &campSwitchParam) {
				return this->RR_ActCampSwitSet<DEFAULT_TIMEOUT>(campSwitchParam);
			}
			template<size_t TIMEOUT>
			Msg<SwitSetResult> RR_ActCampSwitSet(const SentrySwitchParam &campSwitchParam) {
				return this->RR_ActCampSwitSet(campSwitchParam, TIMEOUT);
			}
			Msg<SwitSetResult> RR_ActCampWarningSet(const CampWarningSet &CampWarningSet) {
				return this->RR_ActCampWarningSet<DEFAULT_TIMEOUT>(CampWarningSet);
			}
			template<size_t TIMEOUT>
			Msg<SwitSetResult> RR_ActCampWarningSet(const CampWarningSet &CampWarningSet) {
				return this->RR_ActCampWarningSet(CampWarningSet, TIMEOUT);
			}
			Msg<SwitSetResult> RR_ActCampRangeSet(const uint8_t &CampRangeSet) {
				return this->RR_ActCampRangeSet<DEFAULT_TIMEOUT>(CampRangeSet);
			}
			template<size_t TIMEOUT>
			Msg<SwitSetResult> RR_ActCampRangeSet(const uint8_t &CampRangeSet) {
				return this->RR_ActCampRangeSet(CampRangeSet, TIMEOUT);
			}
			Msg<uint8_t> Get_ActCampSwitSet() {
				return this->Get_ActCampSwitSet<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> Get_ActCampSwitSet() {
				return this->Get_ActCampSwitSet( TIMEOUT);
			}
			Msg<uint8_t> RR_SenRecordCameraSet(const uint32_t &camera) {
				return this->RR_SenRecordCameraSet<DEFAULT_TIMEOUT>(camera);
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> RR_SenRecordCameraSet(const uint32_t &camera) {
				return this->RR_SenRecordCameraSet(camera, TIMEOUT);
			}
			Msg<uint8_t> RR_CampRecordCameraSet(const uint32_t &camera) {
				return this->RR_CampRecordCameraSet<DEFAULT_TIMEOUT>(camera);
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> RR_CampRecordCameraSet(const uint32_t &camera) {
				return this->RR_CampRecordCameraSet(camera, TIMEOUT);
			}
			const std::string get_service_name() {
				return this->service_name;
			}

		private:
		    const std::string service_name = "Basc_ActSenMode_skeleton";
			Msg<SwitSetResult> RR_ActSenMoSwitSet(const SentrySwitchParam &sentrySwitchParam, size_t dds_rpc_time_out);
			Msg<InfoSetResult> RR_ActSenMoInfoSet(const SenMoInfoSet &SenMoInfoSet, size_t dds_rpc_time_out);
			Msg<uint8_t> Get__ActSenMoSwitSt( size_t dds_rpc_time_out);
			Msg<uint8_t> Get_ActSenFunEnSt( size_t dds_rpc_time_out);
			Msg<SenMoInfoSet> Get__ActSenMoInfoSet( size_t dds_rpc_time_out);
			Msg<SwitSetResult> RR_ActSenWarningSet(const SenWarningSet &SenWarningSet, size_t dds_rpc_time_out);
			Msg<SwitSetResult> RR_ActCampSwitSet(const SentrySwitchParam &campSwitchParam, size_t dds_rpc_time_out);
			Msg<SwitSetResult> RR_ActCampWarningSet(const CampWarningSet &CampWarningSet, size_t dds_rpc_time_out);
			Msg<SwitSetResult> RR_ActCampRangeSet(const uint8_t &CampRangeSet, size_t dds_rpc_time_out);
			Msg<uint8_t> Get_ActCampSwitSet( size_t dds_rpc_time_out);
			Msg<uint8_t> RR_SenRecordCameraSet(const uint32_t &camera, size_t dds_rpc_time_out);
			Msg<uint8_t> RR_CampRecordCameraSet(const uint32_t &camera, size_t dds_rpc_time_out);

			dds_rpc_handle_t dds_rpc_request_handle = {-1,-1,-1};
			dds_rpc_handle_t dds_rpc_reply_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_ActSenMoSwitSt_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_ActSenFunEnSt_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf__ActSenMoInfoSet_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_UserNotiConfir_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_ActSenTrig_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_ActSenFunEn_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_SdcardSenErrTrig_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_ActCampSwitSet_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_CampRangeSet_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_SenWarningSetSwitchEarly_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_SenWarningSetSwitchCollision_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_SenWarningSetSwitchTheft_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_CampWarningSetSwitchS_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_CampWarningSetSwitchM_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_CampWarningSetSwitchL_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_SenRecordCameraSet_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_CampRecordCameraSet_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_ActCampTrig_handle = { -1,-1,-1 };

            bool init_flag = false;
            std::mutex init_mutex;

			Basc_ActSenMode_Proxy();
			~Basc_ActSenMode_Proxy();

			Basc_ActSenMode_Proxy(const Basc_ActSenMode_Proxy& signal);

			const Basc_ActSenMode_Proxy& operator=(const Basc_ActSenMode_Proxy& signal);
	};
}
}
}
}
}
#endif

