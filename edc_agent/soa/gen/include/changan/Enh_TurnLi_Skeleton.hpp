/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  ServiceVersion: V2.0
  CmVersion： v2.0.3
  ServiceLatestModifyTime: 2023-05-15T19:13:51
  Generate Time: 2023-12-11 18:07:58
*****************************************************************/
#ifndef Enh_TurnLi_SKELETON_HPP
#define Enh_TurnLi_SKELETON_HPP
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "changan/string_util.hpp"
#include "changan/base_skeleton.hpp"
#include "changan/base_wait.hpp"
#include <iostream>
#include <string.h>
#include "changan/Car_Control_fl_Skeleton.hpp"
#include "changan/Car_Control.h"
#include <mutex>
namespace com {
namespace changan {
namespace carControl {
namespace ExteriorLight {
namespace skeleton {
	namespace events {
		using CarControlFLSkeleton = com::changan::carControl::skeleton::CarControlFLSkeleton;
        class Enh_TurnLi_Ntf_LoglCtrlSt{
            private:
                dds_rpc_handle_t dds_Ntf_LoglCtrlSt_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Enh_TurnLi_skeleton_Ntf_LoglCtrlSt";
			public:
			    Enh_TurnLi_Ntf_LoglCtrlSt() {
			    }
			    ~Enh_TurnLi_Ntf_LoglCtrlSt() {
                }
                void send(const TurnLiSt &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Enh_TurnLi_Ntf_LoglCtrlSt_Hash;
					ntf_message._u.Car_Control_Enh_TurnLi_Ntf_LoglCtrlSt = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Enh_TurnLi_Ntf_LoglCtrlSt_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Enh_TurnLi_Ntf_SrvOperInfo{
            private:
                dds_rpc_handle_t dds_Ntf_SrvOperInfo_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Enh_TurnLi_skeleton_Ntf_SrvOperInfo";
			public:
			    Enh_TurnLi_Ntf_SrvOperInfo() {
			    }
			    ~Enh_TurnLi_Ntf_SrvOperInfo() {
                }
                void send(const OperationInfo &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Enh_TurnLi_Ntf_SrvOperInfo_Hash;
					ntf_message._u.Car_Control_Enh_TurnLi_Ntf_SrvOperInfo = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Enh_TurnLi_Ntf_SrvOperInfo_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Enh_TurnLi_Ntf_SrvRespSt{
            private:
                dds_rpc_handle_t dds_Ntf_SrvRespSt_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Enh_TurnLi_skeleton_Ntf_SrvRespSt";
			public:
			    Enh_TurnLi_Ntf_SrvRespSt() {
			    }
			    ~Enh_TurnLi_Ntf_SrvRespSt() {
                }
                void send(const TurnLiCtrlCmd &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Enh_TurnLi_Ntf_SrvRespSt_Hash;
					ntf_message._u.Car_Control_Enh_TurnLi_Ntf_SrvRespSt = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Enh_TurnLi_Ntf_SrvRespSt_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Enh_TurnLi_Ntf_TurnLiFltMonrSt{
            private:
                dds_rpc_handle_t dds_Ntf_TurnLiFltMonrSt_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Enh_TurnLi_skeleton_Ntf_TurnLiFltMonrSt";
			public:
			    Enh_TurnLi_Ntf_TurnLiFltMonrSt() {
			    }
			    ~Enh_TurnLi_Ntf_TurnLiFltMonrSt() {
                }
                void send(const TurnLiFltMonrSt &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Enh_TurnLi_Ntf_TurnLiFltMonrSt_Hash;
					ntf_message._u.Car_Control_Enh_TurnLi_Ntf_TurnLiFltMonrSt = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Enh_TurnLi_Ntf_TurnLiFltMonrSt_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
        class Enh_TurnLi_Ntf_OperationCode{
            private:
                dds_rpc_handle_t dds_Ntf_OperationCode_event_handle = { -1, -1, -1 };
                std::string _topic_name = "Enh_TurnLi_skeleton_Ntf_OperationCode";
			public:
			    Enh_TurnLi_Ntf_OperationCode() {
			    }
			    ~Enh_TurnLi_Ntf_OperationCode() {
                }
                void send(const OperationCode &data){
                    carControl_Car_Control_Ntf * notify = carControl_Car_Control_Ntf__alloc();
					carControl_Car_Control_Ntf_Message  ntf_message;
					ntf_message._d = carControl_Car_Control_Enh_TurnLi_Ntf_OperationCode_Hash;
					ntf_message._u.Car_Control_Enh_TurnLi_Ntf_OperationCode = data;
					notify->data = ntf_message;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send(notify);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send, hashId=[%d], rc=[%d]", carControl_Car_Control_Enh_TurnLi_Ntf_OperationCode_Hash, rc);
					carControl_Car_Control_Ntf_free(notify, DDS_FREE_ALL);
				}
        };
	}
	extern void on_carControl_Enh_TurnLi_request_data_available(int32_t reader, void* arg);

	class Enh_TurnLi_service_interface {
	public:
	    virtual ~Enh_TurnLi_service_interface() = default;

		virtual TurnLiSt Get_LoglCtrlSt() = 0;
		virtual OperationInfo Get_SrvOperInfo() = 0;
		virtual TurnLiCtrlCmd Get_SrvRespSt() = 0;
		virtual TurnLiFltMonrSt Get_TurnLiFltMonrSt() = 0;
		virtual ResponseInfo RR_TurnOFF(const TurnLiCtrlCmd &TurnLiCtrlCmd,const RequestInfo &RequestInfo) = 0;
		virtual ResponseInfo RR_TurnON(const TurnLiCtrlCmd &TurnLiCtrlCmd,const RequestInfo &RequestInfo) = 0;
	};
    class Enh_TurnLi_Skeleton :public Enh_TurnLi_service_interface, public IBaseWait,public IBaseSkeleton,public ConsumerMatchedStatusHandler{
		public:
			Enh_TurnLi_Skeleton(Enh_TurnLi_service_interface* service,std::string config="");
			bool init();
			void wait_client_online();
            const std::string get_service_name() {
				return this->service_name;
			}
			TurnLiSt Get_LoglCtrlSt() {
				return this->_service->Get_LoglCtrlSt();
			}
			OperationInfo Get_SrvOperInfo() {
				return this->_service->Get_SrvOperInfo();
			}
			TurnLiCtrlCmd Get_SrvRespSt() {
				return this->_service->Get_SrvRespSt();
			}
			TurnLiFltMonrSt Get_TurnLiFltMonrSt() {
				return this->_service->Get_TurnLiFltMonrSt();
			}
			ResponseInfo RR_TurnOFF(const TurnLiCtrlCmd &TurnLiCtrlCmd,const RequestInfo &RequestInfo) {
				return this->_service->RR_TurnOFF(TurnLiCtrlCmd,RequestInfo);
			}
			ResponseInfo RR_TurnON(const TurnLiCtrlCmd &TurnLiCtrlCmd,const RequestInfo &RequestInfo) {
				return this->_service->RR_TurnON(TurnLiCtrlCmd,RequestInfo);
			}
            dds_return_t send_reply(carControl_Car_Control_Reply* reply);
            events::Enh_TurnLi_Ntf_LoglCtrlSt Ntf_LoglCtrlSt;
            events::Enh_TurnLi_Ntf_SrvOperInfo Ntf_SrvOperInfo;
            events::Enh_TurnLi_Ntf_SrvRespSt Ntf_SrvRespSt;
            events::Enh_TurnLi_Ntf_TurnLiFltMonrSt Ntf_TurnLiFltMonrSt;
            events::Enh_TurnLi_Ntf_OperationCode Ntf_OperationCode;


		private:
		    std::string _config;
			const std::string service_name="Enh_TurnLi_skeleton";
			Enh_TurnLi_service_interface * _service;

			dds_rpc_handle_t dds_rpc_request_handle= { -1, -1, -1 };
			dds_rpc_handle_t dds_rpc_reply_handle= { -1, -1, -1 };
	};

}
}
}
}
}
#endif

