/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  ServiceVersion: V3.0
  CmVersion： v2.0.3
  ServiceLatestModifyTime: 2023-09-12T15:21:18
  Generate Time: 2023-12-11 18:07:58
*****************************************************************/
#ifndef Basc_ExtrLiActCtrlInfo_Proxy_HPP
#define Basc_ExtrLiActCtrlInfo_Proxy_HPP
#include <string.h>
#include <future>
#include <chrono>
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "dds/ddsrt/sync.h"
#include "changan/base_proxy.hpp"
#include "changan/base_wait.hpp"
#include "changan/dds_client.hpp"
#include <mutex>
#include "changan/Car_Control.h"
namespace com {
namespace changan {
namespace carControl {
namespace ExteriorLight {
namespace proxy {
	namespace events {
        class Basc_ExtrLiActCtrlInfo_Ntf_PosnLiInfo{
			public:
				void set_receive_handler(const EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_PosnLiInfo_PosnLiActCtrlInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_PosnLiInfo_PosnLiActCtrlInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_PosnLiInfo_PosnLiActCtrlInfo&>> handler_list;
			    std::string event_name="Ntf_PosnLiInfo";
        };
        class Basc_ExtrLiActCtrlInfo_Ntf_LoBeamInfo{
			public:
				void set_receive_handler(const EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_LoBeamInfo_LoBeamActCtrlInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_LoBeamInfo_LoBeamActCtrlInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_LoBeamInfo_LoBeamActCtrlInfo&>> handler_list;
			    std::string event_name="Ntf_LoBeamInfo";
        };
        class Basc_ExtrLiActCtrlInfo_Ntf_HiBeamInfo{
			public:
				void set_receive_handler(const EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_HiBeamInfo_HiBeamActCtrlInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_HiBeamInfo_HiBeamActCtrlInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_HiBeamInfo_HiBeamActCtrlInfo&>> handler_list;
			    std::string event_name="Ntf_HiBeamInfo";
        };
        class Basc_ExtrLiActCtrlInfo_Ntf_RvsLiInfo{
			public:
			    void set_receive_handler(const EventReceiveHandler<const RvsLiActCtrlInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const RvsLiActCtrlInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const RvsLiActCtrlInfo&>> handler_list;
			    std::string event_name="Ntf_RvsLiInfo";
        };
        class Basc_ExtrLiActCtrlInfo_Ntf_DRLInfo{
			public:
			    void set_receive_handler(const EventReceiveHandler<const DRLActCtrlInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const DRLActCtrlInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const DRLActCtrlInfo&>> handler_list;
			    std::string event_name="Ntf_DRLInfo";
        };
        class Basc_ExtrLiActCtrlInfo_Ntf_BrkLiInfo{
			public:
				void set_receive_handler(const EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_BrkLiInfo_BrkLiActCtrlInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_BrkLiInfo_BrkLiActCtrlInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_BrkLiInfo_BrkLiActCtrlInfo&>> handler_list;
			    std::string event_name="Ntf_BrkLiInfo";
        };
        class Basc_ExtrLiActCtrlInfo_Ntf_TurnLiInfo{
			public:
				void set_receive_handler(const EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_TurnLiInfo_TurnLiActCtrlInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_TurnLiInfo_TurnLiActCtrlInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const carControl_Secure_Car_Control_Basc_ExtrLiActCtrlInfo_Ntf_TurnLiInfo_TurnLiActCtrlInfo&>> handler_list;
			    std::string event_name="Ntf_TurnLiInfo";
        };
        class Basc_ExtrLiActCtrlInfo_Ntf_FogInfo{
			public:
			    void set_receive_handler(const EventReceiveHandler<const FogActCtrlInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const FogActCtrlInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const FogActCtrlInfo&>> handler_list;
			    std::string event_name="Ntf_FogInfo";
        };
        class Basc_ExtrLiActCtrlInfo_Ntf_ThrLiInfo{
			public:
			    void set_receive_handler(const EventReceiveHandler<const ThrLiActCtrlInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const ThrLiActCtrlInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const ThrLiActCtrlInfo&>> handler_list;
			    std::string event_name="Ntf_ThrLiInfo";
        };
        class Basc_ExtrLiActCtrlInfo_Ntf_LogoInfo{
			public:
			    void set_receive_handler(const EventReceiveHandler<const LogoActCtrlInfo&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const LogoActCtrlInfo &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const LogoActCtrlInfo&>> handler_list;
			    std::string event_name="Ntf_LogoInfo";
        };
        class Basc_ExtrLiActCtrlInfo_Ntf_LicenseInfo{
			public:
			    void set_receive_handler(const EventReceiveHandler<const uint8_t&> &handler) {
					handler_list.push_back(handler);
				};
				void clear_receive_handler()
			    {
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			    }
				void trigger(const uint8_t &data){
				  if(!handler_list.empty())
				  {
				  	 for(auto it :handler_list)
				  	 {
				  	 	it(data);
				  	 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const uint8_t&>> handler_list;
			    std::string event_name="Ntf_LicenseInfo";
        };
	}
	extern void on_carControl_Basc_ExtrLiActCtrlInfo_reply_data_available(int32_t reader, void* arg);
	class Basc_ExtrLiActCtrlInfo_Proxy : IBaseProxy,IBaseWait, public ProviderMatchedStatusHandler{
		public:
		    static Basc_ExtrLiActCtrlInfo_Proxy& get_instance();
			bool init(std::string config="");
			void wait_server_online();
			bool uninit();
			bool is_init();
            events::Basc_ExtrLiActCtrlInfo_Ntf_PosnLiInfo Ntf_PosnLiInfo;
            events::Basc_ExtrLiActCtrlInfo_Ntf_LoBeamInfo Ntf_LoBeamInfo;
            events::Basc_ExtrLiActCtrlInfo_Ntf_HiBeamInfo Ntf_HiBeamInfo;
            events::Basc_ExtrLiActCtrlInfo_Ntf_RvsLiInfo Ntf_RvsLiInfo;
            events::Basc_ExtrLiActCtrlInfo_Ntf_DRLInfo Ntf_DRLInfo;
            events::Basc_ExtrLiActCtrlInfo_Ntf_BrkLiInfo Ntf_BrkLiInfo;
            events::Basc_ExtrLiActCtrlInfo_Ntf_TurnLiInfo Ntf_TurnLiInfo;
            events::Basc_ExtrLiActCtrlInfo_Ntf_FogInfo Ntf_FogInfo;
            events::Basc_ExtrLiActCtrlInfo_Ntf_ThrLiInfo Ntf_ThrLiInfo;
            events::Basc_ExtrLiActCtrlInfo_Ntf_LogoInfo Ntf_LogoInfo;
            events::Basc_ExtrLiActCtrlInfo_Ntf_LicenseInfo Ntf_LicenseInfo;
			DDS_GuidPrefix_t guid;
			Msg<PosnLiActCtrlInfo> Get_PosnLiInfo() {
				return this->Get_PosnLiInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<PosnLiActCtrlInfo> Get_PosnLiInfo() {
				return this->Get_PosnLiInfo( TIMEOUT);
			}
			Msg<LoBeamActCtrlInfo> Get_LoBeamInfo() {
				return this->Get_LoBeamInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<LoBeamActCtrlInfo> Get_LoBeamInfo() {
				return this->Get_LoBeamInfo( TIMEOUT);
			}
			Msg<HiBeamActCtrlInfo> Get_HiBeamInfo() {
				return this->Get_HiBeamInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<HiBeamActCtrlInfo> Get_HiBeamInfo() {
				return this->Get_HiBeamInfo( TIMEOUT);
			}
			Msg<RvsLiActCtrlInfo> Get_RvsLiInfo() {
				return this->Get_RvsLiInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<RvsLiActCtrlInfo> Get_RvsLiInfo() {
				return this->Get_RvsLiInfo( TIMEOUT);
			}
			Msg<DRLActCtrlInfo> Get_DRLInfo() {
				return this->Get_DRLInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<DRLActCtrlInfo> Get_DRLInfo() {
				return this->Get_DRLInfo( TIMEOUT);
			}
			Msg<BrkLiActCtrlInfo> Get_BrkLiInfo() {
				return this->Get_BrkLiInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<BrkLiActCtrlInfo> Get_BrkLiInfo() {
				return this->Get_BrkLiInfo( TIMEOUT);
			}
			Msg<TurnLiActCtrlInfo> Get_TurnLiInfo() {
				return this->Get_TurnLiInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<TurnLiActCtrlInfo> Get_TurnLiInfo() {
				return this->Get_TurnLiInfo( TIMEOUT);
			}
			Msg<FogActCtrlInfo> Get_FogInfo() {
				return this->Get_FogInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<FogActCtrlInfo> Get_FogInfo() {
				return this->Get_FogInfo( TIMEOUT);
			}
			Msg<ThrLiActCtrlInfo> Get_ThrLiInfo() {
				return this->Get_ThrLiInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<ThrLiActCtrlInfo> Get_ThrLiInfo() {
				return this->Get_ThrLiInfo( TIMEOUT);
			}
			Msg<LogoActCtrlInfo> Get_LogoInfo() {
				return this->Get_LogoInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<LogoActCtrlInfo> Get_LogoInfo() {
				return this->Get_LogoInfo( TIMEOUT);
			}
			Msg<uint8_t> Get_LicenseInfo() {
				return this->Get_LicenseInfo<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<uint8_t> Get_LicenseInfo() {
				return this->Get_LicenseInfo( TIMEOUT);
			}
			const std::string get_service_name() {
				return this->service_name;
			};
			uint16_t get_service_id(){
				return this->service_id;
			}

		private:
		    const std::string service_name = "Basc_ExtrLiActCtrlInfo_skeleton";
			Msg<PosnLiActCtrlInfo> Get_PosnLiInfo( size_t dds_rpc_time_out);
			Msg<LoBeamActCtrlInfo> Get_LoBeamInfo( size_t dds_rpc_time_out);
			Msg<HiBeamActCtrlInfo> Get_HiBeamInfo( size_t dds_rpc_time_out);
			Msg<RvsLiActCtrlInfo> Get_RvsLiInfo( size_t dds_rpc_time_out);
			Msg<DRLActCtrlInfo> Get_DRLInfo( size_t dds_rpc_time_out);
			Msg<BrkLiActCtrlInfo> Get_BrkLiInfo( size_t dds_rpc_time_out);
			Msg<TurnLiActCtrlInfo> Get_TurnLiInfo( size_t dds_rpc_time_out);
			Msg<FogActCtrlInfo> Get_FogInfo( size_t dds_rpc_time_out);
			Msg<ThrLiActCtrlInfo> Get_ThrLiInfo( size_t dds_rpc_time_out);
			Msg<LogoActCtrlInfo> Get_LogoInfo( size_t dds_rpc_time_out);
			Msg<uint8_t> Get_LicenseInfo( size_t dds_rpc_time_out);

			dds_rpc_handle_t dds_rpc_request_handle = {-1,-1,-1};
			dds_rpc_handle_t dds_rpc_reply_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_PosnLiInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_LoBeamInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_HiBeamInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_RvsLiInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_DRLInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_BrkLiInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_TurnLiInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_FogInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_ThrLiInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_LogoInfo_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_LicenseInfo_handle = { -1,-1,-1 };
            bool init_flag = false;
            std::mutex init_mutex;
			const uint16_t service_id = 1534;

			Basc_ExtrLiActCtrlInfo_Proxy();
			~Basc_ExtrLiActCtrlInfo_Proxy();

			Basc_ExtrLiActCtrlInfo_Proxy(const Basc_ExtrLiActCtrlInfo_Proxy& signal);

			const Basc_ExtrLiActCtrlInfo_Proxy& operator=(const Basc_ExtrLiActCtrlInfo_Proxy& signal);
	};
}
}
}
}
}
#endif

