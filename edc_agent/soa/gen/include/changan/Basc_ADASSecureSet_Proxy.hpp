/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.1.4
  ServiceLatestModifyTime: 2023-10-23T18:21:16
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#ifndef Basc_ADASSecureSet_Proxy_HPP
#define Basc_ADASSecureSet_Proxy_HPP
#include <string.h>
#include <future>
#include <chrono>
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "dds/ddsrt/sync.h"
#include "changan/Basc_ADASSecureSet.h"
#include "changan/base_proxy.hpp"
#include "changan/base_wait.hpp"
#include "changan/dds_client.hpp"
#include <mutex>

namespace com {
namespace changan {
namespace carDrive {
namespace C2Controller {
namespace proxy {
	namespace events {
        class Basc_ADASSecureSet_Ntf_ADASSecureSet{
			public:
			    void set_receive_handler(const EventReceiveHandler<const ADASSecureSet&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const ADASSecureSet &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const ADASSecureSet&>> handler_list;
			    std::string event_name="Ntf_ADASSecureSet";
        };
        class Basc_ADASSecureSet_Ntf_AD_RedLightRemindEnable{
			public:
			    void set_receive_handler(const EventReceiveHandler<const AD_RedLightReEnSet&> &handler) {
					handler_list.push_back(handler);
				};
			    void clear_receive_handler()
			  	{
				  if(!handler_list.empty())
				  {
				  	handler_list.clear();
				  }
			  	}
				void trigger(const AD_RedLightReEnSet &data){
				  if(!handler_list.empty())
				  {
					 for(auto it :handler_list)
					 {
						it(data);
					 }
				  }
				};
				std::string get_name() {
					return this->event_name;
				}
			private:
				std::list<EventReceiveHandler<const AD_RedLightReEnSet&>> handler_list;
			    std::string event_name="Ntf_AD_RedLightRemindEnable";
        };
	}
	extern void on_carDrive_Basc_ADASSecureSet_reply_data_available(int32_t reader, void* arg);
	class Basc_ADASSecureSet_Proxy : IBaseProxy,IBaseWait, public ProviderMatchedStatusHandler, public dds_link_count{
		public:
		    static Basc_ADASSecureSet_Proxy& get_instance();
			bool init(std::string config="");
			void wait_server_online();
			bool destroy();
            events::Basc_ADASSecureSet_Ntf_ADASSecureSet Ntf_ADASSecureSet;
            events::Basc_ADASSecureSet_Ntf_AD_RedLightRemindEnable Ntf_AD_RedLightRemindEnable;
			DDS_GuidPrefix_t guid;
			Msg<ADASSecureSet> Get_ADASSecureSet() {
				return this->Get_ADASSecureSet<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<ADASSecureSet> Get_ADASSecureSet() {
				return this->Get_ADASSecureSet( TIMEOUT);
			}
			Msg<ResponseInfo> RR_HU_ELKEnable(const HUset_ELKEnable &HUset_ELKEnable,const RequestInfo &Requestinfo) {
				return this->RR_HU_ELKEnable<DEFAULT_TIMEOUT>(HUset_ELKEnable,Requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_ELKEnable(const HUset_ELKEnable &HUset_ELKEnable,const RequestInfo &Requestinfo) {
				return this->RR_HU_ELKEnable(HUset_ELKEnable,Requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_HU_CESEnable(const HUset_CESEnable &HUset_CESEnable,const RequestInfo &Requestinfo) {
				return this->RR_HU_CESEnable<DEFAULT_TIMEOUT>(HUset_CESEnable,Requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_CESEnable(const HUset_CESEnable &HUset_CESEnable,const RequestInfo &Requestinfo) {
				return this->RR_HU_CESEnable(HUset_CESEnable,Requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_HU_LASModeSelection(const HUset_LASModeSelection &HUset_LASModeSelection,const RequestInfo &Requestinfo) {
				return this->RR_HU_LASModeSelection<DEFAULT_TIMEOUT>(HUset_LASModeSelection,Requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_LASModeSelection(const HUset_LASModeSelection &HUset_LASModeSelection,const RequestInfo &Requestinfo) {
				return this->RR_HU_LASModeSelection(HUset_LASModeSelection,Requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_HU_LASIntellgentModeSelection(const HUset_LASIntellgentModeSelection &HUset_LASIntellgentModeSelection,const RequestInfo &Requestinfo) {
				return this->RR_HU_LASIntellgentModeSelection<DEFAULT_TIMEOUT>(HUset_LASIntellgentModeSelection,Requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_LASIntellgentModeSelection(const HUset_LASIntellgentModeSelection &HUset_LASIntellgentModeSelection,const RequestInfo &Requestinfo) {
				return this->RR_HU_LASIntellgentModeSelection(HUset_LASIntellgentModeSelection,Requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_HU_LASWarningModeSelection(const HUset_LASWarningModeSelection &HUset_LASWarningModeSelection,const RequestInfo &Requestinfo) {
				return this->RR_HU_LASWarningModeSelection<DEFAULT_TIMEOUT>(HUset_LASWarningModeSelection,Requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_LASWarningModeSelection(const HUset_LASWarningModeSelection &HUset_LASWarningModeSelection,const RequestInfo &Requestinfo) {
				return this->RR_HU_LASWarningModeSelection(HUset_LASWarningModeSelection,Requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_HU_ForwardColliAstType(const HUset_ForwardColliAstType &HUset_ForwardColliAstType,const RequestInfo &Requestinfo) {
				return this->RR_HU_ForwardColliAstType<DEFAULT_TIMEOUT>(HUset_ForwardColliAstType,Requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_ForwardColliAstType(const HUset_ForwardColliAstType &HUset_ForwardColliAstType,const RequestInfo &Requestinfo) {
				return this->RR_HU_ForwardColliAstType(HUset_ForwardColliAstType,Requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_HU_ForwardColliAstSenStyle(const HUset_ForwardColliAstSenStyle &HUset_ForwardColliAstSenStyle,const RequestInfo &Requestinfo) {
				return this->RR_HU_ForwardColliAstSenStyle<DEFAULT_TIMEOUT>(HUset_ForwardColliAstSenStyle,Requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_ForwardColliAstSenStyle(const HUset_ForwardColliAstSenStyle &HUset_ForwardColliAstSenStyle,const RequestInfo &Requestinfo) {
				return this->RR_HU_ForwardColliAstSenStyle(HUset_ForwardColliAstSenStyle,Requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_HU_RearColliAstType(const HUset_RearColliAstType &HUset_RearColliAstType,const RequestInfo &Requestinfo) {
				return this->RR_HU_RearColliAstType<DEFAULT_TIMEOUT>(HUset_RearColliAstType,Requestinfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_RearColliAstType(const HUset_RearColliAstType &HUset_RearColliAstType,const RequestInfo &Requestinfo) {
				return this->RR_HU_RearColliAstType(HUset_RearColliAstType,Requestinfo, TIMEOUT);
			}
			Msg<ResponseInfo> RR_HU_RedLightRemindEnable(const HUset_RedLightRemindEnable &HUset_RedLightRemindEnable,const RequestInfo &RequestInfo) {
				return this->RR_HU_RedLightRemindEnable<DEFAULT_TIMEOUT>(HUset_RedLightRemindEnable,RequestInfo);
			}
			template<size_t TIMEOUT>
			Msg<ResponseInfo> RR_HU_RedLightRemindEnable(const HUset_RedLightRemindEnable &HUset_RedLightRemindEnable,const RequestInfo &RequestInfo) {
				return this->RR_HU_RedLightRemindEnable(HUset_RedLightRemindEnable,RequestInfo, TIMEOUT);
			}
			Msg<AD_RedLightReEnSet> Get_AD_RedLightRemindEnable() {
				return this->Get_AD_RedLightRemindEnable<DEFAULT_TIMEOUT>();
			}
			template<size_t TIMEOUT>
			Msg<AD_RedLightReEnSet> Get_AD_RedLightRemindEnable() {
				return this->Get_AD_RedLightRemindEnable( TIMEOUT);
			}
			const std::string get_service_name() {
				return this->service_name;
			}

		private:
		    const std::string service_name = "Basc_ADASSecureSet_skeleton";
			Msg<ADASSecureSet> Get_ADASSecureSet( size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_HU_ELKEnable(const HUset_ELKEnable &HUset_ELKEnable,const RequestInfo &Requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_HU_CESEnable(const HUset_CESEnable &HUset_CESEnable,const RequestInfo &Requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_HU_LASModeSelection(const HUset_LASModeSelection &HUset_LASModeSelection,const RequestInfo &Requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_HU_LASIntellgentModeSelection(const HUset_LASIntellgentModeSelection &HUset_LASIntellgentModeSelection,const RequestInfo &Requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_HU_LASWarningModeSelection(const HUset_LASWarningModeSelection &HUset_LASWarningModeSelection,const RequestInfo &Requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_HU_ForwardColliAstType(const HUset_ForwardColliAstType &HUset_ForwardColliAstType,const RequestInfo &Requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_HU_ForwardColliAstSenStyle(const HUset_ForwardColliAstSenStyle &HUset_ForwardColliAstSenStyle,const RequestInfo &Requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_HU_RearColliAstType(const HUset_RearColliAstType &HUset_RearColliAstType,const RequestInfo &Requestinfo, size_t dds_rpc_time_out);
			Msg<ResponseInfo> RR_HU_RedLightRemindEnable(const HUset_RedLightRemindEnable &HUset_RedLightRemindEnable,const RequestInfo &RequestInfo, size_t dds_rpc_time_out);
			Msg<AD_RedLightReEnSet> Get_AD_RedLightRemindEnable( size_t dds_rpc_time_out);

			dds_rpc_handle_t dds_rpc_request_handle = {-1,-1,-1};
			dds_rpc_handle_t dds_rpc_reply_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_ADASSecureSet_handle = { -1,-1,-1 };
            dds_rpc_handle_t dds_Ntf_AD_RedLightRemindEnable_handle = { -1,-1,-1 };

            bool init_flag = false;
            std::mutex init_mutex;

			Basc_ADASSecureSet_Proxy();
			~Basc_ADASSecureSet_Proxy();

			Basc_ADASSecureSet_Proxy(const Basc_ADASSecureSet_Proxy& signal);

			const Basc_ADASSecureSet_Proxy& operator=(const Basc_ADASSecureSet_Proxy& signal);
	};
}
}
}
}
}
#endif

