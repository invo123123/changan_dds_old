/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.6
  ServiceLatestModifyTime: 2023-07-14T09:59:34
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#ifndef Basc_APAnotice_SKELETON_HPP
#define Basc_APAnotice_SKELETON_HPP
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "changan/Basc_APAnotice.h"
#include "changan/base_skeleton.hpp"
#include "changan/base_wait.hpp"
#include <iostream>
#include <string.h>
#include <mutex>
namespace com {
namespace changan {
namespace carDrive {
namespace C2Controller {
namespace skeleton {
	namespace events {
        class Basc_APAnotice_Ntf_APAnotice{
            private:
                dds_rpc_handle_t dds_Ntf_APAnotice_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_APAnotice_skeleton_Ntf_APAnotice";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carDrive_Basc_APAnotice_Ntf_desc, &dds_Ntf_APAnotice_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_APAnotice_event_handle);
				}
				void send(const APAsetnotice &data) {
					carDrive_Basc_APAnotice_Ntf event_data;
					event_data.data._d = carDrive_Basc_APAnotice_Ntf_APAnotice_Hash;
					event_data.data._u.Basc_APAnotice_Ntf_APAnotice = data;
                    dds_write(dds_Ntf_APAnotice_event_handle.writer, &event_data);
				}
        };
        class Basc_APAnotice_Ntf_APP_RMACntrlcomnd{
            private:
                dds_rpc_handle_t dds_Ntf_APP_RMACntrlcomnd_event_handle = { -1, -1, -1 };
				std::string _topic_name = "Basc_APAnotice_skeleton_Ntf_APP_RMACntrlcomnd";
			public:
			    void init(std::string config = "") {
					DDSUtil::event_pub_init(DDS_DOMAIN_ID, _topic_name, &carDrive_Basc_APAnotice_Ntf_desc, &dds_Ntf_APP_RMACntrlcomnd_event_handle,NULL, {PROXY_TOKEN, PROXY_TOKEN, ""}, config);
			    }
				bool destroy() {
					return DDSUtil::dds_client_destroy(&dds_Ntf_APP_RMACntrlcomnd_event_handle);
				}
				void send(const RMAset_APP_MainScreenOperate &data) {
					carDrive_Basc_APAnotice_Ntf event_data;
					event_data.data._d = carDrive_Basc_APAnotice_Ntf_APP_RMACntrlcomnd_Hash;
					event_data.data._u.Basc_APAnotice_Ntf_APP_RMACntrlcomnd = data;
                    dds_write(dds_Ntf_APP_RMACntrlcomnd_event_handle.writer, &event_data);
				}
        };
	}
	extern void on_carDrive_Basc_APAnotice_request_data_available(int32_t reader, void* arg);

	class Basc_APAnotice_service_interface {
	public:
	    virtual ~Basc_APAnotice_service_interface() = default;

		virtual ResponseInfo RR_EDC_MainScreenOperate(const EDCset_MainScreenOperate &EDCset_MainScreenOperate,const RequestInfo &requestinfo) = 0;
		virtual ResponseInfo RR_EDC_PopUpWindowOperate(const EDCset_PopUpWindowOperate &EDCset_PopUpWindowOperate,const RequestInfo &requestinfo) = 0;
		virtual ResponseInfo RR_EDC_slot_ID(const EDCset_slot_ID &EDCset_slot_ID,const RequestInfo &requestinfo) = 0;
		virtual APAsetnotice Get_APAnotice() = 0;
		virtual ResponseInfo RR_EDC_EducatingModeOnOff(const EDCset_EducatingModeOnOff &EDCset_EducatingModeOnOff,const RequestInfo &requestinfo) = 0;
		virtual ResponseInfo RR_EDC_APAvoicecontrol(const EDCset_APAvoicecontrol &EDCset_APAvoicecontrol,const RequestInfo &requestinfo) = 0;
		virtual ResponseInfo RR_APP_RMACntrlcomnd(const RMAset_APP_MainScreenOperate &RMAset_APP_MainScreenOperate,const RequestInfo &RequestInfo) = 0;
		virtual RMAset_APP_MainScreenOperate Get_APP_RMACntrlcomnd() = 0;
		virtual uint8_t RR_EDC_APAPOCDirSel(const EDC_APAPOCDirSelData &EDC_APAPOCDirSelData,const RequestInfo &RequestInfo) = 0;
		virtual uint8_t RR_EDC_APASelfdefnSlot(const EDC_APASelfdefnSlotData &EDC_APASelfdefnSlotData,const RequestInfo &RequestInfo) = 0;
		virtual uint8_t RR_EDC_APAAudioRmnSet(const EDC_APAAudioRmnSetData &EDC_APAAudioRmnSetData,const RequestInfo &RequestInfo) = 0;
	};
    class Basc_APAnotice_Skeleton :public Basc_APAnotice_service_interface, public IBaseWait,public IBaseSkeleton,public ConsumerMatchedStatusHandler{
		public:
			Basc_APAnotice_Skeleton(Basc_APAnotice_service_interface* service,std::string config="");
			bool init();
			bool destroy();
			void wait_client_online();
            const std::string get_service_name() {
				return this->service_name;
			}
			ResponseInfo RR_EDC_MainScreenOperate(const EDCset_MainScreenOperate &EDCset_MainScreenOperate,const RequestInfo &requestinfo) {
				return this->_service->RR_EDC_MainScreenOperate(EDCset_MainScreenOperate,requestinfo);
			}
			ResponseInfo RR_EDC_PopUpWindowOperate(const EDCset_PopUpWindowOperate &EDCset_PopUpWindowOperate,const RequestInfo &requestinfo) {
				return this->_service->RR_EDC_PopUpWindowOperate(EDCset_PopUpWindowOperate,requestinfo);
			}
			ResponseInfo RR_EDC_slot_ID(const EDCset_slot_ID &EDCset_slot_ID,const RequestInfo &requestinfo) {
				return this->_service->RR_EDC_slot_ID(EDCset_slot_ID,requestinfo);
			}
			APAsetnotice Get_APAnotice() {
				return this->_service->Get_APAnotice();
			}
			ResponseInfo RR_EDC_EducatingModeOnOff(const EDCset_EducatingModeOnOff &EDCset_EducatingModeOnOff,const RequestInfo &requestinfo) {
				return this->_service->RR_EDC_EducatingModeOnOff(EDCset_EducatingModeOnOff,requestinfo);
			}
			ResponseInfo RR_EDC_APAvoicecontrol(const EDCset_APAvoicecontrol &EDCset_APAvoicecontrol,const RequestInfo &requestinfo) {
				return this->_service->RR_EDC_APAvoicecontrol(EDCset_APAvoicecontrol,requestinfo);
			}
			ResponseInfo RR_APP_RMACntrlcomnd(const RMAset_APP_MainScreenOperate &RMAset_APP_MainScreenOperate,const RequestInfo &RequestInfo) {
				return this->_service->RR_APP_RMACntrlcomnd(RMAset_APP_MainScreenOperate,RequestInfo);
			}
			RMAset_APP_MainScreenOperate Get_APP_RMACntrlcomnd() {
				return this->_service->Get_APP_RMACntrlcomnd();
			}
			uint8_t RR_EDC_APAPOCDirSel(const EDC_APAPOCDirSelData &EDC_APAPOCDirSelData,const RequestInfo &RequestInfo) {
				return this->_service->RR_EDC_APAPOCDirSel(EDC_APAPOCDirSelData,RequestInfo);
			}
			uint8_t RR_EDC_APASelfdefnSlot(const EDC_APASelfdefnSlotData &EDC_APASelfdefnSlotData,const RequestInfo &RequestInfo) {
				return this->_service->RR_EDC_APASelfdefnSlot(EDC_APASelfdefnSlotData,RequestInfo);
			}
			uint8_t RR_EDC_APAAudioRmnSet(const EDC_APAAudioRmnSetData &EDC_APAAudioRmnSetData,const RequestInfo &RequestInfo) {
				return this->_service->RR_EDC_APAAudioRmnSet(EDC_APAAudioRmnSetData,RequestInfo);
			}
            dds_return_t send_reply(carDrive_Basc_APAnotice_Reply* reply);
            events::Basc_APAnotice_Ntf_APAnotice Ntf_APAnotice;
            events::Basc_APAnotice_Ntf_APP_RMACntrlcomnd Ntf_APP_RMACntrlcomnd;

		private:
		    std::string _config;
			bool init_flag=false;
			std::mutex init_mutex;

			const std::string service_name="Basc_APAnotice_skeleton";
			Basc_APAnotice_service_interface * _service;
			dds_rpc_handle_t dds_rpc_request_handle= { -1, -1, -1 };
			dds_rpc_handle_t dds_rpc_reply_handle= { -1, -1, -1 };

	};

}
}
}
}
}
#endif

