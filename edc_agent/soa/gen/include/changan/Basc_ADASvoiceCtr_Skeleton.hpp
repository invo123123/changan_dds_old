/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.0.1
  ServiceLatestModifyTime: 2023-06-12T16:50:10
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#ifndef Basc_ADASvoiceCtr_SKELETON_HPP
#define Basc_ADASvoiceCtr_SKELETON_HPP
#include "changan/common_data_types.h"
#include "Common.h"
#include "changan/dds_util.h"
#include "changan/Basc_ADASvoiceCtr.h"
#include "changan/base_skeleton.hpp"
#include "changan/base_wait.hpp"
#include <iostream>
#include <string.h>
#include <mutex>
namespace com {
namespace changan {
namespace carDrive {
namespace C2Controller {
namespace skeleton {
	extern void on_carDrive_Basc_ADASvoiceCtr_request_data_available(int32_t reader, void* arg);

	class Basc_ADASvoiceCtr_service_interface {
	public:
	    virtual ~Basc_ADASvoiceCtr_service_interface() = default;

		virtual ResponseInfo RR_HU_VC_ACCactive(const HUset_VC_ACCactive &HUset_VC_ACCactive,const RequestInfo &Requestinfo) = 0;
		virtual ResponseInfo RR_HU_VC_CruiseSetDistance(const HUset_VC_CruiseSetDistance &HUset_VC_CruiseSetDistance,const RequestInfo &RequestInfo) = 0;
		virtual ResponseInfo RR_HU_VC_CruiseSetSpeed(const HUset_VC_CruiseSetSpeed &HUset_VC_CruiseSetSpeed,const RequestInfo &RequestInfo) = 0;
		virtual ResponseInfo RR_HU_LaneChangeReq(const HUset_LaneChangeReq &HUset_LaneChangeReq,const RequestInfo &RequestInfo) = 0;
	};
    class Basc_ADASvoiceCtr_Skeleton :public Basc_ADASvoiceCtr_service_interface, public IBaseWait,public IBaseSkeleton,public ConsumerMatchedStatusHandler{
		public:
			Basc_ADASvoiceCtr_Skeleton(Basc_ADASvoiceCtr_service_interface* service,std::string config="");
			bool init();
			bool destroy();
			void wait_client_online();
            const std::string get_service_name() {
				return this->service_name;
			}
			ResponseInfo RR_HU_VC_ACCactive(const HUset_VC_ACCactive &HUset_VC_ACCactive,const RequestInfo &Requestinfo) {
				return this->_service->RR_HU_VC_ACCactive(HUset_VC_ACCactive,Requestinfo);
			}
			ResponseInfo RR_HU_VC_CruiseSetDistance(const HUset_VC_CruiseSetDistance &HUset_VC_CruiseSetDistance,const RequestInfo &RequestInfo) {
				return this->_service->RR_HU_VC_CruiseSetDistance(HUset_VC_CruiseSetDistance,RequestInfo);
			}
			ResponseInfo RR_HU_VC_CruiseSetSpeed(const HUset_VC_CruiseSetSpeed &HUset_VC_CruiseSetSpeed,const RequestInfo &RequestInfo) {
				return this->_service->RR_HU_VC_CruiseSetSpeed(HUset_VC_CruiseSetSpeed,RequestInfo);
			}
			ResponseInfo RR_HU_LaneChangeReq(const HUset_LaneChangeReq &HUset_LaneChangeReq,const RequestInfo &RequestInfo) {
				return this->_service->RR_HU_LaneChangeReq(HUset_LaneChangeReq,RequestInfo);
			}
            dds_return_t send_reply(carDrive_Basc_ADASvoiceCtr_Reply* reply);

		private:
		    std::string _config;
			bool init_flag=false;
			std::mutex init_mutex;

			const std::string service_name="Basc_ADASvoiceCtr_skeleton";
			Basc_ADASvoiceCtr_service_interface * _service;
			dds_rpc_handle_t dds_rpc_request_handle= { -1, -1, -1 };
			dds_rpc_handle_t dds_rpc_reply_handle= { -1, -1, -1 };

	};

}
}
}
}
}
#endif

