/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.1.0
  ServiceLatestModifyTime: 2023-05-29T15:21:40
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#include "changan/Basc_GpsData_Skeleton.hpp"
#include "changan/dds_server.hpp"
#include <iostream>
#include <thread>
#include <string.h>
#include "changan/string_util.hpp"
#include "changan/business_util.h"

namespace com {
namespace changan {
namespace carCabin {
namespace testClass {
namespace skeleton {
	using namespace com::changan::rpc_service;
	using namespace com::changan::soa_log::skeleton;
	Basc_GpsData_Skeleton::Basc_GpsData_Skeleton(Basc_GpsData_service_interface* service,std::string config):_config(config),_service(service){}

	void on_Basc_GpsData_request_subscription_matched_cb(dds_entity_t reader, const dds_subscription_matched_status_t  status, void* arg){
		ASF_LOG_DEBUG_ARGS("on_Basc_GpsData_request_subscription_matched_cb, reader=[%d], current_count=[%d]", reader, status.current_count);
		Basc_GpsData_Skeleton * skeleton = (Basc_GpsData_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_GpsData_skeleton");
		if(NULL==skeleton){
			return;
		}
		auto handler=skeleton->get_consumer_matched_handler();
		if(NULL!=handler){
			ConsumerMatchedStatus data=DDSUtil::get_consumer_matched_status(reader,status);
			handler(data);
		}
	}

	void Basc_GpsData_Skeleton::wait_client_online()
	{
		this->wait_for_pub_online(dds_rpc_reply_handle.writer);
	}

    bool Basc_GpsData_Skeleton::init() {
        std::lock_guard<std::mutex> guard(init_mutex);
		if (this->init_flag) {
			return true;
		}
		logconfig_Skeleton::get_instance().init(this->_config);
		this->Evt_GpsData.init(this->_config);
		this->init_flag = true;
		return true;

	}

	bool Basc_GpsData_Skeleton::destroy() {
		ASF_LOG_DEBUG_ARGS("Basc_GpsData_Skeleton::destroy");
		std::lock_guard<std::mutex> guard(init_mutex);
		if (!this->init_flag) {
			return true;
		}
		this->Evt_GpsData.destroy();
		this->init_flag = false;
		return true;
	}

}
}
}
}
}

