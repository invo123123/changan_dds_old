/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  ServiceVersion: 
  CmVersion： v2.0.3
  ServiceLatestModifyTime: 
  Generate Time: 2023-12-11 18:07:58
*****************************************************************/
#include "changan/Car_Control_fl_Skeleton.hpp"
#include "changan/dds_server.hpp"
#include <iostream>
#include <thread>
#include <string.h>
#include "changan/string_util.hpp"
#include "changan/business_util.h"
#include "changan/Basc_PhysicsStFrtGate_Skeleton.hpp"
#include "changan/Basc_BattHVSts_Skeleton.hpp"
#include "changan/Cnr_PowerShiftSwt_Skeleton.hpp"
#include "changan/Enh_Horn_Skeleton.hpp"
#include "changan/Cnr_TPMSWarn_Skeleton.hpp"
#include "changan/Enh_TurnLi_Skeleton.hpp"
#include "changan/Cnr_HdLampCtrl_Skeleton.hpp"
#include "changan/Cnr_DoorLockDrvAll_Skeleton.hpp"
#include "changan/Cnr_WinAllCtrl_Skeleton.hpp"
#include "changan/Cnr_FrntWiperCtrl_Skeleton.hpp"
#include "changan/Cnr_MirrElecFoldUnfold_Skeleton.hpp"
#include "changan/Cnr_LeMirrLaneLED_Skeleton.hpp"
#include "changan/Basc_CrashStsInfo_Skeleton.hpp"
#include "changan/Basc_BucSwtSts_Skeleton.hpp"
#include "changan/Sys_TurnLiHzrdSwt_Skeleton.hpp"
#include "changan/Basc_FrntWiperFltSts_Skeleton.hpp"
#include "changan/Basc_MirrStsInfo_Skeleton.hpp"
#include "changan/Basc_MirrLaneLEDFltSts_Skeleton.hpp"
#include "changan/Sys_LoChrgfun_Skeleton.hpp"
#include "changan/Basc_PhysicsStWin_Skeleton.hpp"
#include "changan/Basc_PhysicsStDoor_Skeleton.hpp"
#include "changan/Basc_LogicStLock_Skeleton.hpp"
#include "changan/Cnr_BleRpaCtl_Skeleton.hpp"
#include "changan/Basc_BLEPhyKeySer_Skeleton.hpp"
#include "changan/Basc_C2DmdPrmInfo_Skeleton.hpp"
#include "changan/Basc_ExtrLiFltInfo_Skeleton.hpp"
#include "changan/Basc_RLSSts_Skeleton.hpp"
#include "changan/Basc_MFSSwtInfo_Skeleton.hpp"
#include "changan/Enh_PowerShiftDrv_Skeleton.hpp"
#include "changan/Basc_LiSnsrInfo_Skeleton.hpp"
#include "changan/Basc_FrntWiperStsInfo_Skeleton.hpp"
#include "changan/Basc_ViuGearShiftPosnInfo_Skeleton.hpp"
#include "changan/Basc_ExtrLiActCtrlInfo_Skeleton.hpp"
#include "changan/Basc_ExtrLiSwtReqInfo_Skeleton.hpp"
#include "changan/Sys_TotalMilg_Skeleton.hpp"
#include "changan/Basc_DrSeatInfo_Skeleton.hpp"
namespace com {
	namespace changan {
		namespace carControl {
			namespace skeleton {
				using namespace com::changan::rpc_service;
				using namespace com::changan::soa_log::skeleton;
				void reply_fl_service_no_register(DDS_SampleIdentity requestId) {
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = requestId;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_SERVICE_NOT_REGISTER;
				  	CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_PhysicsStFrtGate_Get_PhySt(carControl_Car_Control_Request * request){
					using Basc_PhysicsStFrtGate_Skeleton = com::changan::carControl::Door::skeleton::Basc_PhysicsStFrtGate_Skeleton;
				Basc_PhysicsStFrtGate_Skeleton* skeleton = (Basc_PhysicsStFrtGate_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_PhysicsStFrtGate_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_PhySt");
				uint8_t ret = skeleton->Get_PhySt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_PhySt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_PhysicsStFrtGate_Get_PhySt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_PhysicsStFrtGate_Get_PhySt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_PhysicsStFrtGate_Get_PhySt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_BattHVSts_Get_BattHVSts(carControl_Car_Control_Request * request){
					using Basc_BattHVSts_Skeleton = com::changan::carDynamics::Batt::skeleton::Basc_BattHVSts_Skeleton;
				Basc_BattHVSts_Skeleton* skeleton = (Basc_BattHVSts_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_BattHVSts_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_BattHVSts");
				BattHVSts ret = skeleton->Get_BattHVSts();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_BattHVSts");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_BattHVSts_Get_BattHVSts_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_BattHVSts_Get_BattHVSts.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_BattHVSts_Get_BattHVSts_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_PowerShiftSwt_RR_PwrShiftSwt(carControl_Car_Control_Request * request){
					using Cnr_PowerShiftSwt_Skeleton = com::changan::carControl::PDU::skeleton::Cnr_PowerShiftSwt_Skeleton;
				Cnr_PowerShiftSwt_Skeleton* skeleton = (Cnr_PowerShiftSwt_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_PowerShiftSwt_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_PwrShiftSwt");
				ResponseInfo ret = skeleton->RR_PwrShiftSwt(request->data._u.Cnr_PowerShiftSwt_RR_PwrShiftSwt.PowerCmd,request->data._u.Cnr_PowerShiftSwt_RR_PwrShiftSwt.RequestInfo);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_PwrShiftSwt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_PowerShiftSwt_RR_PwrShiftSwt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_PowerShiftSwt_RR_PwrShiftSwt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_PowerShiftSwt_RR_PwrShiftSwt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_PowerShiftSwt_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Cnr_PowerShiftSwt_Skeleton = com::changan::carControl::PDU::skeleton::Cnr_PowerShiftSwt_Skeleton;
				Cnr_PowerShiftSwt_Skeleton* skeleton = (Cnr_PowerShiftSwt_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_PowerShiftSwt_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_PowerShiftSwt_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_PowerShiftSwt_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_PowerShiftSwt_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_Horn_RR_HornCtrl(carControl_Car_Control_Request * request){
					using Enh_Horn_Skeleton = com::changan::carControl::Horn::skeleton::Enh_Horn_Skeleton;
				Enh_Horn_Skeleton* skeleton = (Enh_Horn_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_Horn_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HornCtrl");
				ResponseInfo ret = skeleton->RR_HornCtrl(request->data._u.Enh_Horn_RR_HornCtrl.HornCtrlCmd,request->data._u.Enh_Horn_RR_HornCtrl.RequestInfo);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_HornCtrl");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_Horn_RR_HornCtrl_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_Horn_RR_HornCtrl.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_Horn_RR_HornCtrl_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_Horn_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Enh_Horn_Skeleton = com::changan::carControl::Horn::skeleton::Enh_Horn_Skeleton;
				Enh_Horn_Skeleton* skeleton = (Enh_Horn_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_Horn_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_Horn_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_Horn_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_Horn_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_Horn_Get_HornLogicSt(carControl_Car_Control_Request * request){
					using Enh_Horn_Skeleton = com::changan::carControl::Horn::skeleton::Enh_Horn_Skeleton;
				Enh_Horn_Skeleton* skeleton = (Enh_Horn_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_Horn_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_HornLogicSt");
				uint8_t ret = skeleton->Get_HornLogicSt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_HornLogicSt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_Horn_Get_HornLogicSt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_Horn_Get_HornLogicSt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_Horn_Get_HornLogicSt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_TPMSWarn_Get_TireWarnInfo(carControl_Car_Control_Request * request){
					using Cnr_TPMSWarn_Skeleton = com::changan::carControl::Tyre::skeleton::Cnr_TPMSWarn_Skeleton;
				Cnr_TPMSWarn_Skeleton* skeleton = (Cnr_TPMSWarn_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_TPMSWarn_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_TireWarnInfo");
				TireWarnInfo ret = skeleton->Get_TireWarnInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_TireWarnInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_TPMSWarn_Get_TireWarnInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_TPMSWarn_Get_TireWarnInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_TPMSWarn_Get_TireWarnInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_TurnLi_Get_LoglCtrlSt(carControl_Car_Control_Request * request){
					using Enh_TurnLi_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Enh_TurnLi_Skeleton;
				Enh_TurnLi_Skeleton* skeleton = (Enh_TurnLi_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_TurnLi_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LoglCtrlSt");
				TurnLiSt ret = skeleton->Get_LoglCtrlSt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LoglCtrlSt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_TurnLi_Get_LoglCtrlSt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_TurnLi_Get_LoglCtrlSt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_TurnLi_Get_LoglCtrlSt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_TurnLi_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Enh_TurnLi_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Enh_TurnLi_Skeleton;
				Enh_TurnLi_Skeleton* skeleton = (Enh_TurnLi_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_TurnLi_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_TurnLi_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_TurnLi_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_TurnLi_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_TurnLi_Get_SrvRespSt(carControl_Car_Control_Request * request){
					using Enh_TurnLi_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Enh_TurnLi_Skeleton;
				Enh_TurnLi_Skeleton* skeleton = (Enh_TurnLi_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_TurnLi_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvRespSt");
				TurnLiCtrlCmd ret = skeleton->Get_SrvRespSt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvRespSt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_TurnLi_Get_SrvRespSt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_TurnLi_Get_SrvRespSt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_TurnLi_Get_SrvRespSt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_TurnLi_Get_TurnLiFltMonrSt(carControl_Car_Control_Request * request){
					using Enh_TurnLi_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Enh_TurnLi_Skeleton;
				Enh_TurnLi_Skeleton* skeleton = (Enh_TurnLi_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_TurnLi_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_TurnLiFltMonrSt");
				TurnLiFltMonrSt ret = skeleton->Get_TurnLiFltMonrSt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_TurnLiFltMonrSt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_TurnLi_Get_TurnLiFltMonrSt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_TurnLi_Get_TurnLiFltMonrSt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_TurnLi_Get_TurnLiFltMonrSt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_TurnLi_RR_TurnOFF(carControl_Car_Control_Request * request){
					using Enh_TurnLi_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Enh_TurnLi_Skeleton;
				Enh_TurnLi_Skeleton* skeleton = (Enh_TurnLi_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_TurnLi_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_TurnOFF");
				ResponseInfo ret = skeleton->RR_TurnOFF(request->data._u.Enh_TurnLi_RR_TurnOFF.TurnLiCtrlCmd,request->data._u.Enh_TurnLi_RR_TurnOFF.RequestInfo);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_TurnOFF");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_TurnLi_RR_TurnOFF_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_TurnLi_RR_TurnOFF.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_TurnLi_RR_TurnOFF_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_TurnLi_RR_TurnON(carControl_Car_Control_Request * request){
					using Enh_TurnLi_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Enh_TurnLi_Skeleton;
				Enh_TurnLi_Skeleton* skeleton = (Enh_TurnLi_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_TurnLi_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_TurnON");
				ResponseInfo ret = skeleton->RR_TurnON(request->data._u.Enh_TurnLi_RR_TurnON.TurnLiCtrlCmd,request->data._u.Enh_TurnLi_RR_TurnON.RequestInfo);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_TurnON");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_TurnLi_RR_TurnON_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_TurnLi_RR_TurnON.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_TurnLi_RR_TurnON_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_HdLampCtrl_RR_CombHdLampCtrl(carControl_Car_Control_Request * request){
					using Cnr_HdLampCtrl_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Cnr_HdLampCtrl_Skeleton;
				Cnr_HdLampCtrl_Skeleton* skeleton = (Cnr_HdLampCtrl_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_HdLampCtrl_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_CombHdLampCtrl");
				ResponseInfo ret = skeleton->RR_CombHdLampCtrl(request->data._u.Cnr_HdLampCtrl_RR_CombHdLampCtrl.CombHdLampReq,request->data._u.Cnr_HdLampCtrl_RR_CombHdLampCtrl.RequestInfo);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_CombHdLampCtrl");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_HdLampCtrl_RR_CombHdLampCtrl_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_HdLampCtrl_RR_CombHdLampCtrl.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_HdLampCtrl_RR_CombHdLampCtrl_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_HdLampCtrl_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Cnr_HdLampCtrl_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Cnr_HdLampCtrl_Skeleton;
				Cnr_HdLampCtrl_Skeleton* skeleton = (Cnr_HdLampCtrl_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_HdLampCtrl_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_HdLampCtrl_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_HdLampCtrl_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_HdLampCtrl_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_HdLampCtrl_Get_HdLampRunMod(carControl_Car_Control_Request * request){
					using Cnr_HdLampCtrl_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Cnr_HdLampCtrl_Skeleton;
				Cnr_HdLampCtrl_Skeleton* skeleton = (Cnr_HdLampCtrl_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_HdLampCtrl_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_HdLampRunMod");
				uint8_t ret = skeleton->Get_HdLampRunMod();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_HdLampRunMod");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_HdLampCtrl_Get_HdLampRunMod_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_HdLampCtrl_Get_HdLampRunMod.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_HdLampCtrl_Get_HdLampRunMod_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_HdLampCtrl_Get_ClusterPosnLiSt(carControl_Car_Control_Request * request){
					using Cnr_HdLampCtrl_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Cnr_HdLampCtrl_Skeleton;
				Cnr_HdLampCtrl_Skeleton* skeleton = (Cnr_HdLampCtrl_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_HdLampCtrl_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_ClusterPosnLiSt");
				uint8_t ret = skeleton->Get_ClusterPosnLiSt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_ClusterPosnLiSt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_HdLampCtrl_Get_ClusterPosnLiSt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_HdLampCtrl_Get_ClusterPosnLiSt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_HdLampCtrl_Get_ClusterPosnLiSt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_HdLampCtrl_Get_ClusterLoBeamSt(carControl_Car_Control_Request * request){
					using Cnr_HdLampCtrl_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Cnr_HdLampCtrl_Skeleton;
				Cnr_HdLampCtrl_Skeleton* skeleton = (Cnr_HdLampCtrl_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_HdLampCtrl_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_ClusterLoBeamSt");
				uint8_t ret = skeleton->Get_ClusterLoBeamSt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_ClusterLoBeamSt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_HdLampCtrl_Get_ClusterLoBeamSt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_HdLampCtrl_Get_ClusterLoBeamSt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_HdLampCtrl_Get_ClusterLoBeamSt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_DoorLockDrvAll_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Cnr_DoorLockDrvAll_Skeleton = com::changan::carControl::DoorLock::skeleton::Cnr_DoorLockDrvAll_Skeleton;
				Cnr_DoorLockDrvAll_Skeleton* skeleton = (Cnr_DoorLockDrvAll_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_DoorLockDrvAll_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_DoorLockDrvAll_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_DoorLockDrvAll_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_DoorLockDrvAll_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_DoorLockDrvAll_RR_ObjDrv(carControl_Car_Control_Request * request){
					using Cnr_DoorLockDrvAll_Skeleton = com::changan::carControl::DoorLock::skeleton::Cnr_DoorLockDrvAll_Skeleton;
				Cnr_DoorLockDrvAll_Skeleton* skeleton = (Cnr_DoorLockDrvAll_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_DoorLockDrvAll_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_ObjDrv");
				ResponseInfo ret = skeleton->RR_ObjDrv(request->data._u.Cnr_DoorLockDrvAll_RR_ObjDrv.RequestInfo,request->data._u.Cnr_DoorLockDrvAll_RR_ObjDrv.MotCtrl);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_ObjDrv");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_DoorLockDrvAll_RR_ObjDrv_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_DoorLockDrvAll_RR_ObjDrv.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_DoorLockDrvAll_RR_ObjDrv_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_WinAllCtrl_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Cnr_WinAllCtrl_Skeleton = com::changan::carControl::Window::skeleton::Cnr_WinAllCtrl_Skeleton;
				Cnr_WinAllCtrl_Skeleton* skeleton = (Cnr_WinAllCtrl_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_WinAllCtrl_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_WinAllCtrl_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_WinAllCtrl_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_WinAllCtrl_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_WinAllCtrl_RR_ObjDrv(carControl_Car_Control_Request * request){
					using Cnr_WinAllCtrl_Skeleton = com::changan::carControl::Window::skeleton::Cnr_WinAllCtrl_Skeleton;
				Cnr_WinAllCtrl_Skeleton* skeleton = (Cnr_WinAllCtrl_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_WinAllCtrl_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_ObjDrv");
				ResponseInfo ret = skeleton->RR_ObjDrv(request->data._u.Cnr_WinAllCtrl_RR_ObjDrv.RequestInfo,request->data._u.Cnr_WinAllCtrl_RR_ObjDrv.MotCtrlPos);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_ObjDrv");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_WinAllCtrl_RR_ObjDrv_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_WinAllCtrl_RR_ObjDrv.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_WinAllCtrl_RR_ObjDrv_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_FrntWiperCtrl_RR_WiperCtrl(carControl_Car_Control_Request * request){
					using Cnr_FrntWiperCtrl_Skeleton = com::changan::carControl::Cnr_FrntWiperCtrl::skeleton::Cnr_FrntWiperCtrl_Skeleton;
				Cnr_FrntWiperCtrl_Skeleton* skeleton = (Cnr_FrntWiperCtrl_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_FrntWiperCtrl_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_WiperCtrl");
				ResponseInfo ret = skeleton->RR_WiperCtrl(request->data._u.Cnr_FrntWiperCtrl_RR_WiperCtrl.WiperCtrl,request->data._u.Cnr_FrntWiperCtrl_RR_WiperCtrl.RequestInfo);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_WiperCtrl");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_FrntWiperCtrl_RR_WiperCtrl_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_FrntWiperCtrl_RR_WiperCtrl.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_FrntWiperCtrl_RR_WiperCtrl_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_FrntWiperCtrl_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Cnr_FrntWiperCtrl_Skeleton = com::changan::carControl::Cnr_FrntWiperCtrl::skeleton::Cnr_FrntWiperCtrl_Skeleton;
				Cnr_FrntWiperCtrl_Skeleton* skeleton = (Cnr_FrntWiperCtrl_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_FrntWiperCtrl_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_FrntWiperCtrl_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_FrntWiperCtrl_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_FrntWiperCtrl_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_MirrElecFoldUnfold_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Cnr_MirrElecFoldUnfold_Skeleton = com::changan::carControl::RearViewMirror::skeleton::Cnr_MirrElecFoldUnfold_Skeleton;
				Cnr_MirrElecFoldUnfold_Skeleton* skeleton = (Cnr_MirrElecFoldUnfold_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_MirrElecFoldUnfold_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_MirrElecFoldUnfold_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_MirrElecFoldUnfold_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_MirrElecFoldUnfold_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_MirrElecFoldUnfold_RR_MirrFoldUnfoldCrl(carControl_Car_Control_Request * request){
					using Cnr_MirrElecFoldUnfold_Skeleton = com::changan::carControl::RearViewMirror::skeleton::Cnr_MirrElecFoldUnfold_Skeleton;
				Cnr_MirrElecFoldUnfold_Skeleton* skeleton = (Cnr_MirrElecFoldUnfold_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_MirrElecFoldUnfold_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_MirrFoldUnfoldCrl");
				ResponseInfo ret = skeleton->RR_MirrFoldUnfoldCrl(request->data._u.Cnr_MirrElecFoldUnfold_RR_MirrFoldUnfoldCrl.SwtStCmd,request->data._u.Cnr_MirrElecFoldUnfold_RR_MirrFoldUnfoldCrl.RequestInfo);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_MirrFoldUnfoldCrl");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_MirrElecFoldUnfold_RR_MirrFoldUnfoldCrl_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_MirrElecFoldUnfold_RR_MirrFoldUnfoldCrl.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_MirrElecFoldUnfold_RR_MirrFoldUnfoldCrl_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_LeMirrLaneLED_RR_MirrLaneLEDCrl(carControl_Car_Control_Request * request){
					using Cnr_LeMirrLaneLED_Skeleton = com::changan::carControl::RearViewMirror::skeleton::Cnr_LeMirrLaneLED_Skeleton;
				Cnr_LeMirrLaneLED_Skeleton* skeleton = (Cnr_LeMirrLaneLED_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_LeMirrLaneLED_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_MirrLaneLEDCrl");
				ResponseInfo ret = skeleton->RR_MirrLaneLEDCrl(request->data._u.Cnr_LeMirrLaneLED_RR_MirrLaneLEDCrl.MirrLaneLEDCrl,request->data._u.Cnr_LeMirrLaneLED_RR_MirrLaneLEDCrl.RequestInfo);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_MirrLaneLEDCrl");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_LeMirrLaneLED_RR_MirrLaneLEDCrl_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_LeMirrLaneLED_RR_MirrLaneLEDCrl.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_LeMirrLaneLED_RR_MirrLaneLEDCrl_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_LeMirrLaneLED_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Cnr_LeMirrLaneLED_Skeleton = com::changan::carControl::RearViewMirror::skeleton::Cnr_LeMirrLaneLED_Skeleton;
				Cnr_LeMirrLaneLED_Skeleton* skeleton = (Cnr_LeMirrLaneLED_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_LeMirrLaneLED_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_LeMirrLaneLED_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_LeMirrLaneLED_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_LeMirrLaneLED_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_CrashStsInfo_Get_CrashStsInfo(carControl_Car_Control_Request * request){
					using Basc_CrashStsInfo_Skeleton = com::changan::carControl::CHS_OTHER::skeleton::Basc_CrashStsInfo_Skeleton;
				Basc_CrashStsInfo_Skeleton* skeleton = (Basc_CrashStsInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_CrashStsInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_CrashStsInfo");
				CrashStsInfo ret = skeleton->Get_CrashStsInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_CrashStsInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_CrashStsInfo_Get_CrashStsInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_CrashStsInfo_Get_CrashStsInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_CrashStsInfo_Get_CrashStsInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_BucSwtSts_Get_BucSwtSts(carControl_Car_Control_Request * request){
					using Basc_BucSwtSts_Skeleton = com::changan::carControl::BasicService::skeleton::Basc_BucSwtSts_Skeleton;
				Basc_BucSwtSts_Skeleton* skeleton = (Basc_BucSwtSts_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_BucSwtSts_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_BucSwtSts");
				BucSwtSts ret = skeleton->Get_BucSwtSts();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_BucSwtSts");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_BucSwtSts_Get_BucSwtSts_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_BucSwtSts_Get_BucSwtSts.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_BucSwtSts_Get_BucSwtSts_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Sys_TurnLiHzrdSwt_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Sys_TurnLiHzrdSwt_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Sys_TurnLiHzrdSwt_Skeleton;
				Sys_TurnLiHzrdSwt_Skeleton* skeleton = (Sys_TurnLiHzrdSwt_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Sys_TurnLiHzrdSwt_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Sys_TurnLiHzrdSwt_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Sys_TurnLiHzrdSwt_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Sys_TurnLiHzrdSwt_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Sys_TurnLiHzrdSwt_Get_ClusterTurnLiSt(carControl_Car_Control_Request * request){
					using Sys_TurnLiHzrdSwt_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Sys_TurnLiHzrdSwt_Skeleton;
				Sys_TurnLiHzrdSwt_Skeleton* skeleton = (Sys_TurnLiHzrdSwt_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Sys_TurnLiHzrdSwt_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_ClusterTurnLiSt");
				ClusterTurnLiSt ret = skeleton->Get_ClusterTurnLiSt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_ClusterTurnLiSt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Sys_TurnLiHzrdSwt_Get_ClusterTurnLiSt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Sys_TurnLiHzrdSwt_Get_ClusterTurnLiSt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Sys_TurnLiHzrdSwt_Get_ClusterTurnLiSt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_FrntWiperFltSts_Get_WiperFltSts(carControl_Car_Control_Request * request){
					using Basc_FrntWiperFltSts_Skeleton = com::changan::carControl::Basc_FrntWiperFltSts::skeleton::Basc_FrntWiperFltSts_Skeleton;
				Basc_FrntWiperFltSts_Skeleton* skeleton = (Basc_FrntWiperFltSts_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_FrntWiperFltSts_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_WiperFltSts");
				FWiperFltSt ret = skeleton->Get_WiperFltSts();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_WiperFltSts");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_FrntWiperFltSts_Get_WiperFltSts_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_FrntWiperFltSts_Get_WiperFltSts.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_FrntWiperFltSts_Get_WiperFltSts_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_MirrStsInfo_Get_StsInfo(carControl_Car_Control_Request * request){
					using Basc_MirrStsInfo_Skeleton = com::changan::carControl::RearViewMirror::skeleton::Basc_MirrStsInfo_Skeleton;
				Basc_MirrStsInfo_Skeleton* skeleton = (Basc_MirrStsInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_MirrStsInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_StsInfo");
				MirrStsInfo ret = skeleton->Get_StsInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_StsInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_MirrStsInfo_Get_StsInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_MirrStsInfo_Get_StsInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_MirrStsInfo_Get_StsInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_MirrLaneLEDFltSts_Get_LaneLEDFltSts(carControl_Car_Control_Request * request){
					using Basc_MirrLaneLEDFltSts_Skeleton = com::changan::carControl::RearViewMirror::skeleton::Basc_MirrLaneLEDFltSts_Skeleton;
				Basc_MirrLaneLEDFltSts_Skeleton* skeleton = (Basc_MirrLaneLEDFltSts_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_MirrLaneLEDFltSts_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LaneLEDFltSts");
				LaneLedFltSt ret = skeleton->Get_LaneLEDFltSts();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LaneLEDFltSts");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_MirrLaneLEDFltSts_Get_LaneLEDFltSts_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_MirrLaneLEDFltSts_Get_LaneLEDFltSts.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_MirrLaneLEDFltSts_Get_LaneLEDFltSts_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Sys_LoChrgfun_RR_LoChrgfuncSet(carControl_Car_Control_Request * request){
					using Sys_LoChrgfun_Skeleton = com::changan::carControl::PDU::skeleton::Sys_LoChrgfun_Skeleton;
				Sys_LoChrgfun_Skeleton* skeleton = (Sys_LoChrgfun_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Sys_LoChrgfun_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_LoChrgfuncSet");
				ResponseInfo ret = skeleton->RR_LoChrgfuncSet(request->data._u.Sys_LoChrgfun_RR_LoChrgfuncSet.LoUMode,request->data._u.Sys_LoChrgfun_RR_LoChrgfuncSet.RequestInfo);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_LoChrgfuncSet");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Sys_LoChrgfun_RR_LoChrgfuncSet_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Sys_LoChrgfun_RR_LoChrgfuncSet.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Sys_LoChrgfun_RR_LoChrgfuncSet_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Sys_LoChrgfun_Get_LoChrgfuncsts(carControl_Car_Control_Request * request){
					using Sys_LoChrgfun_Skeleton = com::changan::carControl::PDU::skeleton::Sys_LoChrgfun_Skeleton;
				Sys_LoChrgfun_Skeleton* skeleton = (Sys_LoChrgfun_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Sys_LoChrgfun_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LoChrgfuncsts");
				uint8_t ret = skeleton->Get_LoChrgfuncsts();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LoChrgfuncsts");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Sys_LoChrgfun_Get_LoChrgfuncsts_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Sys_LoChrgfun_Get_LoChrgfuncsts.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Sys_LoChrgfun_Get_LoChrgfuncsts_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Sys_LoChrgfun_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Sys_LoChrgfun_Skeleton = com::changan::carControl::PDU::skeleton::Sys_LoChrgfun_Skeleton;
				Sys_LoChrgfun_Skeleton* skeleton = (Sys_LoChrgfun_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Sys_LoChrgfun_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Sys_LoChrgfun_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Sys_LoChrgfun_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Sys_LoChrgfun_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_PhysicsStWin_Get_PhyStWinAll(carControl_Car_Control_Request * request){
					using Basc_PhysicsStWin_Skeleton = com::changan::carControl::Window::skeleton::Basc_PhysicsStWin_Skeleton;
				Basc_PhysicsStWin_Skeleton* skeleton = (Basc_PhysicsStWin_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_PhysicsStWin_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_PhyStWinAll");
				PhyStWinAll_Struct ret = skeleton->Get_PhyStWinAll();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_PhyStWinAll");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_PhysicsStWin_Get_PhyStWinAll_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_PhysicsStWin_Get_PhyStWinAll.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_PhysicsStWin_Get_PhyStWinAll_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_PhysicsStWin_Get_PosWinAll(carControl_Car_Control_Request * request){
					using Basc_PhysicsStWin_Skeleton = com::changan::carControl::Window::skeleton::Basc_PhysicsStWin_Skeleton;
				Basc_PhysicsStWin_Skeleton* skeleton = (Basc_PhysicsStWin_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_PhysicsStWin_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_PosWinAll");
				ObjStTypeCurPosVITAll_Struct ret = skeleton->Get_PosWinAll();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_PosWinAll");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_PhysicsStWin_Get_PosWinAll_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_PhysicsStWin_Get_PosWinAll.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_PhysicsStWin_Get_PosWinAll_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_PhysicsStDoor_Get_PhyStAll(carControl_Car_Control_Request * request){
					using Basc_PhysicsStDoor_Skeleton = com::changan::carControl::Door::skeleton::Basc_PhysicsStDoor_Skeleton;
				Basc_PhysicsStDoor_Skeleton* skeleton = (Basc_PhysicsStDoor_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_PhysicsStDoor_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_PhyStAll");
				ObjStTypeDoorAll_Struct ret = skeleton->Get_PhyStAll();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_PhyStAll");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_PhysicsStDoor_Get_PhyStAll_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_PhysicsStDoor_Get_PhyStAll.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_PhysicsStDoor_Get_PhyStAll_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_PhysicsStDoor_Get_PosAll(carControl_Car_Control_Request * request){
					using Basc_PhysicsStDoor_Skeleton = com::changan::carControl::Door::skeleton::Basc_PhysicsStDoor_Skeleton;
				Basc_PhysicsStDoor_Skeleton* skeleton = (Basc_PhysicsStDoor_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_PhysicsStDoor_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_PosAll");
				ObjStTypeCurPosVITAll_Struct ret = skeleton->Get_PosAll();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_PosAll");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_PhysicsStDoor_Get_PosAll_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_PhysicsStDoor_Get_PosAll.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_PhysicsStDoor_Get_PosAll_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_PhysicsStDoor_Get_DoorStAll(carControl_Car_Control_Request * request){
					using Basc_PhysicsStDoor_Skeleton = com::changan::carControl::Door::skeleton::Basc_PhysicsStDoor_Skeleton;
				Basc_PhysicsStDoor_Skeleton* skeleton = (Basc_PhysicsStDoor_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_PhysicsStDoor_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_DoorStAll");
				DoorDrvStAll_Struct ret = skeleton->Get_DoorStAll();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_DoorStAll");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_PhysicsStDoor_Get_DoorStAll_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_PhysicsStDoor_Get_DoorStAll.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_PhysicsStDoor_Get_DoorStAll_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LogicStLock_Get_LocStAll(carControl_Car_Control_Request * request){
					using Basc_LogicStLock_Skeleton = com::changan::carControl::DoorLock::skeleton::Basc_LogicStLock_Skeleton;
				Basc_LogicStLock_Skeleton* skeleton = (Basc_LogicStLock_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LogicStLock_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LocStAll");
				LockStAll_Struct ret = skeleton->Get_LocStAll();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LocStAll");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LogicStLock_Get_LocStAll_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LogicStLock_Get_LocStAll.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LogicStLock_Get_LocStAll_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_BleRpaCtl_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Cnr_BleRpaCtl_Skeleton = com::changan::carControl::Key::skeleton::Cnr_BleRpaCtl_Skeleton;
				Cnr_BleRpaCtl_Skeleton* skeleton = (Cnr_BleRpaCtl_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_BleRpaCtl_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_BleRpaCtl_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_BleRpaCtl_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_BleRpaCtl_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_BleRpaCtl_RR_BleRpaCtl(carControl_Car_Control_Request * request){
					using Cnr_BleRpaCtl_Skeleton = com::changan::carControl::Key::skeleton::Cnr_BleRpaCtl_Skeleton;
				Cnr_BleRpaCtl_Skeleton* skeleton = (Cnr_BleRpaCtl_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_BleRpaCtl_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_BleRpaCtl");
				ResponseInfo ret = skeleton->RR_BleRpaCtl(request->data._u.Cnr_BleRpaCtl_RR_BleRpaCtl.BLERpaCmdRsp,request->data._u.Cnr_BleRpaCtl_RR_BleRpaCtl.RequestInfo);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_BleRpaCtl");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_BleRpaCtl_RR_BleRpaCtl_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_BleRpaCtl_RR_BleRpaCtl.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_BleRpaCtl_RR_BleRpaCtl_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Cnr_BleRpaCtl_Get_BleRpaCtl(carControl_Car_Control_Request * request){
					using Cnr_BleRpaCtl_Skeleton = com::changan::carControl::Key::skeleton::Cnr_BleRpaCtl_Skeleton;
				Cnr_BleRpaCtl_Skeleton* skeleton = (Cnr_BleRpaCtl_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Cnr_BleRpaCtl_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_BleRpaCtl");
				BLERpaCmdReq ret = skeleton->Get_BleRpaCtl();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_BleRpaCtl");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Cnr_BleRpaCtl_Get_BleRpaCtl_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Cnr_BleRpaCtl_Get_BleRpaCtl.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Cnr_BleRpaCtl_Get_BleRpaCtl_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_BLEPhyKeySer_Get_BLEPhyKeyInfo(carControl_Car_Control_Request * request){
					using Basc_BLEPhyKeySer_Skeleton = com::changan::carControl::Key::skeleton::Basc_BLEPhyKeySer_Skeleton;
				Basc_BLEPhyKeySer_Skeleton* skeleton = (Basc_BLEPhyKeySer_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_BLEPhyKeySer_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_BLEPhyKeyInfo");
				BLEPhyKeyBascInfo ret = skeleton->Get_BLEPhyKeyInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_BLEPhyKeyInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_BLEPhyKeySer_Get_BLEPhyKeyInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_BLEPhyKeySer_Get_BLEPhyKeyInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_BLEPhyKeySer_Get_BLEPhyKeyInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_C2DmdPrmInfo_Get_C2DmdPrmInfo(carControl_Car_Control_Request * request){
					using Basc_C2DmdPrmInfo_Skeleton = com::changan::carControl::C2Demand::skeleton::Basc_C2DmdPrmInfo_Skeleton;
				Basc_C2DmdPrmInfo_Skeleton* skeleton = (Basc_C2DmdPrmInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_C2DmdPrmInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_C2DmdPrmInfo");
				C2DmdPrmInfo ret = skeleton->Get_C2DmdPrmInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_C2DmdPrmInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_C2DmdPrmInfo_Get_C2DmdPrmInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_C2DmdPrmInfo_Get_C2DmdPrmInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_C2DmdPrmInfo_Get_C2DmdPrmInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiFltInfo_Get_PosnLiFltInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiFltInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiFltInfo_Skeleton;
				Basc_ExtrLiFltInfo_Skeleton* skeleton = (Basc_ExtrLiFltInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiFltInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_PosnLiFltInfo");
				PosnLiFltInfo ret = skeleton->Get_PosnLiFltInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_PosnLiFltInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiFltInfo_Get_PosnLiFltInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiFltInfo_Get_PosnLiFltInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiFltInfo_Get_PosnLiFltInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiFltInfo_Get_LoBeamFltInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiFltInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiFltInfo_Skeleton;
				Basc_ExtrLiFltInfo_Skeleton* skeleton = (Basc_ExtrLiFltInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiFltInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LoBeamFltInfo");
				LoBeamFltInfo ret = skeleton->Get_LoBeamFltInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LoBeamFltInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiFltInfo_Get_LoBeamFltInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiFltInfo_Get_LoBeamFltInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiFltInfo_Get_LoBeamFltInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiFltInfo_Get_HiBeamFltInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiFltInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiFltInfo_Skeleton;
				Basc_ExtrLiFltInfo_Skeleton* skeleton = (Basc_ExtrLiFltInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiFltInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_HiBeamFltInfo");
				HiBeamFltInfo ret = skeleton->Get_HiBeamFltInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_HiBeamFltInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiFltInfo_Get_HiBeamFltInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiFltInfo_Get_HiBeamFltInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiFltInfo_Get_HiBeamFltInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiFltInfo_Get_RvsLiFltInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiFltInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiFltInfo_Skeleton;
				Basc_ExtrLiFltInfo_Skeleton* skeleton = (Basc_ExtrLiFltInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiFltInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_RvsLiFltInfo");
				RvsLiFltInfo ret = skeleton->Get_RvsLiFltInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_RvsLiFltInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiFltInfo_Get_RvsLiFltInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiFltInfo_Get_RvsLiFltInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiFltInfo_Get_RvsLiFltInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiFltInfo_Get_DRLFltInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiFltInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiFltInfo_Skeleton;
				Basc_ExtrLiFltInfo_Skeleton* skeleton = (Basc_ExtrLiFltInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiFltInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_DRLFltInfo");
				DRLFltInfo ret = skeleton->Get_DRLFltInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_DRLFltInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiFltInfo_Get_DRLFltInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiFltInfo_Get_DRLFltInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiFltInfo_Get_DRLFltInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiFltInfo_Get_BrkLiFltInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiFltInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiFltInfo_Skeleton;
				Basc_ExtrLiFltInfo_Skeleton* skeleton = (Basc_ExtrLiFltInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiFltInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_BrkLiFltInfo");
				BrkLiFltInfo ret = skeleton->Get_BrkLiFltInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_BrkLiFltInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiFltInfo_Get_BrkLiFltInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiFltInfo_Get_BrkLiFltInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiFltInfo_Get_BrkLiFltInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiFltInfo_Get_TurnLiFltInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiFltInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiFltInfo_Skeleton;
				Basc_ExtrLiFltInfo_Skeleton* skeleton = (Basc_ExtrLiFltInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiFltInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_TurnLiFltInfo");
				TurnLiFltInfo ret = skeleton->Get_TurnLiFltInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_TurnLiFltInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiFltInfo_Get_TurnLiFltInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiFltInfo_Get_TurnLiFltInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiFltInfo_Get_TurnLiFltInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiFltInfo_Get_FogFltInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiFltInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiFltInfo_Skeleton;
				Basc_ExtrLiFltInfo_Skeleton* skeleton = (Basc_ExtrLiFltInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiFltInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_FogFltInfo");
				FogFltInfo ret = skeleton->Get_FogFltInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_FogFltInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiFltInfo_Get_FogFltInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiFltInfo_Get_FogFltInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiFltInfo_Get_FogFltInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_RLSSts_Get_WiperRLSSts(carControl_Car_Control_Request * request){
					using Basc_RLSSts_Skeleton = com::changan::carControl::WiperWasher::skeleton::Basc_RLSSts_Skeleton;
				Basc_RLSSts_Skeleton* skeleton = (Basc_RLSSts_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_RLSSts_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_WiperRLSSts");
				RLSSts ret = skeleton->Get_WiperRLSSts();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_WiperRLSSts");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_RLSSts_Get_WiperRLSSts_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_RLSSts_Get_WiperRLSSts.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_RLSSts_Get_WiperRLSSts_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_MFSSwtInfo_Get_SwtInfo(carControl_Car_Control_Request * request){
					using Basc_MFSSwtInfo_Skeleton = com::changan::carControl::SteerWheel::skeleton::Basc_MFSSwtInfo_Skeleton;
				Basc_MFSSwtInfo_Skeleton* skeleton = (Basc_MFSSwtInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_MFSSwtInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SwtInfo");
				MFSSwtInfo ret = skeleton->Get_SwtInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SwtInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_MFSSwtInfo_Get_SwtInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_MFSSwtInfo_Get_SwtInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_MFSSwtInfo_Get_SwtInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_MFSSwtInfo_Get_FltSt(carControl_Car_Control_Request * request){
					using Basc_MFSSwtInfo_Skeleton = com::changan::carControl::SteerWheel::skeleton::Basc_MFSSwtInfo_Skeleton;
				Basc_MFSSwtInfo_Skeleton* skeleton = (Basc_MFSSwtInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_MFSSwtInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_FltSt");
				MFSFltStInfo ret = skeleton->Get_FltSt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_FltSt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_MFSSwtInfo_Get_FltSt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_MFSSwtInfo_Get_FltSt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_MFSSwtInfo_Get_FltSt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_PowerShiftDrv_RR_PowerOn(carControl_Car_Control_Request * request){
					using Enh_PowerShiftDrv_Skeleton = com::changan::carControl::PDU::skeleton::Enh_PowerShiftDrv_Skeleton;
				Enh_PowerShiftDrv_Skeleton* skeleton = (Enh_PowerShiftDrv_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_PowerShiftDrv_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_PowerOn");
				ResponseInfo ret = skeleton->RR_PowerOn(request->data._u.Enh_PowerShiftDrv_RR_PowerOn.PowerCmd,request->data._u.Enh_PowerShiftDrv_RR_PowerOn.RequestInfo);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_PowerOn");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_PowerShiftDrv_RR_PowerOn_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_PowerShiftDrv_RR_PowerOn.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_PowerShiftDrv_RR_PowerOn_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_PowerShiftDrv_Get_SrvOperInfo(carControl_Car_Control_Request * request){
					using Enh_PowerShiftDrv_Skeleton = com::changan::carControl::PDU::skeleton::Enh_PowerShiftDrv_Skeleton;
				Enh_PowerShiftDrv_Skeleton* skeleton = (Enh_PowerShiftDrv_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_PowerShiftDrv_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SrvOperInfo");
				OperationInfo ret = skeleton->Get_SrvOperInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SrvOperInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_PowerShiftDrv_Get_SrvOperInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_PowerShiftDrv_Get_SrvOperInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_PowerShiftDrv_Get_SrvOperInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_PowerShiftDrv_Get_PowerShiftSwtSt(carControl_Car_Control_Request * request){
					using Enh_PowerShiftDrv_Skeleton = com::changan::carControl::PDU::skeleton::Enh_PowerShiftDrv_Skeleton;
				Enh_PowerShiftDrv_Skeleton* skeleton = (Enh_PowerShiftDrv_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_PowerShiftDrv_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_PowerShiftSwtSt");
				uint8_t ret = skeleton->Get_PowerShiftSwtSt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_PowerShiftSwtSt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_PowerShiftDrv_Get_PowerShiftSwtSt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_PowerShiftDrv_Get_PowerShiftSwtSt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_PowerShiftDrv_Get_PowerShiftSwtSt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Enh_PowerShiftDrv_RR_PwrPinCtr(carControl_Car_Control_Request * request){
					using Enh_PowerShiftDrv_Skeleton = com::changan::carControl::PDU::skeleton::Enh_PowerShiftDrv_Skeleton;
				Enh_PowerShiftDrv_Skeleton* skeleton = (Enh_PowerShiftDrv_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Enh_PowerShiftDrv_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_PwrPinCtr");
				ResponseInfo ret = skeleton->RR_PwrPinCtr(request->data._u.Enh_PowerShiftDrv_RR_PwrPinCtr.OTAWGroupStatus,request->data._u.Enh_PowerShiftDrv_RR_PwrPinCtr.RequestInfo,request->data._u.Enh_PowerShiftDrv_RR_PwrPinCtr.NUM,request->data._u.Enh_PowerShiftDrv_RR_PwrPinCtr.PwrPortCtr);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_PwrPinCtr");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Enh_PowerShiftDrv_RR_PwrPinCtr_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Enh_PowerShiftDrv_RR_PwrPinCtr.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Enh_PowerShiftDrv_RR_PwrPinCtr_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LiSnsrInfo_RR_LiSnsrThd(carControl_Car_Control_Request * request){
					using Basc_LiSnsrInfo_Skeleton = com::changan::carControl::S2S::skeleton::Basc_LiSnsrInfo_Skeleton;
				Basc_LiSnsrInfo_Skeleton* skeleton = (Basc_LiSnsrInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LiSnsrInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->RR_LiSnsrThd");
				uint8_t ret = skeleton->RR_LiSnsrThd(request->data._u.Basc_LiSnsrInfo_RR_LiSnsrThd.LiSnsrThd);
					ASF_LOG_DEBUG_ARGS("after skeleton->RR_LiSnsrThd");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LiSnsrInfo_RR_LiSnsrThd_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LiSnsrInfo_RR_LiSnsrThd.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_RR_LiSnsrThd_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LiSnsrInfo_Get_SolarLe(carControl_Car_Control_Request * request){
					using Basc_LiSnsrInfo_Skeleton = com::changan::carControl::S2S::skeleton::Basc_LiSnsrInfo_Skeleton;
				Basc_LiSnsrInfo_Skeleton* skeleton = (Basc_LiSnsrInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LiSnsrInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SolarLe");
				uint8_t ret = skeleton->Get_SolarLe();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SolarLe");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LiSnsrInfo_Get_SolarLe_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LiSnsrInfo_Get_SolarLe.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Get_SolarLe_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LiSnsrInfo_Get_SolarRi(carControl_Car_Control_Request * request){
					using Basc_LiSnsrInfo_Skeleton = com::changan::carControl::S2S::skeleton::Basc_LiSnsrInfo_Skeleton;
				Basc_LiSnsrInfo_Skeleton* skeleton = (Basc_LiSnsrInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LiSnsrInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SolarRi");
				uint8_t ret = skeleton->Get_SolarRi();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SolarRi");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LiSnsrInfo_Get_SolarRi_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LiSnsrInfo_Get_SolarRi.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Get_SolarRi_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrMod(carControl_Car_Control_Request * request){
					using Basc_LiSnsrInfo_Skeleton = com::changan::carControl::S2S::skeleton::Basc_LiSnsrInfo_Skeleton;
				Basc_LiSnsrInfo_Skeleton* skeleton = (Basc_LiSnsrInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LiSnsrInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LiSnsrMod");
				uint8_t ret = skeleton->Get_LiSnsrMod();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LiSnsrMod");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrMod_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LiSnsrInfo_Get_LiSnsrMod.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrMod_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrLoBeamReq(carControl_Car_Control_Request * request){
					using Basc_LiSnsrInfo_Skeleton = com::changan::carControl::S2S::skeleton::Basc_LiSnsrInfo_Skeleton;
				Basc_LiSnsrInfo_Skeleton* skeleton = (Basc_LiSnsrInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LiSnsrInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LiSnsrLoBeamReq");
				uint8_t ret = skeleton->Get_LiSnsrLoBeamReq();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LiSnsrLoBeamReq");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrLoBeamReq_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LiSnsrInfo_Get_LiSnsrLoBeamReq.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrLoBeamReq_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrRunSt(carControl_Car_Control_Request * request){
					using Basc_LiSnsrInfo_Skeleton = com::changan::carControl::S2S::skeleton::Basc_LiSnsrInfo_Skeleton;
				Basc_LiSnsrInfo_Skeleton* skeleton = (Basc_LiSnsrInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LiSnsrInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LiSnsrRunSt");
				uint8_t ret = skeleton->Get_LiSnsrRunSt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LiSnsrRunSt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrRunSt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LiSnsrInfo_Get_LiSnsrRunSt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrRunSt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrErrSt(carControl_Car_Control_Request * request){
					using Basc_LiSnsrInfo_Skeleton = com::changan::carControl::S2S::skeleton::Basc_LiSnsrInfo_Skeleton;
				Basc_LiSnsrInfo_Skeleton* skeleton = (Basc_LiSnsrInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LiSnsrInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LiSnsrErrSt");
				uint8_t ret = skeleton->Get_LiSnsrErrSt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LiSnsrErrSt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrErrSt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LiSnsrInfo_Get_LiSnsrErrSt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrErrSt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LiSnsrInfo_Get_IRBri(carControl_Car_Control_Request * request){
					using Basc_LiSnsrInfo_Skeleton = com::changan::carControl::S2S::skeleton::Basc_LiSnsrInfo_Skeleton;
				Basc_LiSnsrInfo_Skeleton* skeleton = (Basc_LiSnsrInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LiSnsrInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_IRBri");
				uint8_t ret = skeleton->Get_IRBri();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_IRBri");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LiSnsrInfo_Get_IRBri_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LiSnsrInfo_Get_IRBri.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Get_IRBri_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LiSnsrInfo_Get_FWBri(carControl_Car_Control_Request * request){
					using Basc_LiSnsrInfo_Skeleton = com::changan::carControl::S2S::skeleton::Basc_LiSnsrInfo_Skeleton;
				Basc_LiSnsrInfo_Skeleton* skeleton = (Basc_LiSnsrInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LiSnsrInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_FWBri");
				uint16_t ret = skeleton->Get_FWBri();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_FWBri");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LiSnsrInfo_Get_FWBri_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LiSnsrInfo_Get_FWBri.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Get_FWBri_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LiSnsrInfo_Get_AMBBri(carControl_Car_Control_Request * request){
					using Basc_LiSnsrInfo_Skeleton = com::changan::carControl::S2S::skeleton::Basc_LiSnsrInfo_Skeleton;
				Basc_LiSnsrInfo_Skeleton* skeleton = (Basc_LiSnsrInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LiSnsrInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_AMBBri");
				uint16_t ret = skeleton->Get_AMBBri();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_AMBBri");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LiSnsrInfo_Get_AMBBri_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LiSnsrInfo_Get_AMBBri.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Get_AMBBri_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LiSnsrInfo_Get_HUDBri(carControl_Car_Control_Request * request){
					using Basc_LiSnsrInfo_Skeleton = com::changan::carControl::S2S::skeleton::Basc_LiSnsrInfo_Skeleton;
				Basc_LiSnsrInfo_Skeleton* skeleton = (Basc_LiSnsrInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LiSnsrInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_HUDBri");
				uint16_t ret = skeleton->Get_HUDBri();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_HUDBri");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LiSnsrInfo_Get_HUDBri_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LiSnsrInfo_Get_HUDBri.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Get_HUDBri_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_LiSnsrInfo_Get_LostComFltSt(carControl_Car_Control_Request * request){
					using Basc_LiSnsrInfo_Skeleton = com::changan::carControl::S2S::skeleton::Basc_LiSnsrInfo_Skeleton;
				Basc_LiSnsrInfo_Skeleton* skeleton = (Basc_LiSnsrInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_LiSnsrInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LostComFltSt");
				uint8_t ret = skeleton->Get_LostComFltSt();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LostComFltSt");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_LiSnsrInfo_Get_LostComFltSt_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_LiSnsrInfo_Get_LostComFltSt.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_LiSnsrInfo_Get_LostComFltSt_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_FrntWiperStsInfo_Get_WiperStsInfo(carControl_Car_Control_Request * request){
					using Basc_FrntWiperStsInfo_Skeleton = com::changan::carControl::WiperWasher::skeleton::Basc_FrntWiperStsInfo_Skeleton;
				Basc_FrntWiperStsInfo_Skeleton* skeleton = (Basc_FrntWiperStsInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_FrntWiperStsInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_WiperStsInfo");
				FWiperStsInfo ret = skeleton->Get_WiperStsInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_WiperStsInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_FrntWiperStsInfo_Get_WiperStsInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_FrntWiperStsInfo_Get_WiperStsInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_FrntWiperStsInfo_Get_WiperStsInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ViuGearShiftPosnInfo_Get_ViuGearShiftPosnInfo(carControl_Car_Control_Request * request){
					using Basc_ViuGearShiftPosnInfo_Skeleton = com::changan::carControl::VCU::skeleton::Basc_ViuGearShiftPosnInfo_Skeleton;
				Basc_ViuGearShiftPosnInfo_Skeleton* skeleton = (Basc_ViuGearShiftPosnInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ViuGearShiftPosnInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_ViuGearShiftPosnInfo");
				ViuGearShiftPosnInfo ret = skeleton->Get_ViuGearShiftPosnInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_ViuGearShiftPosnInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ViuGearShiftPosnInfo_Get_ViuGearShiftPosnInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ViuGearShiftPosnInfo_Get_ViuGearShiftPosnInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ViuGearShiftPosnInfo_Get_ViuGearShiftPosnInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_PosnLiInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiActCtrlInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiActCtrlInfo_Skeleton;
				Basc_ExtrLiActCtrlInfo_Skeleton* skeleton = (Basc_ExtrLiActCtrlInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiActCtrlInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_PosnLiInfo");
				PosnLiActCtrlInfo ret = skeleton->Get_PosnLiInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_PosnLiInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_PosnLiInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiActCtrlInfo_Get_PosnLiInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_PosnLiInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LoBeamInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiActCtrlInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiActCtrlInfo_Skeleton;
				Basc_ExtrLiActCtrlInfo_Skeleton* skeleton = (Basc_ExtrLiActCtrlInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiActCtrlInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LoBeamInfo");
				LoBeamActCtrlInfo ret = skeleton->Get_LoBeamInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LoBeamInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LoBeamInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiActCtrlInfo_Get_LoBeamInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LoBeamInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_HiBeamInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiActCtrlInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiActCtrlInfo_Skeleton;
				Basc_ExtrLiActCtrlInfo_Skeleton* skeleton = (Basc_ExtrLiActCtrlInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiActCtrlInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_HiBeamInfo");
				HiBeamActCtrlInfo ret = skeleton->Get_HiBeamInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_HiBeamInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_HiBeamInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiActCtrlInfo_Get_HiBeamInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_HiBeamInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_RvsLiInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiActCtrlInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiActCtrlInfo_Skeleton;
				Basc_ExtrLiActCtrlInfo_Skeleton* skeleton = (Basc_ExtrLiActCtrlInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiActCtrlInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_RvsLiInfo");
				RvsLiActCtrlInfo ret = skeleton->Get_RvsLiInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_RvsLiInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_RvsLiInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiActCtrlInfo_Get_RvsLiInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_RvsLiInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_DRLInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiActCtrlInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiActCtrlInfo_Skeleton;
				Basc_ExtrLiActCtrlInfo_Skeleton* skeleton = (Basc_ExtrLiActCtrlInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiActCtrlInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_DRLInfo");
				DRLActCtrlInfo ret = skeleton->Get_DRLInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_DRLInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_DRLInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiActCtrlInfo_Get_DRLInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_DRLInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_BrkLiInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiActCtrlInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiActCtrlInfo_Skeleton;
				Basc_ExtrLiActCtrlInfo_Skeleton* skeleton = (Basc_ExtrLiActCtrlInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiActCtrlInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_BrkLiInfo");
				BrkLiActCtrlInfo ret = skeleton->Get_BrkLiInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_BrkLiInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_BrkLiInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiActCtrlInfo_Get_BrkLiInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_BrkLiInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_TurnLiInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiActCtrlInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiActCtrlInfo_Skeleton;
				Basc_ExtrLiActCtrlInfo_Skeleton* skeleton = (Basc_ExtrLiActCtrlInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiActCtrlInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_TurnLiInfo");
				TurnLiActCtrlInfo ret = skeleton->Get_TurnLiInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_TurnLiInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_TurnLiInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiActCtrlInfo_Get_TurnLiInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_TurnLiInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_FogInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiActCtrlInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiActCtrlInfo_Skeleton;
				Basc_ExtrLiActCtrlInfo_Skeleton* skeleton = (Basc_ExtrLiActCtrlInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiActCtrlInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_FogInfo");
				FogActCtrlInfo ret = skeleton->Get_FogInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_FogInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_FogInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiActCtrlInfo_Get_FogInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_FogInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_ThrLiInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiActCtrlInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiActCtrlInfo_Skeleton;
				Basc_ExtrLiActCtrlInfo_Skeleton* skeleton = (Basc_ExtrLiActCtrlInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiActCtrlInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_ThrLiInfo");
				ThrLiActCtrlInfo ret = skeleton->Get_ThrLiInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_ThrLiInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_ThrLiInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiActCtrlInfo_Get_ThrLiInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_ThrLiInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LogoInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiActCtrlInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiActCtrlInfo_Skeleton;
				Basc_ExtrLiActCtrlInfo_Skeleton* skeleton = (Basc_ExtrLiActCtrlInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiActCtrlInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LogoInfo");
				LogoActCtrlInfo ret = skeleton->Get_LogoInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LogoInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LogoInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiActCtrlInfo_Get_LogoInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LogoInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LicenseInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiActCtrlInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiActCtrlInfo_Skeleton;
				Basc_ExtrLiActCtrlInfo_Skeleton* skeleton = (Basc_ExtrLiActCtrlInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiActCtrlInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_LicenseInfo");
				uint8_t ret = skeleton->Get_LicenseInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_LicenseInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LicenseInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiActCtrlInfo_Get_LicenseInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LicenseInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HdLampSwtReqInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiSwtReqInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiSwtReqInfo_Skeleton;
				Basc_ExtrLiSwtReqInfo_Skeleton* skeleton = (Basc_ExtrLiSwtReqInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiSwtReqInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_HdLampSwtReqInfo");
				uint8_t ret = skeleton->Get_HdLampSwtReqInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_HdLampSwtReqInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HdLampSwtReqInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiSwtReqInfo_Get_HdLampSwtReqInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HdLampSwtReqInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_TurnLiSwtReqInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiSwtReqInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiSwtReqInfo_Skeleton;
				Basc_ExtrLiSwtReqInfo_Skeleton* skeleton = (Basc_ExtrLiSwtReqInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiSwtReqInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_TurnLiSwtReqInfo");
				TurnLiKeySwtSt ret = skeleton->Get_TurnLiSwtReqInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_TurnLiSwtReqInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_TurnLiSwtReqInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiSwtReqInfo_Get_TurnLiSwtReqInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_TurnLiSwtReqInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HzrdSwtReqInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiSwtReqInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiSwtReqInfo_Skeleton;
				Basc_ExtrLiSwtReqInfo_Skeleton* skeleton = (Basc_ExtrLiSwtReqInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiSwtReqInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_HzrdSwtReqInfo");
				HzrdKeySwtSt ret = skeleton->Get_HzrdSwtReqInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_HzrdSwtReqInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HzrdSwtReqInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiSwtReqInfo_Get_HzrdSwtReqInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HzrdSwtReqInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HiBeamSwtReqInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiSwtReqInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiSwtReqInfo_Skeleton;
				Basc_ExtrLiSwtReqInfo_Skeleton* skeleton = (Basc_ExtrLiSwtReqInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiSwtReqInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_HiBeamSwtReqInfo");
				uint8_t ret = skeleton->Get_HiBeamSwtReqInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_HiBeamSwtReqInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HiBeamSwtReqInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiSwtReqInfo_Get_HiBeamSwtReqInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HiBeamSwtReqInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_OvertakeSwtReqInfo(carControl_Car_Control_Request * request){
					using Basc_ExtrLiSwtReqInfo_Skeleton = com::changan::carControl::ExteriorLight::skeleton::Basc_ExtrLiSwtReqInfo_Skeleton;
				Basc_ExtrLiSwtReqInfo_Skeleton* skeleton = (Basc_ExtrLiSwtReqInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ExtrLiSwtReqInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_OvertakeSwtReqInfo");
				uint8_t ret = skeleton->Get_OvertakeSwtReqInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_OvertakeSwtReqInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_OvertakeSwtReqInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_ExtrLiSwtReqInfo_Get_OvertakeSwtReqInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_OvertakeSwtReqInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Sys_TotalMilg_Get_TotalMilg(carControl_Car_Control_Request * request){
					using Sys_TotalMilg_Skeleton = com::changan::carControl::BasicService::skeleton::Sys_TotalMilg_Skeleton;
				Sys_TotalMilg_Skeleton* skeleton = (Sys_TotalMilg_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Sys_TotalMilg_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_TotalMilg");
				uint32_t ret = skeleton->Get_TotalMilg();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_TotalMilg");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Sys_TotalMilg_Get_TotalMilg_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Sys_TotalMilg_Get_TotalMilg.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Sys_TotalMilg_Get_TotalMilg_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Sys_TotalMilg_Get_ReevTotalMilg(carControl_Car_Control_Request * request){
					using Sys_TotalMilg_Skeleton = com::changan::carControl::BasicService::skeleton::Sys_TotalMilg_Skeleton;
				Sys_TotalMilg_Skeleton* skeleton = (Sys_TotalMilg_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Sys_TotalMilg_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_ReevTotalMilg");
				ReevTotalMilg ret = skeleton->Get_ReevTotalMilg();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_ReevTotalMilg");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Sys_TotalMilg_Get_ReevTotalMilg_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Sys_TotalMilg_Get_ReevTotalMilg.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Sys_TotalMilg_Get_ReevTotalMilg_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_DrSeatInfo_Get_SeatSts(carControl_Car_Control_Request * request){
					using Basc_DrSeatInfo_Skeleton = com::changan::carControl::Seat::skeleton::Basc_DrSeatInfo_Skeleton;
				Basc_DrSeatInfo_Skeleton* skeleton = (Basc_DrSeatInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_DrSeatInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SeatSts");
				DrSeatSts ret = skeleton->Get_SeatSts();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SeatSts");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_DrSeatInfo_Get_SeatSts_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_DrSeatInfo_Get_SeatSts.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_DrSeatInfo_Get_SeatSts_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_DrSeatInfo_Get_SeatPosInfo(carControl_Car_Control_Request * request){
					using Basc_DrSeatInfo_Skeleton = com::changan::carControl::Seat::skeleton::Basc_DrSeatInfo_Skeleton;
				Basc_DrSeatInfo_Skeleton* skeleton = (Basc_DrSeatInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_DrSeatInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SeatPosInfo");
				SeatPosInfo ret = skeleton->Get_SeatPosInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SeatPosInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_DrSeatInfo_Get_SeatPosInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_DrSeatInfo_Get_SeatPosInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_DrSeatInfo_Get_SeatPosInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void carControl_Car_Control_Basc_DrSeatInfo_Get_SeatInfo(carControl_Car_Control_Request * request){
					using Basc_DrSeatInfo_Skeleton = com::changan::carControl::Seat::skeleton::Basc_DrSeatInfo_Skeleton;
				Basc_DrSeatInfo_Skeleton* skeleton = (Basc_DrSeatInfo_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_DrSeatInfo_skeleton");
					if(NULL==skeleton){
						reply_fl_service_no_register(request->header.requestId);
						carControl_Car_Control_Request_free(request, DDS_FREE_ALL);
						return;
					}
					ASF_LOG_DEBUG_ARGS("pre skeleton->Get_SeatInfo");
				SeatInfo ret = skeleton->Get_SeatInfo();
					ASF_LOG_DEBUG_ARGS("after skeleton->Get_SeatInfo");
					carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
					reply_msg->header.relatedRequestId = request->header.requestId;
					reply_msg->data._d = carControl_Car_Control_Basc_DrSeatInfo_Get_SeatInfo_Hash;
					reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
					reply_msg->data._u.Basc_DrSeatInfo_Get_SeatInfo.return_ = ret;
					dds_return_t rc = CarControlFLSkeleton::get_instance().send_reply(reply_msg);
					ASF_LOG_DEBUG_ARGS("CarControlFLSkeleton::send_reply, hashId=[%d], reqId=[%d], rc=[%d]", carControl_Car_Control_Basc_DrSeatInfo_Get_SeatInfo_Hash, reply_msg->header.relatedRequestId.sequence_number.low, rc);
					carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
				}
				void on_carControl_fl_request_data_available(int32_t reader, void* arg) {
					ASF_LOG_DEBUG_ARGS("on_carControl_fl_request_data_available");
					dds_return_t rc;
					//printf("RPC server on data available!\n");
					carControl_Car_Control_Request* request;
					void* samples[1];
					dds_sample_info_t infos[1];
					samples[0] = carControl_Car_Control_Request__alloc();
					rc = dds_take_next(reader, samples, infos);
					if (rc < 0) {
						ASF_LOG_ERROR_ARGS("on_carControl_fl_request_data_available, dds_take_next faild, rc=[%d]",rc);
						DDS_FATAL("dds_take_next failed!\n");
					}
					if (infos[0].valid_data)
					{
						request = (carControl_Car_Control_Request*)samples[0];
						int32_t funID = request->data._d;
						ASF_LOG_DEBUG_ARGS("on_carControl_fl_request_data_available, hashId=[%d], reqId=[%d]", funID,  request->header.requestId.sequence_number.low);
						switch (funID) {
						case carControl_Car_Control_Basc_PhysicsStFrtGate_Get_PhySt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_PhysicsStFrtGate_Get_PhySt, request);
				            return;
				        }
						case carControl_Car_Control_Basc_BattHVSts_Get_BattHVSts_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_BattHVSts_Get_BattHVSts, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_PowerShiftSwt_RR_PwrShiftSwt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_PowerShiftSwt_RR_PwrShiftSwt, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_PowerShiftSwt_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_PowerShiftSwt_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Enh_Horn_RR_HornCtrl_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_Horn_RR_HornCtrl, request);
				            return;
				        }
						case carControl_Car_Control_Enh_Horn_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_Horn_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Enh_Horn_Get_HornLogicSt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_Horn_Get_HornLogicSt, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_TPMSWarn_Get_TireWarnInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_TPMSWarn_Get_TireWarnInfo, request);
				            return;
				        }
						case carControl_Car_Control_Enh_TurnLi_Get_LoglCtrlSt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_TurnLi_Get_LoglCtrlSt, request);
				            return;
				        }
						case carControl_Car_Control_Enh_TurnLi_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_TurnLi_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Enh_TurnLi_Get_SrvRespSt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_TurnLi_Get_SrvRespSt, request);
				            return;
				        }
						case carControl_Car_Control_Enh_TurnLi_Get_TurnLiFltMonrSt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_TurnLi_Get_TurnLiFltMonrSt, request);
				            return;
				        }
						case carControl_Car_Control_Enh_TurnLi_RR_TurnOFF_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_TurnLi_RR_TurnOFF, request);
				            return;
				        }
						case carControl_Car_Control_Enh_TurnLi_RR_TurnON_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_TurnLi_RR_TurnON, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_HdLampCtrl_RR_CombHdLampCtrl_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_HdLampCtrl_RR_CombHdLampCtrl, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_HdLampCtrl_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_HdLampCtrl_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_HdLampCtrl_Get_HdLampRunMod_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_HdLampCtrl_Get_HdLampRunMod, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_HdLampCtrl_Get_ClusterPosnLiSt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_HdLampCtrl_Get_ClusterPosnLiSt, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_HdLampCtrl_Get_ClusterLoBeamSt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_HdLampCtrl_Get_ClusterLoBeamSt, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_DoorLockDrvAll_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_DoorLockDrvAll_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_DoorLockDrvAll_RR_ObjDrv_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_DoorLockDrvAll_RR_ObjDrv, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_WinAllCtrl_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_WinAllCtrl_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_WinAllCtrl_RR_ObjDrv_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_WinAllCtrl_RR_ObjDrv, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_FrntWiperCtrl_RR_WiperCtrl_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_FrntWiperCtrl_RR_WiperCtrl, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_FrntWiperCtrl_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_FrntWiperCtrl_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_MirrElecFoldUnfold_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_MirrElecFoldUnfold_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_MirrElecFoldUnfold_RR_MirrFoldUnfoldCrl_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_MirrElecFoldUnfold_RR_MirrFoldUnfoldCrl, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_LeMirrLaneLED_RR_MirrLaneLEDCrl_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_LeMirrLaneLED_RR_MirrLaneLEDCrl, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_LeMirrLaneLED_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_LeMirrLaneLED_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_CrashStsInfo_Get_CrashStsInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_CrashStsInfo_Get_CrashStsInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_BucSwtSts_Get_BucSwtSts_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_BucSwtSts_Get_BucSwtSts, request);
				            return;
				        }
						case carControl_Car_Control_Sys_TurnLiHzrdSwt_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Sys_TurnLiHzrdSwt_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Sys_TurnLiHzrdSwt_Get_ClusterTurnLiSt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Sys_TurnLiHzrdSwt_Get_ClusterTurnLiSt, request);
				            return;
				        }
						case carControl_Car_Control_Basc_FrntWiperFltSts_Get_WiperFltSts_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_FrntWiperFltSts_Get_WiperFltSts, request);
				            return;
				        }
						case carControl_Car_Control_Basc_MirrStsInfo_Get_StsInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_MirrStsInfo_Get_StsInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_MirrLaneLEDFltSts_Get_LaneLEDFltSts_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_MirrLaneLEDFltSts_Get_LaneLEDFltSts, request);
				            return;
				        }
						case carControl_Car_Control_Sys_LoChrgfun_RR_LoChrgfuncSet_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Sys_LoChrgfun_RR_LoChrgfuncSet, request);
				            return;
				        }
						case carControl_Car_Control_Sys_LoChrgfun_Get_LoChrgfuncsts_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Sys_LoChrgfun_Get_LoChrgfuncsts, request);
				            return;
				        }
						case carControl_Car_Control_Sys_LoChrgfun_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Sys_LoChrgfun_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_PhysicsStWin_Get_PhyStWinAll_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_PhysicsStWin_Get_PhyStWinAll, request);
				            return;
				        }
						case carControl_Car_Control_Basc_PhysicsStWin_Get_PosWinAll_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_PhysicsStWin_Get_PosWinAll, request);
				            return;
				        }
						case carControl_Car_Control_Basc_PhysicsStDoor_Get_PhyStAll_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_PhysicsStDoor_Get_PhyStAll, request);
				            return;
				        }
						case carControl_Car_Control_Basc_PhysicsStDoor_Get_PosAll_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_PhysicsStDoor_Get_PosAll, request);
				            return;
				        }
						case carControl_Car_Control_Basc_PhysicsStDoor_Get_DoorStAll_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_PhysicsStDoor_Get_DoorStAll, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LogicStLock_Get_LocStAll_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LogicStLock_Get_LocStAll, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_BleRpaCtl_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_BleRpaCtl_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_BleRpaCtl_RR_BleRpaCtl_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_BleRpaCtl_RR_BleRpaCtl, request);
				            return;
				        }
						case carControl_Car_Control_Cnr_BleRpaCtl_Get_BleRpaCtl_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Cnr_BleRpaCtl_Get_BleRpaCtl, request);
				            return;
				        }
						case carControl_Car_Control_Basc_BLEPhyKeySer_Get_BLEPhyKeyInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_BLEPhyKeySer_Get_BLEPhyKeyInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_C2DmdPrmInfo_Get_C2DmdPrmInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_C2DmdPrmInfo_Get_C2DmdPrmInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiFltInfo_Get_PosnLiFltInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiFltInfo_Get_PosnLiFltInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiFltInfo_Get_LoBeamFltInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiFltInfo_Get_LoBeamFltInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiFltInfo_Get_HiBeamFltInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiFltInfo_Get_HiBeamFltInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiFltInfo_Get_RvsLiFltInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiFltInfo_Get_RvsLiFltInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiFltInfo_Get_DRLFltInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiFltInfo_Get_DRLFltInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiFltInfo_Get_BrkLiFltInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiFltInfo_Get_BrkLiFltInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiFltInfo_Get_TurnLiFltInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiFltInfo_Get_TurnLiFltInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiFltInfo_Get_FogFltInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiFltInfo_Get_FogFltInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_RLSSts_Get_WiperRLSSts_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_RLSSts_Get_WiperRLSSts, request);
				            return;
				        }
						case carControl_Car_Control_Basc_MFSSwtInfo_Get_SwtInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_MFSSwtInfo_Get_SwtInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_MFSSwtInfo_Get_FltSt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_MFSSwtInfo_Get_FltSt, request);
				            return;
				        }
						case carControl_Car_Control_Enh_PowerShiftDrv_RR_PowerOn_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_PowerShiftDrv_RR_PowerOn, request);
				            return;
				        }
						case carControl_Car_Control_Enh_PowerShiftDrv_Get_SrvOperInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_PowerShiftDrv_Get_SrvOperInfo, request);
				            return;
				        }
						case carControl_Car_Control_Enh_PowerShiftDrv_Get_PowerShiftSwtSt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_PowerShiftDrv_Get_PowerShiftSwtSt, request);
				            return;
				        }
						case carControl_Car_Control_Enh_PowerShiftDrv_RR_PwrPinCtr_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Enh_PowerShiftDrv_RR_PwrPinCtr, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LiSnsrInfo_RR_LiSnsrThd_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LiSnsrInfo_RR_LiSnsrThd, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LiSnsrInfo_Get_SolarLe_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LiSnsrInfo_Get_SolarLe, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LiSnsrInfo_Get_SolarRi_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LiSnsrInfo_Get_SolarRi, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrMod_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrMod, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrLoBeamReq_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrLoBeamReq, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrRunSt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrRunSt, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrErrSt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LiSnsrInfo_Get_LiSnsrErrSt, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LiSnsrInfo_Get_IRBri_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LiSnsrInfo_Get_IRBri, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LiSnsrInfo_Get_FWBri_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LiSnsrInfo_Get_FWBri, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LiSnsrInfo_Get_AMBBri_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LiSnsrInfo_Get_AMBBri, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LiSnsrInfo_Get_HUDBri_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LiSnsrInfo_Get_HUDBri, request);
				            return;
				        }
						case carControl_Car_Control_Basc_LiSnsrInfo_Get_LostComFltSt_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_LiSnsrInfo_Get_LostComFltSt, request);
				            return;
				        }
						case carControl_Car_Control_Basc_FrntWiperStsInfo_Get_WiperStsInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_FrntWiperStsInfo_Get_WiperStsInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ViuGearShiftPosnInfo_Get_ViuGearShiftPosnInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ViuGearShiftPosnInfo_Get_ViuGearShiftPosnInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_PosnLiInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_PosnLiInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LoBeamInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LoBeamInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_HiBeamInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_HiBeamInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_RvsLiInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_RvsLiInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_DRLInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_DRLInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_BrkLiInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_BrkLiInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_TurnLiInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_TurnLiInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_FogInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_FogInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_ThrLiInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_ThrLiInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LogoInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LogoInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LicenseInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiActCtrlInfo_Get_LicenseInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HdLampSwtReqInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HdLampSwtReqInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_TurnLiSwtReqInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_TurnLiSwtReqInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HzrdSwtReqInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HzrdSwtReqInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HiBeamSwtReqInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_HiBeamSwtReqInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_OvertakeSwtReqInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_ExtrLiSwtReqInfo_Get_OvertakeSwtReqInfo, request);
				            return;
				        }
						case carControl_Car_Control_Sys_TotalMilg_Get_TotalMilg_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Sys_TotalMilg_Get_TotalMilg, request);
				            return;
				        }
						case carControl_Car_Control_Sys_TotalMilg_Get_ReevTotalMilg_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Sys_TotalMilg_Get_ReevTotalMilg, request);
				            return;
				        }
						case carControl_Car_Control_Basc_DrSeatInfo_Get_SeatSts_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_DrSeatInfo_Get_SeatSts, request);
				            return;
				        }
						case carControl_Car_Control_Basc_DrSeatInfo_Get_SeatPosInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_DrSeatInfo_Get_SeatPosInfo, request);
				            return;
				        }
						case carControl_Car_Control_Basc_DrSeatInfo_Get_SeatInfo_Hash:
						{
							DDSServer::execute(carControl_Car_Control_Basc_DrSeatInfo_Get_SeatInfo, request);
				            return;
				        }
						default:
							carControl_Car_Control_Reply* reply_msg = carControl_Car_Control_Reply__alloc();
							reply_msg->header.relatedRequestId = request->header.requestId;
							reply_msg->header.remoteEx = DDS_RPC_REMOTE_METHOD_NOT_FOUND;
				  			CarControlFLSkeleton::get_instance().send_reply(reply_msg);
							carControl_Car_Control_Reply_free(reply_msg, DDS_FREE_ALL);
							break;
						}
					}
					carControl_Car_Control_Request_free(samples[0], DDS_FREE_ALL);
				}
				CarControlFLSkeleton::CarControlFLSkeleton() {}

				void on_CarControlFLSkeleton_request_subscription_matched_cb(dds_entity_t reader, const dds_subscription_matched_status_t  status, void* arg) {
					ASF_LOG_DEBUG_ARGS("on_CarControlFLSkeleton_request_subscription_matched_cb, reader=[%d], current_count=[%d]", reader, status.current_count);
					auto handlers=CarControlFLSkeleton::get_instance().get_registered_consumer_matched_handler();
					ConsumerMatchedStatus data=DDSUtil::get_consumer_matched_status(reader,status);
				  	CarControlFLSkeleton::get_instance().set_last_consumer_matched_status(data);
					for (const auto& it : handlers) {
						it.second(data);
					}
				}

				void CarControlFLSkeleton::wait_client_online()
				{
					this->wait_for_pub_online(dds_mcu_rpc_handle.writer);

				}

				void CarControlFLSkeleton::init(std::string config) {
					std::lock_guard<std::mutex> guard(init_mutex);
					if (this->init_flag) {
						return;
					}
					logconfig_Skeleton::get_instance().init(config);
					DDSUtil::event_pub_init(VIU_DDS_DOMAIN_ID,
						"viu_fl_mcu_notify",
						&carControl_Car_Control_Ntf_desc,
						&this->dds_mcu_notify_handle,
					  	NULL, {LOCAL_VIU_TOKEN, DIRECT_AND_LOCAL_VIU_TOKEN, "*ntf"},
						config);

					uint8_t  service_id_array[467] = {0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x60,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x80,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x8,0x2,0x98,0x0,0x40,0x80,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2};
					DDSUtil::event_sub_init(VIU_DDS_DOMAIN_ID,
						"viu_fl_mcu_rpc_service_request",
						&carControl_Car_Control_Request_desc,
					  	&on_carControl_fl_request_data_available,
						NULL,
						&this->dds_mcu_rpc_handle,
						&on_CarControlFLSkeleton_request_subscription_matched_cb,
						{LOCAL_VIU_TOKEN, DIRECT_AND_LOCAL_VIU_TOKEN, "rpc"},
						{467,service_id_array},
						config
					);

					DDSUtil::event_pub_init(VIU_DDS_DOMAIN_ID,
						"viu_fl_mcu_rpc_service_reply",
						&carControl_Car_Control_Reply_desc,
						&this->dds_mcu_rpc_handle,
						NULL, {LOCAL_VIU_TOKEN, DIRECT_AND_LOCAL_VIU_TOKEN, "rpc"},
					  	config
					);





































					this->init_flag = true;
				}

				CarControlFLSkeleton& CarControlFLSkeleton::get_instance() {
					static CarControlFLSkeleton instance;
					return instance;
				}
				int32_t CarControlFLSkeleton::send(const void* data) {
					return DDSUtil::send(this->dds_mcu_notify_handle.writer, data);
				}
				int32_t CarControlFLSkeleton::send_reply(const void* data) {
					return DDSUtil::send(this->dds_mcu_rpc_handle.writer, data);
				}
				void CarControlFLSkeleton::register_consumer_matched_handler(std::string name,EventReceiveHandler<const ConsumerMatchedStatus&> handler){
					if(NULL==handler || name.empty()){
						return;
					}
					consumer_matched_handler_map[name]=handler;
					if(this->init_flag && this->consumer_matched_status.current_count>0){
					  	handler(this->consumer_matched_status);
					}
				}
				std::unordered_map<std::string, EventReceiveHandler<const ConsumerMatchedStatus&>> CarControlFLSkeleton::get_registered_consumer_matched_handler(){
					return this->consumer_matched_handler_map;
				}
				void CarControlFLSkeleton::set_last_consumer_matched_status(ConsumerMatchedStatus status){
					this->consumer_matched_status=status;
				}
			}
		}
	}
}

