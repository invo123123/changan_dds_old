// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_basic_objfusion32.proto

#include "hmi_basic_objfusion32.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace HmiInterface {
constexpr ADObjfusion::ADObjfusion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objx_long_vel_rel_(0)
  , objx_lat_vel_rel_(0)
  , objx_refer_points_type_(0u)
  , objx_refer_pointslongitudinal_distance_(0)
  , objx_refer_pointslateral_distance_(0)
  , objx_trackid_(0u)
  , objx_type_(0u)
  , objx_status_(0u)
  , objx_confidence_(0)
  , objx_headingangle_(0)
  , objx_long_rel_(0)
  , objx_lat_rel_(0)
  , objx_long_vel_(0)
  , objx_lat_vel_(0)
  , objx_long_acc_(0)
  , objx_lat_acc_(0)
  , objx_high_(0)
  , objx_length_(0)
  , objx_width_(0)
  , objx_age_(0u)
  , objx_crosslaneflag_(0u)
  , objx_crosslanevalue_(0)
  , objx_cut_status_(0u)
  , objx_left_lightstatus_(0u)
  , objx_obstaclearea_(0u)
  , objx_right_lightstatus_(0u)
  , objx_waring_lightstatus_(0u)
  , objx_brake_lightstatus_(0u)
  , objx_foglightstatus_(0u)
  , objx_detection_(0u)
  , objx_bsd_status_(0u)
  , objx_ldc_(0u)
  , objx_oa_(0u)
  , objx_sound_id_(0u){}
struct ADObjfusionDefaultTypeInternal {
  constexpr ADObjfusionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ADObjfusionDefaultTypeInternal() {}
  union {
    ADObjfusion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ADObjfusionDefaultTypeInternal _ADObjfusion_default_instance_;
constexpr BasicObjfusion32::BasicObjfusion32(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ad_objfusion_(){}
struct BasicObjfusion32DefaultTypeInternal {
  constexpr BasicObjfusion32DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BasicObjfusion32DefaultTypeInternal() {}
  union {
    BasicObjfusion32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BasicObjfusion32DefaultTypeInternal _BasicObjfusion32_default_instance_;
}  // namespace HmiInterface
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hmi_5fbasic_5fobjfusion32_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hmi_5fbasic_5fobjfusion32_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hmi_5fbasic_5fobjfusion32_2eproto = nullptr;

const uint32_t TableStruct_hmi_5fbasic_5fobjfusion32_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_long_vel_rel_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_lat_vel_rel_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_refer_points_type_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_refer_pointslongitudinal_distance_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_refer_pointslateral_distance_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_trackid_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_type_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_status_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_confidence_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_headingangle_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_long_rel_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_lat_rel_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_long_vel_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_lat_vel_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_long_acc_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_lat_acc_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_high_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_length_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_width_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_age_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_crosslaneflag_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_crosslanevalue_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_cut_status_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_left_lightstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_obstaclearea_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_right_lightstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_waring_lightstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_brake_lightstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_foglightstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_detection_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_bsd_status_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_ldc_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_oa_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADObjfusion, objx_sound_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::BasicObjfusion32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::BasicObjfusion32, ad_objfusion_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::HmiInterface::ADObjfusion)},
  { 40, -1, -1, sizeof(::HmiInterface::BasicObjfusion32)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_ADObjfusion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_BasicObjfusion32_default_instance_),
};

const char descriptor_table_protodef_hmi_5fbasic_5fobjfusion32_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033hmi_basic_objfusion32.proto\022\014HmiInterf"
  "ace\"\371\006\n\013ADObjfusion\022\031\n\021objx_long_vel_rel"
  "\030\001 \001(\002\022\030\n\020objx_lat_vel_rel\030\002 \001(\002\022\036\n\026objx"
  "_refer_points_type\030\003 \001(\r\022.\n&objx_refer_p"
  "ointslongitudinal_distance\030\004 \001(\002\022)\n!objx"
  "_refer_pointslateral_distance\030\005 \001(\002\022\024\n\014o"
  "bjx_trackid\030\006 \001(\r\022\021\n\tobjx_type\030\007 \001(\r\022\023\n\013"
  "objx_status\030\010 \001(\r\022\027\n\017objx_confidence\030\t \001"
  "(\002\022\031\n\021objx_headingangle\030\n \001(\002\022\025\n\robjx_lo"
  "ng_rel\030\013 \001(\002\022\024\n\014objx_lat_rel\030\014 \001(\002\022\025\n\rob"
  "jx_long_vel\030\r \001(\002\022\024\n\014objx_lat_vel\030\016 \001(\002\022"
  "\025\n\robjx_long_acc\030\017 \001(\002\022\024\n\014objx_lat_acc\030\020"
  " \001(\002\022\021\n\tobjx_high\030\021 \001(\002\022\023\n\013objx_length\030\022"
  " \001(\002\022\022\n\nobjx_width\030\023 \001(\002\022\020\n\010objx_age\030\024 \001"
  "(\r\022\032\n\022objx_crosslaneflag\030\025 \001(\r\022\033\n\023objx_c"
  "rosslanevalue\030\026 \001(\002\022\027\n\017objx_cut_status\030\027"
  " \001(\r\022\035\n\025objx_left_lightstatus\030\030 \001(\r\022\031\n\021o"
  "bjx_obstaclearea\030\031 \001(\r\022\036\n\026objx_right_lig"
  "htstatus\030\032 \001(\r\022\037\n\027objx_waring_lightstatu"
  "s\030\033 \001(\r\022\036\n\026objx_brake_lightstatus\030\034 \001(\r\022"
  "\033\n\023objx_foglightstatus\030\035 \001(\r\022\026\n\016objx_det"
  "ection\030\036 \001(\r\022\027\n\017objx_bsd_status\030\037 \001(\r\022\020\n"
  "\010objx_ldc\030  \001(\r\022\017\n\007objx_oa\030! \001(\r\022\025\n\robjx"
  "_sound_id\030\" \001(\r\"C\n\020BasicObjfusion32\022/\n\014a"
  "d_objfusion\030\001 \003(\0132\031.HmiInterface.ADObjfu"
  "sionb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hmi_5fbasic_5fobjfusion32_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5fbasic_5fobjfusion32_2eproto = {
  false, false, 1012, descriptor_table_protodef_hmi_5fbasic_5fobjfusion32_2eproto, "hmi_basic_objfusion32.proto", 
  &descriptor_table_hmi_5fbasic_5fobjfusion32_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_hmi_5fbasic_5fobjfusion32_2eproto::offsets,
  file_level_metadata_hmi_5fbasic_5fobjfusion32_2eproto, file_level_enum_descriptors_hmi_5fbasic_5fobjfusion32_2eproto, file_level_service_descriptors_hmi_5fbasic_5fobjfusion32_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_hmi_5fbasic_5fobjfusion32_2eproto_getter() {
  return &descriptor_table_hmi_5fbasic_5fobjfusion32_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_hmi_5fbasic_5fobjfusion32_2eproto(&descriptor_table_hmi_5fbasic_5fobjfusion32_2eproto);
namespace HmiInterface {

// ===================================================================

class ADObjfusion::_Internal {
 public:
};

ADObjfusion::ADObjfusion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.ADObjfusion)
}
ADObjfusion::ADObjfusion(const ADObjfusion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&objx_long_vel_rel_, &from.objx_long_vel_rel_,
    static_cast<size_t>(reinterpret_cast<char*>(&objx_sound_id_) -
    reinterpret_cast<char*>(&objx_long_vel_rel_)) + sizeof(objx_sound_id_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.ADObjfusion)
}

inline void ADObjfusion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&objx_long_vel_rel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&objx_sound_id_) -
    reinterpret_cast<char*>(&objx_long_vel_rel_)) + sizeof(objx_sound_id_));
}

ADObjfusion::~ADObjfusion() {
  // @@protoc_insertion_point(destructor:HmiInterface.ADObjfusion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ADObjfusion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADObjfusion::ArenaDtor(void* object) {
  ADObjfusion* _this = reinterpret_cast< ADObjfusion* >(object);
  (void)_this;
}
void ADObjfusion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ADObjfusion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ADObjfusion::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.ADObjfusion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&objx_long_vel_rel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&objx_sound_id_) -
      reinterpret_cast<char*>(&objx_long_vel_rel_)) + sizeof(objx_sound_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADObjfusion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float objx_long_vel_rel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          objx_long_vel_rel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objx_lat_vel_rel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          objx_lat_vel_rel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_refer_points_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          objx_refer_points_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float objx_refer_pointslongitudinal_distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          objx_refer_pointslongitudinal_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objx_refer_pointslateral_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          objx_refer_pointslateral_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_trackid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          objx_trackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          objx_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          objx_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float objx_confidence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          objx_confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objx_headingangle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          objx_headingangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objx_long_rel = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          objx_long_rel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objx_lat_rel = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          objx_lat_rel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objx_long_vel = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          objx_long_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objx_lat_vel = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          objx_lat_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objx_long_acc = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          objx_long_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objx_lat_acc = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          objx_lat_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objx_high = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          objx_high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objx_length = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          objx_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float objx_width = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          objx_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_age = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          objx_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_crosslaneflag = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          objx_crosslaneflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float objx_crosslanevalue = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          objx_crosslanevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_cut_status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          objx_cut_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_left_lightstatus = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          objx_left_lightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_obstaclearea = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          objx_obstaclearea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_right_lightstatus = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          objx_right_lightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_waring_lightstatus = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          objx_waring_lightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_brake_lightstatus = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          objx_brake_lightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_foglightstatus = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          objx_foglightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_detection = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          objx_detection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_bsd_status = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          objx_bsd_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_ldc = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          objx_ldc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_oa = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          objx_oa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 objx_sound_id = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          objx_sound_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADObjfusion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.ADObjfusion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float objx_long_vel_rel = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_long_vel_rel = this->_internal_objx_long_vel_rel();
  uint32_t raw_objx_long_vel_rel;
  memcpy(&raw_objx_long_vel_rel, &tmp_objx_long_vel_rel, sizeof(tmp_objx_long_vel_rel));
  if (raw_objx_long_vel_rel != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_objx_long_vel_rel(), target);
  }

  // float objx_lat_vel_rel = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_lat_vel_rel = this->_internal_objx_lat_vel_rel();
  uint32_t raw_objx_lat_vel_rel;
  memcpy(&raw_objx_lat_vel_rel, &tmp_objx_lat_vel_rel, sizeof(tmp_objx_lat_vel_rel));
  if (raw_objx_lat_vel_rel != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_objx_lat_vel_rel(), target);
  }

  // uint32 objx_refer_points_type = 3;
  if (this->_internal_objx_refer_points_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_objx_refer_points_type(), target);
  }

  // float objx_refer_pointslongitudinal_distance = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_refer_pointslongitudinal_distance = this->_internal_objx_refer_pointslongitudinal_distance();
  uint32_t raw_objx_refer_pointslongitudinal_distance;
  memcpy(&raw_objx_refer_pointslongitudinal_distance, &tmp_objx_refer_pointslongitudinal_distance, sizeof(tmp_objx_refer_pointslongitudinal_distance));
  if (raw_objx_refer_pointslongitudinal_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_objx_refer_pointslongitudinal_distance(), target);
  }

  // float objx_refer_pointslateral_distance = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_refer_pointslateral_distance = this->_internal_objx_refer_pointslateral_distance();
  uint32_t raw_objx_refer_pointslateral_distance;
  memcpy(&raw_objx_refer_pointslateral_distance, &tmp_objx_refer_pointslateral_distance, sizeof(tmp_objx_refer_pointslateral_distance));
  if (raw_objx_refer_pointslateral_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_objx_refer_pointslateral_distance(), target);
  }

  // uint32 objx_trackid = 6;
  if (this->_internal_objx_trackid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_objx_trackid(), target);
  }

  // uint32 objx_type = 7;
  if (this->_internal_objx_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_objx_type(), target);
  }

  // uint32 objx_status = 8;
  if (this->_internal_objx_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_objx_status(), target);
  }

  // float objx_confidence = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_confidence = this->_internal_objx_confidence();
  uint32_t raw_objx_confidence;
  memcpy(&raw_objx_confidence, &tmp_objx_confidence, sizeof(tmp_objx_confidence));
  if (raw_objx_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_objx_confidence(), target);
  }

  // float objx_headingangle = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_headingangle = this->_internal_objx_headingangle();
  uint32_t raw_objx_headingangle;
  memcpy(&raw_objx_headingangle, &tmp_objx_headingangle, sizeof(tmp_objx_headingangle));
  if (raw_objx_headingangle != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_objx_headingangle(), target);
  }

  // float objx_long_rel = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_long_rel = this->_internal_objx_long_rel();
  uint32_t raw_objx_long_rel;
  memcpy(&raw_objx_long_rel, &tmp_objx_long_rel, sizeof(tmp_objx_long_rel));
  if (raw_objx_long_rel != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_objx_long_rel(), target);
  }

  // float objx_lat_rel = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_lat_rel = this->_internal_objx_lat_rel();
  uint32_t raw_objx_lat_rel;
  memcpy(&raw_objx_lat_rel, &tmp_objx_lat_rel, sizeof(tmp_objx_lat_rel));
  if (raw_objx_lat_rel != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_objx_lat_rel(), target);
  }

  // float objx_long_vel = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_long_vel = this->_internal_objx_long_vel();
  uint32_t raw_objx_long_vel;
  memcpy(&raw_objx_long_vel, &tmp_objx_long_vel, sizeof(tmp_objx_long_vel));
  if (raw_objx_long_vel != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_objx_long_vel(), target);
  }

  // float objx_lat_vel = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_lat_vel = this->_internal_objx_lat_vel();
  uint32_t raw_objx_lat_vel;
  memcpy(&raw_objx_lat_vel, &tmp_objx_lat_vel, sizeof(tmp_objx_lat_vel));
  if (raw_objx_lat_vel != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_objx_lat_vel(), target);
  }

  // float objx_long_acc = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_long_acc = this->_internal_objx_long_acc();
  uint32_t raw_objx_long_acc;
  memcpy(&raw_objx_long_acc, &tmp_objx_long_acc, sizeof(tmp_objx_long_acc));
  if (raw_objx_long_acc != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_objx_long_acc(), target);
  }

  // float objx_lat_acc = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_lat_acc = this->_internal_objx_lat_acc();
  uint32_t raw_objx_lat_acc;
  memcpy(&raw_objx_lat_acc, &tmp_objx_lat_acc, sizeof(tmp_objx_lat_acc));
  if (raw_objx_lat_acc != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_objx_lat_acc(), target);
  }

  // float objx_high = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_high = this->_internal_objx_high();
  uint32_t raw_objx_high;
  memcpy(&raw_objx_high, &tmp_objx_high, sizeof(tmp_objx_high));
  if (raw_objx_high != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_objx_high(), target);
  }

  // float objx_length = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_length = this->_internal_objx_length();
  uint32_t raw_objx_length;
  memcpy(&raw_objx_length, &tmp_objx_length, sizeof(tmp_objx_length));
  if (raw_objx_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_objx_length(), target);
  }

  // float objx_width = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_width = this->_internal_objx_width();
  uint32_t raw_objx_width;
  memcpy(&raw_objx_width, &tmp_objx_width, sizeof(tmp_objx_width));
  if (raw_objx_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_objx_width(), target);
  }

  // uint32 objx_age = 20;
  if (this->_internal_objx_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_objx_age(), target);
  }

  // uint32 objx_crosslaneflag = 21;
  if (this->_internal_objx_crosslaneflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_objx_crosslaneflag(), target);
  }

  // float objx_crosslanevalue = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_crosslanevalue = this->_internal_objx_crosslanevalue();
  uint32_t raw_objx_crosslanevalue;
  memcpy(&raw_objx_crosslanevalue, &tmp_objx_crosslanevalue, sizeof(tmp_objx_crosslanevalue));
  if (raw_objx_crosslanevalue != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_objx_crosslanevalue(), target);
  }

  // uint32 objx_cut_status = 23;
  if (this->_internal_objx_cut_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_objx_cut_status(), target);
  }

  // uint32 objx_left_lightstatus = 24;
  if (this->_internal_objx_left_lightstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_objx_left_lightstatus(), target);
  }

  // uint32 objx_obstaclearea = 25;
  if (this->_internal_objx_obstaclearea() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_objx_obstaclearea(), target);
  }

  // uint32 objx_right_lightstatus = 26;
  if (this->_internal_objx_right_lightstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_objx_right_lightstatus(), target);
  }

  // uint32 objx_waring_lightstatus = 27;
  if (this->_internal_objx_waring_lightstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_objx_waring_lightstatus(), target);
  }

  // uint32 objx_brake_lightstatus = 28;
  if (this->_internal_objx_brake_lightstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_objx_brake_lightstatus(), target);
  }

  // uint32 objx_foglightstatus = 29;
  if (this->_internal_objx_foglightstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_objx_foglightstatus(), target);
  }

  // uint32 objx_detection = 30;
  if (this->_internal_objx_detection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_objx_detection(), target);
  }

  // uint32 objx_bsd_status = 31;
  if (this->_internal_objx_bsd_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_objx_bsd_status(), target);
  }

  // uint32 objx_ldc = 32;
  if (this->_internal_objx_ldc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_objx_ldc(), target);
  }

  // uint32 objx_oa = 33;
  if (this->_internal_objx_oa() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_objx_oa(), target);
  }

  // uint32 objx_sound_id = 34;
  if (this->_internal_objx_sound_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_objx_sound_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.ADObjfusion)
  return target;
}

size_t ADObjfusion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.ADObjfusion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float objx_long_vel_rel = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_long_vel_rel = this->_internal_objx_long_vel_rel();
  uint32_t raw_objx_long_vel_rel;
  memcpy(&raw_objx_long_vel_rel, &tmp_objx_long_vel_rel, sizeof(tmp_objx_long_vel_rel));
  if (raw_objx_long_vel_rel != 0) {
    total_size += 1 + 4;
  }

  // float objx_lat_vel_rel = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_lat_vel_rel = this->_internal_objx_lat_vel_rel();
  uint32_t raw_objx_lat_vel_rel;
  memcpy(&raw_objx_lat_vel_rel, &tmp_objx_lat_vel_rel, sizeof(tmp_objx_lat_vel_rel));
  if (raw_objx_lat_vel_rel != 0) {
    total_size += 1 + 4;
  }

  // uint32 objx_refer_points_type = 3;
  if (this->_internal_objx_refer_points_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_objx_refer_points_type());
  }

  // float objx_refer_pointslongitudinal_distance = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_refer_pointslongitudinal_distance = this->_internal_objx_refer_pointslongitudinal_distance();
  uint32_t raw_objx_refer_pointslongitudinal_distance;
  memcpy(&raw_objx_refer_pointslongitudinal_distance, &tmp_objx_refer_pointslongitudinal_distance, sizeof(tmp_objx_refer_pointslongitudinal_distance));
  if (raw_objx_refer_pointslongitudinal_distance != 0) {
    total_size += 1 + 4;
  }

  // float objx_refer_pointslateral_distance = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_refer_pointslateral_distance = this->_internal_objx_refer_pointslateral_distance();
  uint32_t raw_objx_refer_pointslateral_distance;
  memcpy(&raw_objx_refer_pointslateral_distance, &tmp_objx_refer_pointslateral_distance, sizeof(tmp_objx_refer_pointslateral_distance));
  if (raw_objx_refer_pointslateral_distance != 0) {
    total_size += 1 + 4;
  }

  // uint32 objx_trackid = 6;
  if (this->_internal_objx_trackid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_objx_trackid());
  }

  // uint32 objx_type = 7;
  if (this->_internal_objx_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_objx_type());
  }

  // uint32 objx_status = 8;
  if (this->_internal_objx_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_objx_status());
  }

  // float objx_confidence = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_confidence = this->_internal_objx_confidence();
  uint32_t raw_objx_confidence;
  memcpy(&raw_objx_confidence, &tmp_objx_confidence, sizeof(tmp_objx_confidence));
  if (raw_objx_confidence != 0) {
    total_size += 1 + 4;
  }

  // float objx_headingangle = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_headingangle = this->_internal_objx_headingangle();
  uint32_t raw_objx_headingangle;
  memcpy(&raw_objx_headingangle, &tmp_objx_headingangle, sizeof(tmp_objx_headingangle));
  if (raw_objx_headingangle != 0) {
    total_size += 1 + 4;
  }

  // float objx_long_rel = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_long_rel = this->_internal_objx_long_rel();
  uint32_t raw_objx_long_rel;
  memcpy(&raw_objx_long_rel, &tmp_objx_long_rel, sizeof(tmp_objx_long_rel));
  if (raw_objx_long_rel != 0) {
    total_size += 1 + 4;
  }

  // float objx_lat_rel = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_lat_rel = this->_internal_objx_lat_rel();
  uint32_t raw_objx_lat_rel;
  memcpy(&raw_objx_lat_rel, &tmp_objx_lat_rel, sizeof(tmp_objx_lat_rel));
  if (raw_objx_lat_rel != 0) {
    total_size += 1 + 4;
  }

  // float objx_long_vel = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_long_vel = this->_internal_objx_long_vel();
  uint32_t raw_objx_long_vel;
  memcpy(&raw_objx_long_vel, &tmp_objx_long_vel, sizeof(tmp_objx_long_vel));
  if (raw_objx_long_vel != 0) {
    total_size += 1 + 4;
  }

  // float objx_lat_vel = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_lat_vel = this->_internal_objx_lat_vel();
  uint32_t raw_objx_lat_vel;
  memcpy(&raw_objx_lat_vel, &tmp_objx_lat_vel, sizeof(tmp_objx_lat_vel));
  if (raw_objx_lat_vel != 0) {
    total_size += 1 + 4;
  }

  // float objx_long_acc = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_long_acc = this->_internal_objx_long_acc();
  uint32_t raw_objx_long_acc;
  memcpy(&raw_objx_long_acc, &tmp_objx_long_acc, sizeof(tmp_objx_long_acc));
  if (raw_objx_long_acc != 0) {
    total_size += 1 + 4;
  }

  // float objx_lat_acc = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_lat_acc = this->_internal_objx_lat_acc();
  uint32_t raw_objx_lat_acc;
  memcpy(&raw_objx_lat_acc, &tmp_objx_lat_acc, sizeof(tmp_objx_lat_acc));
  if (raw_objx_lat_acc != 0) {
    total_size += 2 + 4;
  }

  // float objx_high = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_high = this->_internal_objx_high();
  uint32_t raw_objx_high;
  memcpy(&raw_objx_high, &tmp_objx_high, sizeof(tmp_objx_high));
  if (raw_objx_high != 0) {
    total_size += 2 + 4;
  }

  // float objx_length = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_length = this->_internal_objx_length();
  uint32_t raw_objx_length;
  memcpy(&raw_objx_length, &tmp_objx_length, sizeof(tmp_objx_length));
  if (raw_objx_length != 0) {
    total_size += 2 + 4;
  }

  // float objx_width = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_width = this->_internal_objx_width();
  uint32_t raw_objx_width;
  memcpy(&raw_objx_width, &tmp_objx_width, sizeof(tmp_objx_width));
  if (raw_objx_width != 0) {
    total_size += 2 + 4;
  }

  // uint32 objx_age = 20;
  if (this->_internal_objx_age() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_age());
  }

  // uint32 objx_crosslaneflag = 21;
  if (this->_internal_objx_crosslaneflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_crosslaneflag());
  }

  // float objx_crosslanevalue = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_crosslanevalue = this->_internal_objx_crosslanevalue();
  uint32_t raw_objx_crosslanevalue;
  memcpy(&raw_objx_crosslanevalue, &tmp_objx_crosslanevalue, sizeof(tmp_objx_crosslanevalue));
  if (raw_objx_crosslanevalue != 0) {
    total_size += 2 + 4;
  }

  // uint32 objx_cut_status = 23;
  if (this->_internal_objx_cut_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_cut_status());
  }

  // uint32 objx_left_lightstatus = 24;
  if (this->_internal_objx_left_lightstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_left_lightstatus());
  }

  // uint32 objx_obstaclearea = 25;
  if (this->_internal_objx_obstaclearea() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_obstaclearea());
  }

  // uint32 objx_right_lightstatus = 26;
  if (this->_internal_objx_right_lightstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_right_lightstatus());
  }

  // uint32 objx_waring_lightstatus = 27;
  if (this->_internal_objx_waring_lightstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_waring_lightstatus());
  }

  // uint32 objx_brake_lightstatus = 28;
  if (this->_internal_objx_brake_lightstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_brake_lightstatus());
  }

  // uint32 objx_foglightstatus = 29;
  if (this->_internal_objx_foglightstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_foglightstatus());
  }

  // uint32 objx_detection = 30;
  if (this->_internal_objx_detection() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_detection());
  }

  // uint32 objx_bsd_status = 31;
  if (this->_internal_objx_bsd_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_bsd_status());
  }

  // uint32 objx_ldc = 32;
  if (this->_internal_objx_ldc() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_ldc());
  }

  // uint32 objx_oa = 33;
  if (this->_internal_objx_oa() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_oa());
  }

  // uint32 objx_sound_id = 34;
  if (this->_internal_objx_sound_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objx_sound_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADObjfusion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ADObjfusion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADObjfusion::GetClassData() const { return &_class_data_; }

void ADObjfusion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ADObjfusion *>(to)->MergeFrom(
      static_cast<const ADObjfusion &>(from));
}


void ADObjfusion::MergeFrom(const ADObjfusion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.ADObjfusion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_long_vel_rel = from._internal_objx_long_vel_rel();
  uint32_t raw_objx_long_vel_rel;
  memcpy(&raw_objx_long_vel_rel, &tmp_objx_long_vel_rel, sizeof(tmp_objx_long_vel_rel));
  if (raw_objx_long_vel_rel != 0) {
    _internal_set_objx_long_vel_rel(from._internal_objx_long_vel_rel());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_lat_vel_rel = from._internal_objx_lat_vel_rel();
  uint32_t raw_objx_lat_vel_rel;
  memcpy(&raw_objx_lat_vel_rel, &tmp_objx_lat_vel_rel, sizeof(tmp_objx_lat_vel_rel));
  if (raw_objx_lat_vel_rel != 0) {
    _internal_set_objx_lat_vel_rel(from._internal_objx_lat_vel_rel());
  }
  if (from._internal_objx_refer_points_type() != 0) {
    _internal_set_objx_refer_points_type(from._internal_objx_refer_points_type());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_refer_pointslongitudinal_distance = from._internal_objx_refer_pointslongitudinal_distance();
  uint32_t raw_objx_refer_pointslongitudinal_distance;
  memcpy(&raw_objx_refer_pointslongitudinal_distance, &tmp_objx_refer_pointslongitudinal_distance, sizeof(tmp_objx_refer_pointslongitudinal_distance));
  if (raw_objx_refer_pointslongitudinal_distance != 0) {
    _internal_set_objx_refer_pointslongitudinal_distance(from._internal_objx_refer_pointslongitudinal_distance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_refer_pointslateral_distance = from._internal_objx_refer_pointslateral_distance();
  uint32_t raw_objx_refer_pointslateral_distance;
  memcpy(&raw_objx_refer_pointslateral_distance, &tmp_objx_refer_pointslateral_distance, sizeof(tmp_objx_refer_pointslateral_distance));
  if (raw_objx_refer_pointslateral_distance != 0) {
    _internal_set_objx_refer_pointslateral_distance(from._internal_objx_refer_pointslateral_distance());
  }
  if (from._internal_objx_trackid() != 0) {
    _internal_set_objx_trackid(from._internal_objx_trackid());
  }
  if (from._internal_objx_type() != 0) {
    _internal_set_objx_type(from._internal_objx_type());
  }
  if (from._internal_objx_status() != 0) {
    _internal_set_objx_status(from._internal_objx_status());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_confidence = from._internal_objx_confidence();
  uint32_t raw_objx_confidence;
  memcpy(&raw_objx_confidence, &tmp_objx_confidence, sizeof(tmp_objx_confidence));
  if (raw_objx_confidence != 0) {
    _internal_set_objx_confidence(from._internal_objx_confidence());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_headingangle = from._internal_objx_headingangle();
  uint32_t raw_objx_headingangle;
  memcpy(&raw_objx_headingangle, &tmp_objx_headingangle, sizeof(tmp_objx_headingangle));
  if (raw_objx_headingangle != 0) {
    _internal_set_objx_headingangle(from._internal_objx_headingangle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_long_rel = from._internal_objx_long_rel();
  uint32_t raw_objx_long_rel;
  memcpy(&raw_objx_long_rel, &tmp_objx_long_rel, sizeof(tmp_objx_long_rel));
  if (raw_objx_long_rel != 0) {
    _internal_set_objx_long_rel(from._internal_objx_long_rel());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_lat_rel = from._internal_objx_lat_rel();
  uint32_t raw_objx_lat_rel;
  memcpy(&raw_objx_lat_rel, &tmp_objx_lat_rel, sizeof(tmp_objx_lat_rel));
  if (raw_objx_lat_rel != 0) {
    _internal_set_objx_lat_rel(from._internal_objx_lat_rel());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_long_vel = from._internal_objx_long_vel();
  uint32_t raw_objx_long_vel;
  memcpy(&raw_objx_long_vel, &tmp_objx_long_vel, sizeof(tmp_objx_long_vel));
  if (raw_objx_long_vel != 0) {
    _internal_set_objx_long_vel(from._internal_objx_long_vel());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_lat_vel = from._internal_objx_lat_vel();
  uint32_t raw_objx_lat_vel;
  memcpy(&raw_objx_lat_vel, &tmp_objx_lat_vel, sizeof(tmp_objx_lat_vel));
  if (raw_objx_lat_vel != 0) {
    _internal_set_objx_lat_vel(from._internal_objx_lat_vel());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_long_acc = from._internal_objx_long_acc();
  uint32_t raw_objx_long_acc;
  memcpy(&raw_objx_long_acc, &tmp_objx_long_acc, sizeof(tmp_objx_long_acc));
  if (raw_objx_long_acc != 0) {
    _internal_set_objx_long_acc(from._internal_objx_long_acc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_lat_acc = from._internal_objx_lat_acc();
  uint32_t raw_objx_lat_acc;
  memcpy(&raw_objx_lat_acc, &tmp_objx_lat_acc, sizeof(tmp_objx_lat_acc));
  if (raw_objx_lat_acc != 0) {
    _internal_set_objx_lat_acc(from._internal_objx_lat_acc());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_high = from._internal_objx_high();
  uint32_t raw_objx_high;
  memcpy(&raw_objx_high, &tmp_objx_high, sizeof(tmp_objx_high));
  if (raw_objx_high != 0) {
    _internal_set_objx_high(from._internal_objx_high());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_length = from._internal_objx_length();
  uint32_t raw_objx_length;
  memcpy(&raw_objx_length, &tmp_objx_length, sizeof(tmp_objx_length));
  if (raw_objx_length != 0) {
    _internal_set_objx_length(from._internal_objx_length());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_width = from._internal_objx_width();
  uint32_t raw_objx_width;
  memcpy(&raw_objx_width, &tmp_objx_width, sizeof(tmp_objx_width));
  if (raw_objx_width != 0) {
    _internal_set_objx_width(from._internal_objx_width());
  }
  if (from._internal_objx_age() != 0) {
    _internal_set_objx_age(from._internal_objx_age());
  }
  if (from._internal_objx_crosslaneflag() != 0) {
    _internal_set_objx_crosslaneflag(from._internal_objx_crosslaneflag());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_objx_crosslanevalue = from._internal_objx_crosslanevalue();
  uint32_t raw_objx_crosslanevalue;
  memcpy(&raw_objx_crosslanevalue, &tmp_objx_crosslanevalue, sizeof(tmp_objx_crosslanevalue));
  if (raw_objx_crosslanevalue != 0) {
    _internal_set_objx_crosslanevalue(from._internal_objx_crosslanevalue());
  }
  if (from._internal_objx_cut_status() != 0) {
    _internal_set_objx_cut_status(from._internal_objx_cut_status());
  }
  if (from._internal_objx_left_lightstatus() != 0) {
    _internal_set_objx_left_lightstatus(from._internal_objx_left_lightstatus());
  }
  if (from._internal_objx_obstaclearea() != 0) {
    _internal_set_objx_obstaclearea(from._internal_objx_obstaclearea());
  }
  if (from._internal_objx_right_lightstatus() != 0) {
    _internal_set_objx_right_lightstatus(from._internal_objx_right_lightstatus());
  }
  if (from._internal_objx_waring_lightstatus() != 0) {
    _internal_set_objx_waring_lightstatus(from._internal_objx_waring_lightstatus());
  }
  if (from._internal_objx_brake_lightstatus() != 0) {
    _internal_set_objx_brake_lightstatus(from._internal_objx_brake_lightstatus());
  }
  if (from._internal_objx_foglightstatus() != 0) {
    _internal_set_objx_foglightstatus(from._internal_objx_foglightstatus());
  }
  if (from._internal_objx_detection() != 0) {
    _internal_set_objx_detection(from._internal_objx_detection());
  }
  if (from._internal_objx_bsd_status() != 0) {
    _internal_set_objx_bsd_status(from._internal_objx_bsd_status());
  }
  if (from._internal_objx_ldc() != 0) {
    _internal_set_objx_ldc(from._internal_objx_ldc());
  }
  if (from._internal_objx_oa() != 0) {
    _internal_set_objx_oa(from._internal_objx_oa());
  }
  if (from._internal_objx_sound_id() != 0) {
    _internal_set_objx_sound_id(from._internal_objx_sound_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADObjfusion::CopyFrom(const ADObjfusion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.ADObjfusion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADObjfusion::IsInitialized() const {
  return true;
}

void ADObjfusion::InternalSwap(ADObjfusion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADObjfusion, objx_sound_id_)
      + sizeof(ADObjfusion::objx_sound_id_)
      - PROTOBUF_FIELD_OFFSET(ADObjfusion, objx_long_vel_rel_)>(
          reinterpret_cast<char*>(&objx_long_vel_rel_),
          reinterpret_cast<char*>(&other->objx_long_vel_rel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADObjfusion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fobjfusion32_2eproto_getter, &descriptor_table_hmi_5fbasic_5fobjfusion32_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fobjfusion32_2eproto[0]);
}

// ===================================================================

class BasicObjfusion32::_Internal {
 public:
};

BasicObjfusion32::BasicObjfusion32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ad_objfusion_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.BasicObjfusion32)
}
BasicObjfusion32::BasicObjfusion32(const BasicObjfusion32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ad_objfusion_(from.ad_objfusion_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HmiInterface.BasicObjfusion32)
}

inline void BasicObjfusion32::SharedCtor() {
}

BasicObjfusion32::~BasicObjfusion32() {
  // @@protoc_insertion_point(destructor:HmiInterface.BasicObjfusion32)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BasicObjfusion32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BasicObjfusion32::ArenaDtor(void* object) {
  BasicObjfusion32* _this = reinterpret_cast< BasicObjfusion32* >(object);
  (void)_this;
}
void BasicObjfusion32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasicObjfusion32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasicObjfusion32::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.BasicObjfusion32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ad_objfusion_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasicObjfusion32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .HmiInterface.ADObjfusion ad_objfusion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ad_objfusion(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BasicObjfusion32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.BasicObjfusion32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .HmiInterface.ADObjfusion ad_objfusion = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ad_objfusion_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ad_objfusion(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.BasicObjfusion32)
  return target;
}

size_t BasicObjfusion32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.BasicObjfusion32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .HmiInterface.ADObjfusion ad_objfusion = 1;
  total_size += 1UL * this->_internal_ad_objfusion_size();
  for (const auto& msg : this->ad_objfusion_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasicObjfusion32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BasicObjfusion32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasicObjfusion32::GetClassData() const { return &_class_data_; }

void BasicObjfusion32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BasicObjfusion32 *>(to)->MergeFrom(
      static_cast<const BasicObjfusion32 &>(from));
}


void BasicObjfusion32::MergeFrom(const BasicObjfusion32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.BasicObjfusion32)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ad_objfusion_.MergeFrom(from.ad_objfusion_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasicObjfusion32::CopyFrom(const BasicObjfusion32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.BasicObjfusion32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicObjfusion32::IsInitialized() const {
  return true;
}

void BasicObjfusion32::InternalSwap(BasicObjfusion32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ad_objfusion_.InternalSwap(&other->ad_objfusion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicObjfusion32::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fobjfusion32_2eproto_getter, &descriptor_table_hmi_5fbasic_5fobjfusion32_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fobjfusion32_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace HmiInterface
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HmiInterface::ADObjfusion* Arena::CreateMaybeMessage< ::HmiInterface::ADObjfusion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::ADObjfusion >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::BasicObjfusion32* Arena::CreateMaybeMessage< ::HmiInterface::BasicObjfusion32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::BasicObjfusion32 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
