// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_basic_trafficlightscene.proto

#include "hmi_basic_trafficlightscene.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace HmiInterface {
constexpr YellowGLine::YellowGLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : yellowglinerange_(0){}
struct YellowGLineDefaultTypeInternal {
  constexpr YellowGLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~YellowGLineDefaultTypeInternal() {}
  union {
    YellowGLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT YellowGLineDefaultTypeInternal _YellowGLine_default_instance_;
constexpr StopLine::StopLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stoplinelngrange_(0){}
struct StopLineDefaultTypeInternal {
  constexpr StopLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopLineDefaultTypeInternal() {}
  union {
    StopLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopLineDefaultTypeInternal _StopLine_default_instance_;
constexpr Crosswork::Crosswork(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crossworklngrange_(0){}
struct CrossworkDefaultTypeInternal {
  constexpr CrossworkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CrossworkDefaultTypeInternal() {}
  union {
    Crosswork _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CrossworkDefaultTypeInternal _Crosswork_default_instance_;
constexpr RoadSign::RoadSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leftsigntype_(0u)
  , leftsignlngrange_(0)
  , hostsigntype_(0u)
  , hostsignlngrange_(0)
  , rightsigntype_(0u)
  , rightsignlngrange_(0){}
struct RoadSignDefaultTypeInternal {
  constexpr RoadSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoadSignDefaultTypeInternal() {}
  union {
    RoadSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoadSignDefaultTypeInternal _RoadSign_default_instance_;
constexpr HostLaneTRCLight::HostLaneTRCLight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hostlightsituation_(0u)
  , hostlightcolour_(0u)
  , hostlighttype_(0u)
  , hostlightstatus_(0u)
  , hostlightdirection_(0u)
  , hostlightwarninglevel_(0u){}
struct HostLaneTRCLightDefaultTypeInternal {
  constexpr HostLaneTRCLightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HostLaneTRCLightDefaultTypeInternal() {}
  union {
    HostLaneTRCLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HostLaneTRCLightDefaultTypeInternal _HostLaneTRCLight_default_instance_;
constexpr RightLaneTRCLight::RightLaneTRCLight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rightlightsituation_(0u)
  , rightlightcolour_(0u)
  , rightlighttype_(0u)
  , rightlightstatus_(0u)
  , rightlightdirection_(0u){}
struct RightLaneTRCLightDefaultTypeInternal {
  constexpr RightLaneTRCLightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RightLaneTRCLightDefaultTypeInternal() {}
  union {
    RightLaneTRCLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RightLaneTRCLightDefaultTypeInternal _RightLaneTRCLight_default_instance_;
constexpr LeftLaneTRCLight::LeftLaneTRCLight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leftlightsituation_(0u)
  , leftlightcolor_(0u)
  , leftlighttype_(0u)
  , leftlightstatus_(0u)
  , leftlightdirection_(0u){}
struct LeftLaneTRCLightDefaultTypeInternal {
  constexpr LeftLaneTRCLightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeftLaneTRCLightDefaultTypeInternal() {}
  union {
    LeftLaneTRCLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeftLaneTRCLightDefaultTypeInternal _LeftLaneTRCLight_default_instance_;
constexpr TrafficLightScene::TrafficLightScene(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lefttrcdata_(nullptr)
  , righttrcdata_(nullptr)
  , hosttrcdata_(nullptr)
  , roadsigndata_(nullptr)
  , crossworkdata_(nullptr)
  , stoplinedata_(nullptr)
  , yellowglinedata_(nullptr){}
struct TrafficLightSceneDefaultTypeInternal {
  constexpr TrafficLightSceneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficLightSceneDefaultTypeInternal() {}
  union {
    TrafficLightScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficLightSceneDefaultTypeInternal _TrafficLightScene_default_instance_;
constexpr BasicTrafficLightScene::BasicTrafficLightScene(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trafficlight_(nullptr){}
struct BasicTrafficLightSceneDefaultTypeInternal {
  constexpr BasicTrafficLightSceneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BasicTrafficLightSceneDefaultTypeInternal() {}
  union {
    BasicTrafficLightScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BasicTrafficLightSceneDefaultTypeInternal _BasicTrafficLightScene_default_instance_;
}  // namespace HmiInterface
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hmi_5fbasic_5ftrafficlightscene_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hmi_5fbasic_5ftrafficlightscene_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hmi_5fbasic_5ftrafficlightscene_2eproto = nullptr;

const uint32_t TableStruct_hmi_5fbasic_5ftrafficlightscene_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::YellowGLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::YellowGLine, yellowglinerange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::StopLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::StopLine, stoplinelngrange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::Crosswork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::Crosswork, crossworklngrange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RoadSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RoadSign, leftsigntype_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RoadSign, leftsignlngrange_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RoadSign, hostsigntype_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RoadSign, hostsignlngrange_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RoadSign, rightsigntype_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RoadSign, rightsignlngrange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::HostLaneTRCLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::HostLaneTRCLight, hostlightsituation_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::HostLaneTRCLight, hostlightcolour_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::HostLaneTRCLight, hostlighttype_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::HostLaneTRCLight, hostlightstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::HostLaneTRCLight, hostlightdirection_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::HostLaneTRCLight, hostlightwarninglevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RightLaneTRCLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RightLaneTRCLight, rightlightsituation_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RightLaneTRCLight, rightlightcolour_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RightLaneTRCLight, rightlighttype_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RightLaneTRCLight, rightlightstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::RightLaneTRCLight, rightlightdirection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LeftLaneTRCLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LeftLaneTRCLight, leftlightsituation_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LeftLaneTRCLight, leftlightcolor_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LeftLaneTRCLight, leftlighttype_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LeftLaneTRCLight, leftlightstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LeftLaneTRCLight, leftlightdirection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::TrafficLightScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::TrafficLightScene, lefttrcdata_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::TrafficLightScene, righttrcdata_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::TrafficLightScene, hosttrcdata_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::TrafficLightScene, roadsigndata_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::TrafficLightScene, crossworkdata_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::TrafficLightScene, stoplinedata_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::TrafficLightScene, yellowglinedata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::BasicTrafficLightScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::BasicTrafficLightScene, trafficlight_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::HmiInterface::YellowGLine)},
  { 7, -1, -1, sizeof(::HmiInterface::StopLine)},
  { 14, -1, -1, sizeof(::HmiInterface::Crosswork)},
  { 21, -1, -1, sizeof(::HmiInterface::RoadSign)},
  { 33, -1, -1, sizeof(::HmiInterface::HostLaneTRCLight)},
  { 45, -1, -1, sizeof(::HmiInterface::RightLaneTRCLight)},
  { 56, -1, -1, sizeof(::HmiInterface::LeftLaneTRCLight)},
  { 67, -1, -1, sizeof(::HmiInterface::TrafficLightScene)},
  { 80, -1, -1, sizeof(::HmiInterface::BasicTrafficLightScene)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_YellowGLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_StopLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_Crosswork_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_RoadSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_HostLaneTRCLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_RightLaneTRCLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_LeftLaneTRCLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_TrafficLightScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_BasicTrafficLightScene_default_instance_),
};

const char descriptor_table_protodef_hmi_5fbasic_5ftrafficlightscene_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!hmi_basic_trafficlightscene.proto\022\014Hmi"
  "Interface\"\'\n\013YellowGLine\022\030\n\020yellowgliner"
  "ange\030\001 \001(\002\"$\n\010StopLine\022\030\n\020stoplinelngran"
  "ge\030\001 \001(\002\"&\n\tCrosswork\022\031\n\021crossworklngran"
  "ge\030\001 \001(\002\"\234\001\n\010RoadSign\022\024\n\014leftsigntype\030\001 "
  "\001(\r\022\030\n\020leftsignlngrange\030\002 \001(\002\022\024\n\014hostsig"
  "ntype\030\003 \001(\r\022\030\n\020hostsignlngrange\030\004 \001(\002\022\025\n"
  "\rrightsigntype\030\005 \001(\r\022\031\n\021rightsignlngrang"
  "e\030\006 \001(\002\"\262\001\n\020HostLaneTRCLight\022\032\n\022hostligh"
  "tsituation\030\001 \001(\r\022\027\n\017hostlightcolour\030\002 \001("
  "\r\022\025\n\rhostlighttype\030\003 \001(\r\022\027\n\017hostlightsta"
  "tus\030\004 \001(\r\022\032\n\022hostlightdirection\030\005 \001(\r\022\035\n"
  "\025hostlightwarninglevel\030\006 \001(\r\"\231\001\n\021RightLa"
  "neTRCLight\022\033\n\023rightlightsituation\030\001 \001(\r\022"
  "\030\n\020rightlightcolour\030\002 \001(\r\022\026\n\016rightlightt"
  "ype\030\003 \001(\r\022\030\n\020rightlightstatus\030\004 \001(\r\022\033\n\023r"
  "ightlightdirection\030\005 \001(\r\"\222\001\n\020LeftLaneTRC"
  "Light\022\032\n\022leftlightsituation\030\001 \001(\r\022\026\n\016lef"
  "tlightcolor\030\002 \001(\r\022\025\n\rleftlighttype\030\003 \001(\r"
  "\022\027\n\017leftlightstatus\030\004 \001(\r\022\032\n\022leftlightdi"
  "rection\030\005 \001(\r\"\364\002\n\021TrafficLightScene\0223\n\013l"
  "efttrcdata\030\001 \001(\0132\036.HmiInterface.LeftLane"
  "TRCLight\0225\n\014righttrcdata\030\002 \001(\0132\037.HmiInte"
  "rface.RightLaneTRCLight\0223\n\013hosttrcdata\030\003"
  " \001(\0132\036.HmiInterface.HostLaneTRCLight\022,\n\014"
  "roadsigndata\030\004 \001(\0132\026.HmiInterface.RoadSi"
  "gn\022.\n\rcrossworkdata\030\005 \001(\0132\027.HmiInterface"
  ".Crosswork\022,\n\014stoplinedata\030\006 \001(\0132\026.HmiIn"
  "terface.StopLine\0222\n\017yellowglinedata\030\007 \001("
  "\0132\031.HmiInterface.YellowGLine\"O\n\026BasicTra"
  "fficLightScene\0225\n\014trafficlight\030\001 \001(\0132\037.H"
  "miInterface.TrafficLightSceneb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto = {
  false, false, 1277, descriptor_table_protodef_hmi_5fbasic_5ftrafficlightscene_2eproto, "hmi_basic_trafficlightscene.proto", 
  &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_hmi_5fbasic_5ftrafficlightscene_2eproto::offsets,
  file_level_metadata_hmi_5fbasic_5ftrafficlightscene_2eproto, file_level_enum_descriptors_hmi_5fbasic_5ftrafficlightscene_2eproto, file_level_service_descriptors_hmi_5fbasic_5ftrafficlightscene_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_getter() {
  return &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_hmi_5fbasic_5ftrafficlightscene_2eproto(&descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto);
namespace HmiInterface {

// ===================================================================

class YellowGLine::_Internal {
 public:
};

YellowGLine::YellowGLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.YellowGLine)
}
YellowGLine::YellowGLine(const YellowGLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  yellowglinerange_ = from.yellowglinerange_;
  // @@protoc_insertion_point(copy_constructor:HmiInterface.YellowGLine)
}

inline void YellowGLine::SharedCtor() {
yellowglinerange_ = 0;
}

YellowGLine::~YellowGLine() {
  // @@protoc_insertion_point(destructor:HmiInterface.YellowGLine)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void YellowGLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void YellowGLine::ArenaDtor(void* object) {
  YellowGLine* _this = reinterpret_cast< YellowGLine* >(object);
  (void)_this;
}
void YellowGLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void YellowGLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void YellowGLine::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.YellowGLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yellowglinerange_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YellowGLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float yellowglinerange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          yellowglinerange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* YellowGLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.YellowGLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float yellowglinerange = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yellowglinerange = this->_internal_yellowglinerange();
  uint32_t raw_yellowglinerange;
  memcpy(&raw_yellowglinerange, &tmp_yellowglinerange, sizeof(tmp_yellowglinerange));
  if (raw_yellowglinerange != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_yellowglinerange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.YellowGLine)
  return target;
}

size_t YellowGLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.YellowGLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float yellowglinerange = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yellowglinerange = this->_internal_yellowglinerange();
  uint32_t raw_yellowglinerange;
  memcpy(&raw_yellowglinerange, &tmp_yellowglinerange, sizeof(tmp_yellowglinerange));
  if (raw_yellowglinerange != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData YellowGLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    YellowGLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*YellowGLine::GetClassData() const { return &_class_data_; }

void YellowGLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<YellowGLine *>(to)->MergeFrom(
      static_cast<const YellowGLine &>(from));
}


void YellowGLine::MergeFrom(const YellowGLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.YellowGLine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yellowglinerange = from._internal_yellowglinerange();
  uint32_t raw_yellowglinerange;
  memcpy(&raw_yellowglinerange, &tmp_yellowglinerange, sizeof(tmp_yellowglinerange));
  if (raw_yellowglinerange != 0) {
    _internal_set_yellowglinerange(from._internal_yellowglinerange());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void YellowGLine::CopyFrom(const YellowGLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.YellowGLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YellowGLine::IsInitialized() const {
  return true;
}

void YellowGLine::InternalSwap(YellowGLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(yellowglinerange_, other->yellowglinerange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata YellowGLine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_getter, &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_once,
      file_level_metadata_hmi_5fbasic_5ftrafficlightscene_2eproto[0]);
}

// ===================================================================

class StopLine::_Internal {
 public:
};

StopLine::StopLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.StopLine)
}
StopLine::StopLine(const StopLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stoplinelngrange_ = from.stoplinelngrange_;
  // @@protoc_insertion_point(copy_constructor:HmiInterface.StopLine)
}

inline void StopLine::SharedCtor() {
stoplinelngrange_ = 0;
}

StopLine::~StopLine() {
  // @@protoc_insertion_point(destructor:HmiInterface.StopLine)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopLine::ArenaDtor(void* object) {
  StopLine* _this = reinterpret_cast< StopLine* >(object);
  (void)_this;
}
void StopLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopLine::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.StopLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stoplinelngrange_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float stoplinelngrange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          stoplinelngrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.StopLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float stoplinelngrange = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_stoplinelngrange = this->_internal_stoplinelngrange();
  uint32_t raw_stoplinelngrange;
  memcpy(&raw_stoplinelngrange, &tmp_stoplinelngrange, sizeof(tmp_stoplinelngrange));
  if (raw_stoplinelngrange != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_stoplinelngrange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.StopLine)
  return target;
}

size_t StopLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.StopLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float stoplinelngrange = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_stoplinelngrange = this->_internal_stoplinelngrange();
  uint32_t raw_stoplinelngrange;
  memcpy(&raw_stoplinelngrange, &tmp_stoplinelngrange, sizeof(tmp_stoplinelngrange));
  if (raw_stoplinelngrange != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopLine::GetClassData() const { return &_class_data_; }

void StopLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopLine *>(to)->MergeFrom(
      static_cast<const StopLine &>(from));
}


void StopLine::MergeFrom(const StopLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.StopLine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_stoplinelngrange = from._internal_stoplinelngrange();
  uint32_t raw_stoplinelngrange;
  memcpy(&raw_stoplinelngrange, &tmp_stoplinelngrange, sizeof(tmp_stoplinelngrange));
  if (raw_stoplinelngrange != 0) {
    _internal_set_stoplinelngrange(from._internal_stoplinelngrange());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopLine::CopyFrom(const StopLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.StopLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopLine::IsInitialized() const {
  return true;
}

void StopLine::InternalSwap(StopLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(stoplinelngrange_, other->stoplinelngrange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopLine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_getter, &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_once,
      file_level_metadata_hmi_5fbasic_5ftrafficlightscene_2eproto[1]);
}

// ===================================================================

class Crosswork::_Internal {
 public:
};

Crosswork::Crosswork(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.Crosswork)
}
Crosswork::Crosswork(const Crosswork& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  crossworklngrange_ = from.crossworklngrange_;
  // @@protoc_insertion_point(copy_constructor:HmiInterface.Crosswork)
}

inline void Crosswork::SharedCtor() {
crossworklngrange_ = 0;
}

Crosswork::~Crosswork() {
  // @@protoc_insertion_point(destructor:HmiInterface.Crosswork)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Crosswork::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Crosswork::ArenaDtor(void* object) {
  Crosswork* _this = reinterpret_cast< Crosswork* >(object);
  (void)_this;
}
void Crosswork::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Crosswork::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Crosswork::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.Crosswork)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crossworklngrange_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Crosswork::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float crossworklngrange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          crossworklngrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Crosswork::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.Crosswork)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float crossworklngrange = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crossworklngrange = this->_internal_crossworklngrange();
  uint32_t raw_crossworklngrange;
  memcpy(&raw_crossworklngrange, &tmp_crossworklngrange, sizeof(tmp_crossworklngrange));
  if (raw_crossworklngrange != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_crossworklngrange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.Crosswork)
  return target;
}

size_t Crosswork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.Crosswork)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float crossworklngrange = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crossworklngrange = this->_internal_crossworklngrange();
  uint32_t raw_crossworklngrange;
  memcpy(&raw_crossworklngrange, &tmp_crossworklngrange, sizeof(tmp_crossworklngrange));
  if (raw_crossworklngrange != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Crosswork::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Crosswork::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Crosswork::GetClassData() const { return &_class_data_; }

void Crosswork::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Crosswork *>(to)->MergeFrom(
      static_cast<const Crosswork &>(from));
}


void Crosswork::MergeFrom(const Crosswork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.Crosswork)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_crossworklngrange = from._internal_crossworklngrange();
  uint32_t raw_crossworklngrange;
  memcpy(&raw_crossworklngrange, &tmp_crossworklngrange, sizeof(tmp_crossworklngrange));
  if (raw_crossworklngrange != 0) {
    _internal_set_crossworklngrange(from._internal_crossworklngrange());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Crosswork::CopyFrom(const Crosswork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.Crosswork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crosswork::IsInitialized() const {
  return true;
}

void Crosswork::InternalSwap(Crosswork* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(crossworklngrange_, other->crossworklngrange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Crosswork::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_getter, &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_once,
      file_level_metadata_hmi_5fbasic_5ftrafficlightscene_2eproto[2]);
}

// ===================================================================

class RoadSign::_Internal {
 public:
};

RoadSign::RoadSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.RoadSign)
}
RoadSign::RoadSign(const RoadSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&leftsigntype_, &from.leftsigntype_,
    static_cast<size_t>(reinterpret_cast<char*>(&rightsignlngrange_) -
    reinterpret_cast<char*>(&leftsigntype_)) + sizeof(rightsignlngrange_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.RoadSign)
}

inline void RoadSign::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&leftsigntype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rightsignlngrange_) -
    reinterpret_cast<char*>(&leftsigntype_)) + sizeof(rightsignlngrange_));
}

RoadSign::~RoadSign() {
  // @@protoc_insertion_point(destructor:HmiInterface.RoadSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoadSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoadSign::ArenaDtor(void* object) {
  RoadSign* _this = reinterpret_cast< RoadSign* >(object);
  (void)_this;
}
void RoadSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoadSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoadSign::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.RoadSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&leftsigntype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightsignlngrange_) -
      reinterpret_cast<char*>(&leftsigntype_)) + sizeof(rightsignlngrange_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leftsigntype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          leftsigntype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float leftsignlngrange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          leftsignlngrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 hostsigntype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          hostsigntype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float hostsignlngrange = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          hostsignlngrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 rightsigntype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          rightsigntype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float rightsignlngrange = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          rightsignlngrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoadSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.RoadSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leftsigntype = 1;
  if (this->_internal_leftsigntype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leftsigntype(), target);
  }

  // float leftsignlngrange = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_leftsignlngrange = this->_internal_leftsignlngrange();
  uint32_t raw_leftsignlngrange;
  memcpy(&raw_leftsignlngrange, &tmp_leftsignlngrange, sizeof(tmp_leftsignlngrange));
  if (raw_leftsignlngrange != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_leftsignlngrange(), target);
  }

  // uint32 hostsigntype = 3;
  if (this->_internal_hostsigntype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hostsigntype(), target);
  }

  // float hostsignlngrange = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostsignlngrange = this->_internal_hostsignlngrange();
  uint32_t raw_hostsignlngrange;
  memcpy(&raw_hostsignlngrange, &tmp_hostsignlngrange, sizeof(tmp_hostsignlngrange));
  if (raw_hostsignlngrange != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_hostsignlngrange(), target);
  }

  // uint32 rightsigntype = 5;
  if (this->_internal_rightsigntype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rightsigntype(), target);
  }

  // float rightsignlngrange = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rightsignlngrange = this->_internal_rightsignlngrange();
  uint32_t raw_rightsignlngrange;
  memcpy(&raw_rightsignlngrange, &tmp_rightsignlngrange, sizeof(tmp_rightsignlngrange));
  if (raw_rightsignlngrange != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_rightsignlngrange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.RoadSign)
  return target;
}

size_t RoadSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.RoadSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leftsigntype = 1;
  if (this->_internal_leftsigntype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_leftsigntype());
  }

  // float leftsignlngrange = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_leftsignlngrange = this->_internal_leftsignlngrange();
  uint32_t raw_leftsignlngrange;
  memcpy(&raw_leftsignlngrange, &tmp_leftsignlngrange, sizeof(tmp_leftsignlngrange));
  if (raw_leftsignlngrange != 0) {
    total_size += 1 + 4;
  }

  // uint32 hostsigntype = 3;
  if (this->_internal_hostsigntype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hostsigntype());
  }

  // float hostsignlngrange = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostsignlngrange = this->_internal_hostsignlngrange();
  uint32_t raw_hostsignlngrange;
  memcpy(&raw_hostsignlngrange, &tmp_hostsignlngrange, sizeof(tmp_hostsignlngrange));
  if (raw_hostsignlngrange != 0) {
    total_size += 1 + 4;
  }

  // uint32 rightsigntype = 5;
  if (this->_internal_rightsigntype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rightsigntype());
  }

  // float rightsignlngrange = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rightsignlngrange = this->_internal_rightsignlngrange();
  uint32_t raw_rightsignlngrange;
  memcpy(&raw_rightsignlngrange, &tmp_rightsignlngrange, sizeof(tmp_rightsignlngrange));
  if (raw_rightsignlngrange != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoadSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadSign::GetClassData() const { return &_class_data_; }

void RoadSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoadSign *>(to)->MergeFrom(
      static_cast<const RoadSign &>(from));
}


void RoadSign::MergeFrom(const RoadSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.RoadSign)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leftsigntype() != 0) {
    _internal_set_leftsigntype(from._internal_leftsigntype());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_leftsignlngrange = from._internal_leftsignlngrange();
  uint32_t raw_leftsignlngrange;
  memcpy(&raw_leftsignlngrange, &tmp_leftsignlngrange, sizeof(tmp_leftsignlngrange));
  if (raw_leftsignlngrange != 0) {
    _internal_set_leftsignlngrange(from._internal_leftsignlngrange());
  }
  if (from._internal_hostsigntype() != 0) {
    _internal_set_hostsigntype(from._internal_hostsigntype());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostsignlngrange = from._internal_hostsignlngrange();
  uint32_t raw_hostsignlngrange;
  memcpy(&raw_hostsignlngrange, &tmp_hostsignlngrange, sizeof(tmp_hostsignlngrange));
  if (raw_hostsignlngrange != 0) {
    _internal_set_hostsignlngrange(from._internal_hostsignlngrange());
  }
  if (from._internal_rightsigntype() != 0) {
    _internal_set_rightsigntype(from._internal_rightsigntype());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rightsignlngrange = from._internal_rightsignlngrange();
  uint32_t raw_rightsignlngrange;
  memcpy(&raw_rightsignlngrange, &tmp_rightsignlngrange, sizeof(tmp_rightsignlngrange));
  if (raw_rightsignlngrange != 0) {
    _internal_set_rightsignlngrange(from._internal_rightsignlngrange());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadSign::CopyFrom(const RoadSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.RoadSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSign::IsInitialized() const {
  return true;
}

void RoadSign::InternalSwap(RoadSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadSign, rightsignlngrange_)
      + sizeof(RoadSign::rightsignlngrange_)
      - PROTOBUF_FIELD_OFFSET(RoadSign, leftsigntype_)>(
          reinterpret_cast<char*>(&leftsigntype_),
          reinterpret_cast<char*>(&other->leftsigntype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_getter, &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_once,
      file_level_metadata_hmi_5fbasic_5ftrafficlightscene_2eproto[3]);
}

// ===================================================================

class HostLaneTRCLight::_Internal {
 public:
};

HostLaneTRCLight::HostLaneTRCLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.HostLaneTRCLight)
}
HostLaneTRCLight::HostLaneTRCLight(const HostLaneTRCLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hostlightsituation_, &from.hostlightsituation_,
    static_cast<size_t>(reinterpret_cast<char*>(&hostlightwarninglevel_) -
    reinterpret_cast<char*>(&hostlightsituation_)) + sizeof(hostlightwarninglevel_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.HostLaneTRCLight)
}

inline void HostLaneTRCLight::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hostlightsituation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hostlightwarninglevel_) -
    reinterpret_cast<char*>(&hostlightsituation_)) + sizeof(hostlightwarninglevel_));
}

HostLaneTRCLight::~HostLaneTRCLight() {
  // @@protoc_insertion_point(destructor:HmiInterface.HostLaneTRCLight)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HostLaneTRCLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HostLaneTRCLight::ArenaDtor(void* object) {
  HostLaneTRCLight* _this = reinterpret_cast< HostLaneTRCLight* >(object);
  (void)_this;
}
void HostLaneTRCLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostLaneTRCLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostLaneTRCLight::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.HostLaneTRCLight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hostlightsituation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hostlightwarninglevel_) -
      reinterpret_cast<char*>(&hostlightsituation_)) + sizeof(hostlightwarninglevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostLaneTRCLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 hostlightsituation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hostlightsituation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hostlightcolour = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          hostlightcolour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hostlighttype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          hostlighttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hostlightstatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          hostlightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hostlightdirection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          hostlightdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hostlightwarninglevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          hostlightwarninglevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostLaneTRCLight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.HostLaneTRCLight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hostlightsituation = 1;
  if (this->_internal_hostlightsituation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hostlightsituation(), target);
  }

  // uint32 hostlightcolour = 2;
  if (this->_internal_hostlightcolour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hostlightcolour(), target);
  }

  // uint32 hostlighttype = 3;
  if (this->_internal_hostlighttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hostlighttype(), target);
  }

  // uint32 hostlightstatus = 4;
  if (this->_internal_hostlightstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hostlightstatus(), target);
  }

  // uint32 hostlightdirection = 5;
  if (this->_internal_hostlightdirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hostlightdirection(), target);
  }

  // uint32 hostlightwarninglevel = 6;
  if (this->_internal_hostlightwarninglevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_hostlightwarninglevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.HostLaneTRCLight)
  return target;
}

size_t HostLaneTRCLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.HostLaneTRCLight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hostlightsituation = 1;
  if (this->_internal_hostlightsituation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hostlightsituation());
  }

  // uint32 hostlightcolour = 2;
  if (this->_internal_hostlightcolour() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hostlightcolour());
  }

  // uint32 hostlighttype = 3;
  if (this->_internal_hostlighttype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hostlighttype());
  }

  // uint32 hostlightstatus = 4;
  if (this->_internal_hostlightstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hostlightstatus());
  }

  // uint32 hostlightdirection = 5;
  if (this->_internal_hostlightdirection() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hostlightdirection());
  }

  // uint32 hostlightwarninglevel = 6;
  if (this->_internal_hostlightwarninglevel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hostlightwarninglevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostLaneTRCLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HostLaneTRCLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostLaneTRCLight::GetClassData() const { return &_class_data_; }

void HostLaneTRCLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HostLaneTRCLight *>(to)->MergeFrom(
      static_cast<const HostLaneTRCLight &>(from));
}


void HostLaneTRCLight::MergeFrom(const HostLaneTRCLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.HostLaneTRCLight)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hostlightsituation() != 0) {
    _internal_set_hostlightsituation(from._internal_hostlightsituation());
  }
  if (from._internal_hostlightcolour() != 0) {
    _internal_set_hostlightcolour(from._internal_hostlightcolour());
  }
  if (from._internal_hostlighttype() != 0) {
    _internal_set_hostlighttype(from._internal_hostlighttype());
  }
  if (from._internal_hostlightstatus() != 0) {
    _internal_set_hostlightstatus(from._internal_hostlightstatus());
  }
  if (from._internal_hostlightdirection() != 0) {
    _internal_set_hostlightdirection(from._internal_hostlightdirection());
  }
  if (from._internal_hostlightwarninglevel() != 0) {
    _internal_set_hostlightwarninglevel(from._internal_hostlightwarninglevel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostLaneTRCLight::CopyFrom(const HostLaneTRCLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.HostLaneTRCLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostLaneTRCLight::IsInitialized() const {
  return true;
}

void HostLaneTRCLight::InternalSwap(HostLaneTRCLight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HostLaneTRCLight, hostlightwarninglevel_)
      + sizeof(HostLaneTRCLight::hostlightwarninglevel_)
      - PROTOBUF_FIELD_OFFSET(HostLaneTRCLight, hostlightsituation_)>(
          reinterpret_cast<char*>(&hostlightsituation_),
          reinterpret_cast<char*>(&other->hostlightsituation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostLaneTRCLight::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_getter, &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_once,
      file_level_metadata_hmi_5fbasic_5ftrafficlightscene_2eproto[4]);
}

// ===================================================================

class RightLaneTRCLight::_Internal {
 public:
};

RightLaneTRCLight::RightLaneTRCLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.RightLaneTRCLight)
}
RightLaneTRCLight::RightLaneTRCLight(const RightLaneTRCLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rightlightsituation_, &from.rightlightsituation_,
    static_cast<size_t>(reinterpret_cast<char*>(&rightlightdirection_) -
    reinterpret_cast<char*>(&rightlightsituation_)) + sizeof(rightlightdirection_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.RightLaneTRCLight)
}

inline void RightLaneTRCLight::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rightlightsituation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rightlightdirection_) -
    reinterpret_cast<char*>(&rightlightsituation_)) + sizeof(rightlightdirection_));
}

RightLaneTRCLight::~RightLaneTRCLight() {
  // @@protoc_insertion_point(destructor:HmiInterface.RightLaneTRCLight)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RightLaneTRCLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RightLaneTRCLight::ArenaDtor(void* object) {
  RightLaneTRCLight* _this = reinterpret_cast< RightLaneTRCLight* >(object);
  (void)_this;
}
void RightLaneTRCLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RightLaneTRCLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RightLaneTRCLight::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.RightLaneTRCLight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rightlightsituation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rightlightdirection_) -
      reinterpret_cast<char*>(&rightlightsituation_)) + sizeof(rightlightdirection_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RightLaneTRCLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rightlightsituation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          rightlightsituation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rightlightcolour = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rightlightcolour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rightlighttype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          rightlighttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rightlightstatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          rightlightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rightlightdirection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          rightlightdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RightLaneTRCLight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.RightLaneTRCLight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rightlightsituation = 1;
  if (this->_internal_rightlightsituation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rightlightsituation(), target);
  }

  // uint32 rightlightcolour = 2;
  if (this->_internal_rightlightcolour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rightlightcolour(), target);
  }

  // uint32 rightlighttype = 3;
  if (this->_internal_rightlighttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rightlighttype(), target);
  }

  // uint32 rightlightstatus = 4;
  if (this->_internal_rightlightstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rightlightstatus(), target);
  }

  // uint32 rightlightdirection = 5;
  if (this->_internal_rightlightdirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rightlightdirection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.RightLaneTRCLight)
  return target;
}

size_t RightLaneTRCLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.RightLaneTRCLight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rightlightsituation = 1;
  if (this->_internal_rightlightsituation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rightlightsituation());
  }

  // uint32 rightlightcolour = 2;
  if (this->_internal_rightlightcolour() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rightlightcolour());
  }

  // uint32 rightlighttype = 3;
  if (this->_internal_rightlighttype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rightlighttype());
  }

  // uint32 rightlightstatus = 4;
  if (this->_internal_rightlightstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rightlightstatus());
  }

  // uint32 rightlightdirection = 5;
  if (this->_internal_rightlightdirection() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rightlightdirection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RightLaneTRCLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RightLaneTRCLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RightLaneTRCLight::GetClassData() const { return &_class_data_; }

void RightLaneTRCLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RightLaneTRCLight *>(to)->MergeFrom(
      static_cast<const RightLaneTRCLight &>(from));
}


void RightLaneTRCLight::MergeFrom(const RightLaneTRCLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.RightLaneTRCLight)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rightlightsituation() != 0) {
    _internal_set_rightlightsituation(from._internal_rightlightsituation());
  }
  if (from._internal_rightlightcolour() != 0) {
    _internal_set_rightlightcolour(from._internal_rightlightcolour());
  }
  if (from._internal_rightlighttype() != 0) {
    _internal_set_rightlighttype(from._internal_rightlighttype());
  }
  if (from._internal_rightlightstatus() != 0) {
    _internal_set_rightlightstatus(from._internal_rightlightstatus());
  }
  if (from._internal_rightlightdirection() != 0) {
    _internal_set_rightlightdirection(from._internal_rightlightdirection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RightLaneTRCLight::CopyFrom(const RightLaneTRCLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.RightLaneTRCLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightLaneTRCLight::IsInitialized() const {
  return true;
}

void RightLaneTRCLight::InternalSwap(RightLaneTRCLight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RightLaneTRCLight, rightlightdirection_)
      + sizeof(RightLaneTRCLight::rightlightdirection_)
      - PROTOBUF_FIELD_OFFSET(RightLaneTRCLight, rightlightsituation_)>(
          reinterpret_cast<char*>(&rightlightsituation_),
          reinterpret_cast<char*>(&other->rightlightsituation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RightLaneTRCLight::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_getter, &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_once,
      file_level_metadata_hmi_5fbasic_5ftrafficlightscene_2eproto[5]);
}

// ===================================================================

class LeftLaneTRCLight::_Internal {
 public:
};

LeftLaneTRCLight::LeftLaneTRCLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.LeftLaneTRCLight)
}
LeftLaneTRCLight::LeftLaneTRCLight(const LeftLaneTRCLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&leftlightsituation_, &from.leftlightsituation_,
    static_cast<size_t>(reinterpret_cast<char*>(&leftlightdirection_) -
    reinterpret_cast<char*>(&leftlightsituation_)) + sizeof(leftlightdirection_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.LeftLaneTRCLight)
}

inline void LeftLaneTRCLight::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&leftlightsituation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leftlightdirection_) -
    reinterpret_cast<char*>(&leftlightsituation_)) + sizeof(leftlightdirection_));
}

LeftLaneTRCLight::~LeftLaneTRCLight() {
  // @@protoc_insertion_point(destructor:HmiInterface.LeftLaneTRCLight)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LeftLaneTRCLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeftLaneTRCLight::ArenaDtor(void* object) {
  LeftLaneTRCLight* _this = reinterpret_cast< LeftLaneTRCLight* >(object);
  (void)_this;
}
void LeftLaneTRCLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeftLaneTRCLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeftLaneTRCLight::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.LeftLaneTRCLight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&leftlightsituation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leftlightdirection_) -
      reinterpret_cast<char*>(&leftlightsituation_)) + sizeof(leftlightdirection_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeftLaneTRCLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 leftlightsituation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          leftlightsituation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 leftlightcolor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          leftlightcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 leftlighttype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          leftlighttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 leftlightstatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          leftlightstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 leftlightdirection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          leftlightdirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeftLaneTRCLight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.LeftLaneTRCLight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 leftlightsituation = 1;
  if (this->_internal_leftlightsituation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_leftlightsituation(), target);
  }

  // uint32 leftlightcolor = 2;
  if (this->_internal_leftlightcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_leftlightcolor(), target);
  }

  // uint32 leftlighttype = 3;
  if (this->_internal_leftlighttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_leftlighttype(), target);
  }

  // uint32 leftlightstatus = 4;
  if (this->_internal_leftlightstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_leftlightstatus(), target);
  }

  // uint32 leftlightdirection = 5;
  if (this->_internal_leftlightdirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_leftlightdirection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.LeftLaneTRCLight)
  return target;
}

size_t LeftLaneTRCLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.LeftLaneTRCLight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 leftlightsituation = 1;
  if (this->_internal_leftlightsituation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_leftlightsituation());
  }

  // uint32 leftlightcolor = 2;
  if (this->_internal_leftlightcolor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_leftlightcolor());
  }

  // uint32 leftlighttype = 3;
  if (this->_internal_leftlighttype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_leftlighttype());
  }

  // uint32 leftlightstatus = 4;
  if (this->_internal_leftlightstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_leftlightstatus());
  }

  // uint32 leftlightdirection = 5;
  if (this->_internal_leftlightdirection() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_leftlightdirection());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeftLaneTRCLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LeftLaneTRCLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeftLaneTRCLight::GetClassData() const { return &_class_data_; }

void LeftLaneTRCLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LeftLaneTRCLight *>(to)->MergeFrom(
      static_cast<const LeftLaneTRCLight &>(from));
}


void LeftLaneTRCLight::MergeFrom(const LeftLaneTRCLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.LeftLaneTRCLight)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leftlightsituation() != 0) {
    _internal_set_leftlightsituation(from._internal_leftlightsituation());
  }
  if (from._internal_leftlightcolor() != 0) {
    _internal_set_leftlightcolor(from._internal_leftlightcolor());
  }
  if (from._internal_leftlighttype() != 0) {
    _internal_set_leftlighttype(from._internal_leftlighttype());
  }
  if (from._internal_leftlightstatus() != 0) {
    _internal_set_leftlightstatus(from._internal_leftlightstatus());
  }
  if (from._internal_leftlightdirection() != 0) {
    _internal_set_leftlightdirection(from._internal_leftlightdirection());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeftLaneTRCLight::CopyFrom(const LeftLaneTRCLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.LeftLaneTRCLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeftLaneTRCLight::IsInitialized() const {
  return true;
}

void LeftLaneTRCLight::InternalSwap(LeftLaneTRCLight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeftLaneTRCLight, leftlightdirection_)
      + sizeof(LeftLaneTRCLight::leftlightdirection_)
      - PROTOBUF_FIELD_OFFSET(LeftLaneTRCLight, leftlightsituation_)>(
          reinterpret_cast<char*>(&leftlightsituation_),
          reinterpret_cast<char*>(&other->leftlightsituation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeftLaneTRCLight::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_getter, &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_once,
      file_level_metadata_hmi_5fbasic_5ftrafficlightscene_2eproto[6]);
}

// ===================================================================

class TrafficLightScene::_Internal {
 public:
  static const ::HmiInterface::LeftLaneTRCLight& lefttrcdata(const TrafficLightScene* msg);
  static const ::HmiInterface::RightLaneTRCLight& righttrcdata(const TrafficLightScene* msg);
  static const ::HmiInterface::HostLaneTRCLight& hosttrcdata(const TrafficLightScene* msg);
  static const ::HmiInterface::RoadSign& roadsigndata(const TrafficLightScene* msg);
  static const ::HmiInterface::Crosswork& crossworkdata(const TrafficLightScene* msg);
  static const ::HmiInterface::StopLine& stoplinedata(const TrafficLightScene* msg);
  static const ::HmiInterface::YellowGLine& yellowglinedata(const TrafficLightScene* msg);
};

const ::HmiInterface::LeftLaneTRCLight&
TrafficLightScene::_Internal::lefttrcdata(const TrafficLightScene* msg) {
  return *msg->lefttrcdata_;
}
const ::HmiInterface::RightLaneTRCLight&
TrafficLightScene::_Internal::righttrcdata(const TrafficLightScene* msg) {
  return *msg->righttrcdata_;
}
const ::HmiInterface::HostLaneTRCLight&
TrafficLightScene::_Internal::hosttrcdata(const TrafficLightScene* msg) {
  return *msg->hosttrcdata_;
}
const ::HmiInterface::RoadSign&
TrafficLightScene::_Internal::roadsigndata(const TrafficLightScene* msg) {
  return *msg->roadsigndata_;
}
const ::HmiInterface::Crosswork&
TrafficLightScene::_Internal::crossworkdata(const TrafficLightScene* msg) {
  return *msg->crossworkdata_;
}
const ::HmiInterface::StopLine&
TrafficLightScene::_Internal::stoplinedata(const TrafficLightScene* msg) {
  return *msg->stoplinedata_;
}
const ::HmiInterface::YellowGLine&
TrafficLightScene::_Internal::yellowglinedata(const TrafficLightScene* msg) {
  return *msg->yellowglinedata_;
}
TrafficLightScene::TrafficLightScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.TrafficLightScene)
}
TrafficLightScene::TrafficLightScene(const TrafficLightScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lefttrcdata()) {
    lefttrcdata_ = new ::HmiInterface::LeftLaneTRCLight(*from.lefttrcdata_);
  } else {
    lefttrcdata_ = nullptr;
  }
  if (from._internal_has_righttrcdata()) {
    righttrcdata_ = new ::HmiInterface::RightLaneTRCLight(*from.righttrcdata_);
  } else {
    righttrcdata_ = nullptr;
  }
  if (from._internal_has_hosttrcdata()) {
    hosttrcdata_ = new ::HmiInterface::HostLaneTRCLight(*from.hosttrcdata_);
  } else {
    hosttrcdata_ = nullptr;
  }
  if (from._internal_has_roadsigndata()) {
    roadsigndata_ = new ::HmiInterface::RoadSign(*from.roadsigndata_);
  } else {
    roadsigndata_ = nullptr;
  }
  if (from._internal_has_crossworkdata()) {
    crossworkdata_ = new ::HmiInterface::Crosswork(*from.crossworkdata_);
  } else {
    crossworkdata_ = nullptr;
  }
  if (from._internal_has_stoplinedata()) {
    stoplinedata_ = new ::HmiInterface::StopLine(*from.stoplinedata_);
  } else {
    stoplinedata_ = nullptr;
  }
  if (from._internal_has_yellowglinedata()) {
    yellowglinedata_ = new ::HmiInterface::YellowGLine(*from.yellowglinedata_);
  } else {
    yellowglinedata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HmiInterface.TrafficLightScene)
}

inline void TrafficLightScene::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lefttrcdata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yellowglinedata_) -
    reinterpret_cast<char*>(&lefttrcdata_)) + sizeof(yellowglinedata_));
}

TrafficLightScene::~TrafficLightScene() {
  // @@protoc_insertion_point(destructor:HmiInterface.TrafficLightScene)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficLightScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lefttrcdata_;
  if (this != internal_default_instance()) delete righttrcdata_;
  if (this != internal_default_instance()) delete hosttrcdata_;
  if (this != internal_default_instance()) delete roadsigndata_;
  if (this != internal_default_instance()) delete crossworkdata_;
  if (this != internal_default_instance()) delete stoplinedata_;
  if (this != internal_default_instance()) delete yellowglinedata_;
}

void TrafficLightScene::ArenaDtor(void* object) {
  TrafficLightScene* _this = reinterpret_cast< TrafficLightScene* >(object);
  (void)_this;
}
void TrafficLightScene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficLightScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficLightScene::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.TrafficLightScene)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lefttrcdata_ != nullptr) {
    delete lefttrcdata_;
  }
  lefttrcdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && righttrcdata_ != nullptr) {
    delete righttrcdata_;
  }
  righttrcdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hosttrcdata_ != nullptr) {
    delete hosttrcdata_;
  }
  hosttrcdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && roadsigndata_ != nullptr) {
    delete roadsigndata_;
  }
  roadsigndata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && crossworkdata_ != nullptr) {
    delete crossworkdata_;
  }
  crossworkdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stoplinedata_ != nullptr) {
    delete stoplinedata_;
  }
  stoplinedata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && yellowglinedata_ != nullptr) {
    delete yellowglinedata_;
  }
  yellowglinedata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLightScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .HmiInterface.LeftLaneTRCLight lefttrcdata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lefttrcdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.RightLaneTRCLight righttrcdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_righttrcdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.HostLaneTRCLight hosttrcdata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hosttrcdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.RoadSign roadsigndata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_roadsigndata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.Crosswork crossworkdata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_crossworkdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.StopLine stoplinedata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stoplinedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.YellowGLine yellowglinedata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_yellowglinedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficLightScene::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.TrafficLightScene)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .HmiInterface.LeftLaneTRCLight lefttrcdata = 1;
  if (this->_internal_has_lefttrcdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lefttrcdata(this), target, stream);
  }

  // .HmiInterface.RightLaneTRCLight righttrcdata = 2;
  if (this->_internal_has_righttrcdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::righttrcdata(this), target, stream);
  }

  // .HmiInterface.HostLaneTRCLight hosttrcdata = 3;
  if (this->_internal_has_hosttrcdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hosttrcdata(this), target, stream);
  }

  // .HmiInterface.RoadSign roadsigndata = 4;
  if (this->_internal_has_roadsigndata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::roadsigndata(this), target, stream);
  }

  // .HmiInterface.Crosswork crossworkdata = 5;
  if (this->_internal_has_crossworkdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::crossworkdata(this), target, stream);
  }

  // .HmiInterface.StopLine stoplinedata = 6;
  if (this->_internal_has_stoplinedata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stoplinedata(this), target, stream);
  }

  // .HmiInterface.YellowGLine yellowglinedata = 7;
  if (this->_internal_has_yellowglinedata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::yellowglinedata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.TrafficLightScene)
  return target;
}

size_t TrafficLightScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.TrafficLightScene)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .HmiInterface.LeftLaneTRCLight lefttrcdata = 1;
  if (this->_internal_has_lefttrcdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lefttrcdata_);
  }

  // .HmiInterface.RightLaneTRCLight righttrcdata = 2;
  if (this->_internal_has_righttrcdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *righttrcdata_);
  }

  // .HmiInterface.HostLaneTRCLight hosttrcdata = 3;
  if (this->_internal_has_hosttrcdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hosttrcdata_);
  }

  // .HmiInterface.RoadSign roadsigndata = 4;
  if (this->_internal_has_roadsigndata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roadsigndata_);
  }

  // .HmiInterface.Crosswork crossworkdata = 5;
  if (this->_internal_has_crossworkdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *crossworkdata_);
  }

  // .HmiInterface.StopLine stoplinedata = 6;
  if (this->_internal_has_stoplinedata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stoplinedata_);
  }

  // .HmiInterface.YellowGLine yellowglinedata = 7;
  if (this->_internal_has_yellowglinedata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *yellowglinedata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLightScene::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLightScene::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLightScene::GetClassData() const { return &_class_data_; }

void TrafficLightScene::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLightScene *>(to)->MergeFrom(
      static_cast<const TrafficLightScene &>(from));
}


void TrafficLightScene::MergeFrom(const TrafficLightScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.TrafficLightScene)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lefttrcdata()) {
    _internal_mutable_lefttrcdata()->::HmiInterface::LeftLaneTRCLight::MergeFrom(from._internal_lefttrcdata());
  }
  if (from._internal_has_righttrcdata()) {
    _internal_mutable_righttrcdata()->::HmiInterface::RightLaneTRCLight::MergeFrom(from._internal_righttrcdata());
  }
  if (from._internal_has_hosttrcdata()) {
    _internal_mutable_hosttrcdata()->::HmiInterface::HostLaneTRCLight::MergeFrom(from._internal_hosttrcdata());
  }
  if (from._internal_has_roadsigndata()) {
    _internal_mutable_roadsigndata()->::HmiInterface::RoadSign::MergeFrom(from._internal_roadsigndata());
  }
  if (from._internal_has_crossworkdata()) {
    _internal_mutable_crossworkdata()->::HmiInterface::Crosswork::MergeFrom(from._internal_crossworkdata());
  }
  if (from._internal_has_stoplinedata()) {
    _internal_mutable_stoplinedata()->::HmiInterface::StopLine::MergeFrom(from._internal_stoplinedata());
  }
  if (from._internal_has_yellowglinedata()) {
    _internal_mutable_yellowglinedata()->::HmiInterface::YellowGLine::MergeFrom(from._internal_yellowglinedata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLightScene::CopyFrom(const TrafficLightScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.TrafficLightScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightScene::IsInitialized() const {
  return true;
}

void TrafficLightScene::InternalSwap(TrafficLightScene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLightScene, yellowglinedata_)
      + sizeof(TrafficLightScene::yellowglinedata_)
      - PROTOBUF_FIELD_OFFSET(TrafficLightScene, lefttrcdata_)>(
          reinterpret_cast<char*>(&lefttrcdata_),
          reinterpret_cast<char*>(&other->lefttrcdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightScene::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_getter, &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_once,
      file_level_metadata_hmi_5fbasic_5ftrafficlightscene_2eproto[7]);
}

// ===================================================================

class BasicTrafficLightScene::_Internal {
 public:
  static const ::HmiInterface::TrafficLightScene& trafficlight(const BasicTrafficLightScene* msg);
};

const ::HmiInterface::TrafficLightScene&
BasicTrafficLightScene::_Internal::trafficlight(const BasicTrafficLightScene* msg) {
  return *msg->trafficlight_;
}
BasicTrafficLightScene::BasicTrafficLightScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.BasicTrafficLightScene)
}
BasicTrafficLightScene::BasicTrafficLightScene(const BasicTrafficLightScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trafficlight()) {
    trafficlight_ = new ::HmiInterface::TrafficLightScene(*from.trafficlight_);
  } else {
    trafficlight_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HmiInterface.BasicTrafficLightScene)
}

inline void BasicTrafficLightScene::SharedCtor() {
trafficlight_ = nullptr;
}

BasicTrafficLightScene::~BasicTrafficLightScene() {
  // @@protoc_insertion_point(destructor:HmiInterface.BasicTrafficLightScene)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BasicTrafficLightScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete trafficlight_;
}

void BasicTrafficLightScene::ArenaDtor(void* object) {
  BasicTrafficLightScene* _this = reinterpret_cast< BasicTrafficLightScene* >(object);
  (void)_this;
}
void BasicTrafficLightScene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasicTrafficLightScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasicTrafficLightScene::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.BasicTrafficLightScene)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && trafficlight_ != nullptr) {
    delete trafficlight_;
  }
  trafficlight_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasicTrafficLightScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .HmiInterface.TrafficLightScene trafficlight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trafficlight(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BasicTrafficLightScene::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.BasicTrafficLightScene)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .HmiInterface.TrafficLightScene trafficlight = 1;
  if (this->_internal_has_trafficlight()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trafficlight(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.BasicTrafficLightScene)
  return target;
}

size_t BasicTrafficLightScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.BasicTrafficLightScene)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .HmiInterface.TrafficLightScene trafficlight = 1;
  if (this->_internal_has_trafficlight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trafficlight_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasicTrafficLightScene::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BasicTrafficLightScene::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasicTrafficLightScene::GetClassData() const { return &_class_data_; }

void BasicTrafficLightScene::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BasicTrafficLightScene *>(to)->MergeFrom(
      static_cast<const BasicTrafficLightScene &>(from));
}


void BasicTrafficLightScene::MergeFrom(const BasicTrafficLightScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.BasicTrafficLightScene)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trafficlight()) {
    _internal_mutable_trafficlight()->::HmiInterface::TrafficLightScene::MergeFrom(from._internal_trafficlight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasicTrafficLightScene::CopyFrom(const BasicTrafficLightScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.BasicTrafficLightScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicTrafficLightScene::IsInitialized() const {
  return true;
}

void BasicTrafficLightScene::InternalSwap(BasicTrafficLightScene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(trafficlight_, other->trafficlight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicTrafficLightScene::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_getter, &descriptor_table_hmi_5fbasic_5ftrafficlightscene_2eproto_once,
      file_level_metadata_hmi_5fbasic_5ftrafficlightscene_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace HmiInterface
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HmiInterface::YellowGLine* Arena::CreateMaybeMessage< ::HmiInterface::YellowGLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::YellowGLine >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::StopLine* Arena::CreateMaybeMessage< ::HmiInterface::StopLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::StopLine >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::Crosswork* Arena::CreateMaybeMessage< ::HmiInterface::Crosswork >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::Crosswork >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::RoadSign* Arena::CreateMaybeMessage< ::HmiInterface::RoadSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::RoadSign >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::HostLaneTRCLight* Arena::CreateMaybeMessage< ::HmiInterface::HostLaneTRCLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::HostLaneTRCLight >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::RightLaneTRCLight* Arena::CreateMaybeMessage< ::HmiInterface::RightLaneTRCLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::RightLaneTRCLight >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::LeftLaneTRCLight* Arena::CreateMaybeMessage< ::HmiInterface::LeftLaneTRCLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::LeftLaneTRCLight >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::TrafficLightScene* Arena::CreateMaybeMessage< ::HmiInterface::TrafficLightScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::TrafficLightScene >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::BasicTrafficLightScene* Arena::CreateMaybeMessage< ::HmiInterface::BasicTrafficLightScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::BasicTrafficLightScene >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
