/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  ServiceVersion: 
  CmVersion： v2.0.3
  ServiceLatestModifyTime: 
  Generate Time: 2023-12-11 18:07:58
*****************************************************************/
#include "Car_Control_fr_Proxy_gw.hpp"
#include "changan/Car_Control.h"
#include "changan/dds_client.hpp"
#include "changan/Cnr_RiMirrLaneLED_Proxy.hpp"
namespace com {
	namespace changan {
		namespace carControl {
			namespace proxy {
				using namespace com::changan::rpc_service;
				using namespace com::changan::soa_log::skeleton;
				void Cnr_RiMirrLaneLED_Ntf_SrvOperInfo_trigger(carControl_Car_Control_Ntf* notify_data) {
					using Cnr_RiMirrLaneLED_Proxy = com::changan::carControl::RearViewMirror::proxy::Cnr_RiMirrLaneLED_Proxy;
					if(Cnr_RiMirrLaneLED_Proxy::get_instance().is_init()){
						Cnr_RiMirrLaneLED_Proxy::get_instance().Ntf_SrvOperInfo.trigger(notify_data->data._u.Car_Control_Cnr_RiMirrLaneLED_Ntf_SrvOperInfo);
					}
					carControl_Car_Control_Ntf_free(notify_data, DDS_FREE_ALL);
				}
				void Cnr_RiMirrLaneLED_Ntf_OperationCode_trigger(carControl_Car_Control_Ntf* notify_data) {
					using Cnr_RiMirrLaneLED_Proxy = com::changan::carControl::RearViewMirror::proxy::Cnr_RiMirrLaneLED_Proxy;
					if(Cnr_RiMirrLaneLED_Proxy::get_instance().is_init()){
						Cnr_RiMirrLaneLED_Proxy::get_instance().Ntf_OperationCode.trigger(notify_data->data._u.Car_Control_Cnr_RiMirrLaneLED_Ntf_OperationCode);
					}
					carControl_Car_Control_Ntf_free(notify_data, DDS_FREE_ALL);
				}
			    void on_carControl_fr_notify_data_available_gw(int32_t reader, void* arg) {
			    	ASF_LOG_DEBUG_ARGS("on_carControl_fr_notify_data_available_gw");
			    	dds_return_t rc;
					carControl_Car_Control_Ntf* data;
					void* samples[MAX_SAMPLES];
					dds_sample_info_t infos[MAX_SAMPLES];
					samples[0] = carControl_Car_Control_Ntf__alloc();
					rc = dds_take_next(reader, samples, infos);
					if (rc < 0) {
						ASF_LOG_ERROR_ARGS("on_carControl_fr_notify_data_available_gw dds_take_next faild rc=[%d]", rc);
					}
					if (infos[0].valid_data) {
						data = (carControl_Car_Control_Ntf*)samples[0];
						int event_id = data->data._d;
						ASF_LOG_DEBUG_ARGS("on_carControl_notify_data_available_gw, hashId=[%d]", event_id);
						switch (event_id)
						{
						case carControl_Car_Control_Cnr_RiMirrLaneLED_Ntf_SrvOperInfo_Hash:
						{
						    DDSClient::execute(Cnr_RiMirrLaneLED_Ntf_SrvOperInfo_trigger, data);
							return;
						}
						case carControl_Car_Control_Cnr_RiMirrLaneLED_Ntf_OperationCode_Hash:
						{
						    DDSClient::execute(Cnr_RiMirrLaneLED_Ntf_OperationCode_trigger, data);
							return;
						}
						default:
							break;
						}
					}
					carControl_Car_Control_Ntf_free(samples[0], DDS_FREE_ALL);
				}

	  			CarControlFRProxyGw::CarControlFRProxyGw() {
				}

	  			void CarControlFRProxyGw::wait_server_online()
	  			{
	  				this->wait_for_sub_online(dds_mcu_rpc_handle.reader);
	  			}

	  			bool CarControlFRProxyGw::init(std::string config) {
                    std::lock_guard<std::mutex> guard(init_mutex);
					if (this->init_flag) {
						return true;
					}
		  			logconfig_Skeleton::get_instance().init(config);
					uint8_t  service_id_array[467] = {0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x0,0x60,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x80,0x0,0x0,0xc0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x8,0x2,0x98,0x0,0x40,0x80,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2};
					DDSUtil::event_sub_init(DDS_DOMAIN_ID,
						"viu_fr_mcu_notify",
						&carControl_Car_Control_Ntf_desc,
						&on_carControl_fr_notify_data_available_gw,
						NULL,
						&this->dds_mcu_notify_handle,
		  				NULL,
						{PROXY_TOKEN, PROXY_TOKEN, "ntf"} ,
						{467,service_id_array},
						config);

					DDSUtil::event_sub_init(DDS_DOMAIN_ID,
		  				"viu_fr_mcu_rpc_service_reply",
		  				&carControl_Car_Control_Reply_desc,
		  				&on_carControl_fr_rpc_reply_data_available,
						NULL,
						&this->dds_mcu_rpc_handle,
		  				&on_CarControlFRProxy_reply_sublication_matched_cb<CarControlFRProxyGw>,
		  				{PROXY_TOKEN, PROXY_TOKEN, "*rpc"},
		  				{},
		  				config
					);

					DDSUtil::event_pub_init(DDS_DOMAIN_ID,
			  			"viu_fr_mcu_rpc_service_request",
						&carControl_Car_Control_Request_desc,
						&this->dds_mcu_rpc_handle,
			  			&on_CarControlFRProxy_request_publication_matched_cb<CarControlFRProxyGw>,
			  			{PROXY_TOKEN, PROXY_TOKEN, "*rpc"},
		  				config,
				  		&on_CarControlFRProxy_request_topicdata_checkable_cb<CarControlFRProxyGw>
					);
					this->init_flag = true;
					return true;
				}
				CarControlFRProxyGw& CarControlFRProxyGw::get_instance()
				{
					static CarControlFRProxyGw instance;
					return instance;
				}
			}
		}
	}
}

