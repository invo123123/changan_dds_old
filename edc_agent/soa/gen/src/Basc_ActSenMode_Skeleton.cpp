/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.1.6
  ServiceLatestModifyTime: 2023-10-07T15:03:14
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#include "changan/Basc_ActSenMode_Skeleton.hpp"
#include "changan/dds_server.hpp"
#include <iostream>
#include <thread>
#include <string.h>
#include "changan/string_util.hpp"
#include "changan/business_util.h"

namespace com {
namespace changan {
namespace carCabin {
namespace BasicService {
namespace skeleton {
	using namespace com::changan::rpc_service;
	using namespace com::changan::soa_log::skeleton;
	void carCabin_Basc_ActSenMode_RR_ActSenMoSwitSet(carCabin_Basc_ActSenMode_Request * request){
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_ActSenMoSwitSet");
		SwitSetResult ret = skeleton->RR_ActSenMoSwitSet(request->data._u.RR_ActSenMoSwitSet.sentrySwitchParam);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_ActSenMoSwitSet");
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_ActSenMode_RR_ActSenMoSwitSet_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_ActSenMoSwitSet.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_ActSenMode_RR_ActSenMoInfoSet(carCabin_Basc_ActSenMode_Request * request){
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_ActSenMoInfoSet");
		InfoSetResult ret = skeleton->RR_ActSenMoInfoSet(request->data._u.RR_ActSenMoInfoSet.SenMoInfoSet);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_ActSenMoInfoSet");
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_ActSenMode_RR_ActSenMoInfoSet_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_ActSenMoInfoSet.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_ActSenMode_Get__ActSenMoSwitSt(carCabin_Basc_ActSenMode_Request * request){
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->Get__ActSenMoSwitSt");
		uint8_t ret = skeleton->Get__ActSenMoSwitSt();
		ASF_LOG_DEBUG_ARGS("after skeleton->Get__ActSenMoSwitSt");
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_ActSenMode_Get__ActSenMoSwitSt_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.Get__ActSenMoSwitSt.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_ActSenMode_Get_ActSenFunEnSt(carCabin_Basc_ActSenMode_Request * request){
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->Get_ActSenFunEnSt");
		uint8_t ret = skeleton->Get_ActSenFunEnSt();
		ASF_LOG_DEBUG_ARGS("after skeleton->Get_ActSenFunEnSt");
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_ActSenMode_Get_ActSenFunEnSt_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.Get_ActSenFunEnSt.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_ActSenMode_Get__ActSenMoInfoSet(carCabin_Basc_ActSenMode_Request * request){
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->Get__ActSenMoInfoSet");
		SenMoInfoSet ret = skeleton->Get__ActSenMoInfoSet();
		ASF_LOG_DEBUG_ARGS("after skeleton->Get__ActSenMoInfoSet");
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_ActSenMode_Get__ActSenMoInfoSet_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.Get__ActSenMoInfoSet.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_ActSenMode_RR_ActSenWarningSet(carCabin_Basc_ActSenMode_Request * request){
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_ActSenWarningSet");
		SwitSetResult ret = skeleton->RR_ActSenWarningSet(request->data._u.RR_ActSenWarningSet.SenWarningSet);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_ActSenWarningSet");
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_ActSenMode_RR_ActSenWarningSet_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_ActSenWarningSet.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_ActSenMode_RR_ActCampSwitSet(carCabin_Basc_ActSenMode_Request * request){
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_ActCampSwitSet");
		SwitSetResult ret = skeleton->RR_ActCampSwitSet(request->data._u.RR_ActCampSwitSet.campSwitchParam);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_ActCampSwitSet");
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_ActSenMode_RR_ActCampSwitSet_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_ActCampSwitSet.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_ActSenMode_RR_ActCampWarningSet(carCabin_Basc_ActSenMode_Request * request){
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_ActCampWarningSet");
		SwitSetResult ret = skeleton->RR_ActCampWarningSet(request->data._u.RR_ActCampWarningSet.CampWarningSet);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_ActCampWarningSet");
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_ActSenMode_RR_ActCampWarningSet_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_ActCampWarningSet.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_ActSenMode_RR_ActCampRangeSet(carCabin_Basc_ActSenMode_Request * request){
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_ActCampRangeSet");
		SwitSetResult ret = skeleton->RR_ActCampRangeSet(request->data._u.RR_ActCampRangeSet.CampRangeSet);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_ActCampRangeSet");
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_ActSenMode_RR_ActCampRangeSet_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_ActCampRangeSet.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_ActSenMode_Get_ActCampSwitSet(carCabin_Basc_ActSenMode_Request * request){
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->Get_ActCampSwitSet");
		uint8_t ret = skeleton->Get_ActCampSwitSet();
		ASF_LOG_DEBUG_ARGS("after skeleton->Get_ActCampSwitSet");
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_ActSenMode_Get_ActCampSwitSet_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.Get_ActCampSwitSet.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_ActSenMode_RR_SenRecordCameraSet(carCabin_Basc_ActSenMode_Request * request){
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_SenRecordCameraSet");
		uint8_t ret = skeleton->RR_SenRecordCameraSet(request->data._u.RR_SenRecordCameraSet.camera);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_SenRecordCameraSet");
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_ActSenMode_RR_SenRecordCameraSet_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_SenRecordCameraSet.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_ActSenMode_RR_CampRecordCameraSet(carCabin_Basc_ActSenMode_Request * request){
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_CampRecordCameraSet");
		uint8_t ret = skeleton->RR_CampRecordCameraSet(request->data._u.RR_CampRecordCameraSet.camera);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_CampRecordCameraSet");
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_ActSenMode_RR_CampRecordCameraSet_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_CampRecordCameraSet.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_ActSenMode_Deal_Invalid_Method(carCabin_Basc_ActSenMode_Request * request){
		if (BussinessUtil::isEventType(request->data._d)) {
			return;
		}
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		carCabin_Basc_ActSenMode_Reply* reply_msg = carCabin_Basc_ActSenMode_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_METHOD_NOT_FOUND;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_ActSenMode_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_ActSenMode_Request_free(request, DDS_FREE_ALL);
	}
    void on_carCabin_Basc_ActSenMode_request_data_available(int32_t reader, void* arg){
    	ASF_LOG_DEBUG_ARGS("on_carCabin_Basc_ActSenMode_request_data_available");
		dds_return_t rc;
		//printf("RPC server on data available!\n");
		void* samples[1];
		samples[0] = carCabin_Basc_ActSenMode_Request__alloc();
		dds_sample_info_t infos[1];
		rc = dds_take_next(reader, samples, infos);
		if (rc < 0) {
			ASF_LOG_ERROR_ARGS("on_carCabin_Basc_ActSenMode_request_data_available, dds_take_next faild, rc=[%d]",rc);
			DDS_FATAL("dds_take_next failed!\n");
		}
		if (infos[0].valid_data)
		{
			carCabin_Basc_ActSenMode_Request* request = (carCabin_Basc_ActSenMode_Request*)samples[0];
			int32_t funID = request->data._d;
			ASF_LOG_DEBUG_ARGS("on_carCabin_Basc_ActSenMode_request_data_available, hashId=[%d], reqId=[%d]", funID,  request->header.requestId.sequence_number.low);			switch (funID) {
				case carCabin_Basc_ActSenMode_RR_ActSenMoSwitSet_Hash:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_RR_ActSenMoSwitSet, request);
					break;
				}
				case carCabin_Basc_ActSenMode_RR_ActSenMoInfoSet_Hash:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_RR_ActSenMoInfoSet, request);
					break;
				}
				case carCabin_Basc_ActSenMode_Get__ActSenMoSwitSt_Hash:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_Get__ActSenMoSwitSt, request);
					break;
				}
				case carCabin_Basc_ActSenMode_Get_ActSenFunEnSt_Hash:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_Get_ActSenFunEnSt, request);
					break;
				}
				case carCabin_Basc_ActSenMode_Get__ActSenMoInfoSet_Hash:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_Get__ActSenMoInfoSet, request);
					break;
				}
				case carCabin_Basc_ActSenMode_RR_ActSenWarningSet_Hash:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_RR_ActSenWarningSet, request);
					break;
				}
				case carCabin_Basc_ActSenMode_RR_ActCampSwitSet_Hash:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_RR_ActCampSwitSet, request);
					break;
				}
				case carCabin_Basc_ActSenMode_RR_ActCampWarningSet_Hash:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_RR_ActCampWarningSet, request);
					break;
				}
				case carCabin_Basc_ActSenMode_RR_ActCampRangeSet_Hash:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_RR_ActCampRangeSet, request);
					break;
				}
				case carCabin_Basc_ActSenMode_Get_ActCampSwitSet_Hash:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_Get_ActCampSwitSet, request);
					break;
				}
				case carCabin_Basc_ActSenMode_RR_SenRecordCameraSet_Hash:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_RR_SenRecordCameraSet, request);
					break;
				}
				case carCabin_Basc_ActSenMode_RR_CampRecordCameraSet_Hash:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_RR_CampRecordCameraSet, request);
					break;
				}
				default:
				{
					DDSServer::execute(carCabin_Basc_ActSenMode_Deal_Invalid_Method,request);
					break;
				}
			}
			return;
		}
		carCabin_Basc_ActSenMode_Request_free(samples[0],DDS_FREE_ALL);
	}
	Basc_ActSenMode_Skeleton::Basc_ActSenMode_Skeleton(Basc_ActSenMode_service_interface* service,std::string config):_config(config),_service(service){}

	void on_Basc_ActSenMode_request_subscription_matched_cb(dds_entity_t reader, const dds_subscription_matched_status_t  status, void* arg){
		ASF_LOG_DEBUG_ARGS("on_Basc_ActSenMode_request_subscription_matched_cb, reader=[%d], current_count=[%d]", reader, status.current_count);
		Basc_ActSenMode_Skeleton * skeleton = (Basc_ActSenMode_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ActSenMode_skeleton");
		if(NULL==skeleton){
			return;
		}
		auto handler=skeleton->get_consumer_matched_handler();
		if(NULL!=handler){
			ConsumerMatchedStatus data=DDSUtil::get_consumer_matched_status(reader,status);
			handler(data);
		}
	}

	void Basc_ActSenMode_Skeleton::wait_client_online()
	{
		this->wait_for_pub_online(dds_rpc_reply_handle.writer);
	}

    bool Basc_ActSenMode_Skeleton::init() {
        std::lock_guard<std::mutex> guard(init_mutex);
		if (this->init_flag) {
			return true;
		}
		logconfig_Skeleton::get_instance().init(this->_config);
		DDSUtil::event_pub_init(DDS_DOMAIN_ID,
			this->service_name + "_reply",
			&carCabin_Basc_ActSenMode_Reply_desc,
			&dds_rpc_reply_handle,
			NULL,{PROXY_TOKEN, PROXY_TOKEN, ""},this->_config
		);
		DDSUtil::event_sub_init(DDS_DOMAIN_ID,
			this->service_name + "_request",

			&carCabin_Basc_ActSenMode_Request_desc,
			&on_carCabin_Basc_ActSenMode_request_data_available,
			NULL,
			&dds_rpc_request_handle,
			&on_Basc_ActSenMode_request_subscription_matched_cb,{PROXY_TOKEN, PROXY_TOKEN, ""},{},this->_config
		);
		this->Ntf_ActSenMoSwitSt.init(this->_config);
		this->Ntf_ActSenFunEnSt.init(this->_config);
		this->Ntf__ActSenMoInfoSet.init(this->_config);
		this->Ntf_UserNotiConfir.init(this->_config);
		this->Ntf_ActSenTrig.init(this->_config);
		this->Ntf_ActSenFunEn.init(this->_config);
		this->Ntf_SdcardSenErrTrig.init(this->_config);
		this->Ntf_ActCampSwitSet.init(this->_config);
		this->Ntf_CampRangeSet.init(this->_config);
		this->Ntf_SenWarningSetSwitchEarly.init(this->_config);
		this->Ntf_SenWarningSetSwitchCollision.init(this->_config);
		this->Ntf_SenWarningSetSwitchTheft.init(this->_config);
		this->Ntf_CampWarningSetSwitchS.init(this->_config);
		this->Ntf_CampWarningSetSwitchM.init(this->_config);
		this->Ntf_CampWarningSetSwitchL.init(this->_config);
		this->Ntf_SenRecordCameraSet.init(this->_config);
		this->Ntf_CampRecordCameraSet.init(this->_config);
		this->Ntf_ActCampTrig.init(this->_config);
		this->init_flag = true;
		return true;

	}

	bool Basc_ActSenMode_Skeleton::destroy() {
		ASF_LOG_DEBUG_ARGS("Basc_ActSenMode_Skeleton::destroy");
		std::lock_guard<std::mutex> guard(init_mutex);
		if (!this->init_flag) {
			return true;
		}
		if (!DDSUtil::dds_client_destroy(&dds_rpc_request_handle)) {
			return false;
		}
		if (!DDSUtil::dds_client_destroy(&dds_rpc_reply_handle)) {
			return false;
		}
		this->Ntf_ActSenMoSwitSt.destroy();
		this->Ntf_ActSenFunEnSt.destroy();
		this->Ntf__ActSenMoInfoSet.destroy();
		this->Ntf_UserNotiConfir.destroy();
		this->Ntf_ActSenTrig.destroy();
		this->Ntf_ActSenFunEn.destroy();
		this->Ntf_SdcardSenErrTrig.destroy();
		this->Ntf_ActCampSwitSet.destroy();
		this->Ntf_CampRangeSet.destroy();
		this->Ntf_SenWarningSetSwitchEarly.destroy();
		this->Ntf_SenWarningSetSwitchCollision.destroy();
		this->Ntf_SenWarningSetSwitchTheft.destroy();
		this->Ntf_CampWarningSetSwitchS.destroy();
		this->Ntf_CampWarningSetSwitchM.destroy();
		this->Ntf_CampWarningSetSwitchL.destroy();
		this->Ntf_SenRecordCameraSet.destroy();
		this->Ntf_CampRecordCameraSet.destroy();
		this->Ntf_ActCampTrig.destroy();
		this->init_flag = false;
		return true;
	}

	dds_return_t Basc_ActSenMode_Skeleton::send_reply(carCabin_Basc_ActSenMode_Reply* reply) {
		dds_return_t rc = DDSUtil::send(dds_rpc_reply_handle.writer, reply);
		ASF_LOG_DEBUG_ARGS("Basc_ActSenMode_Skeleton::send_reply hashId=[%d], reqId=[%d], rc=[%d]", reply->data._d, reply->header.relatedRequestId.sequence_number.low, rc);
		return rc;
	}
}
}
}
}
}

