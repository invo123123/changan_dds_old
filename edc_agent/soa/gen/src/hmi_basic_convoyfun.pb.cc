// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_basic_convoyfun.proto

#include "hmi_basic_convoyfun.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace HmiInterface {
constexpr LDWLKAELK::LDWLKAELK(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ad_ldwstatus_(0u)
  , ad_lkastatus_(0u)
  , ad_voiceinfo_(0u)
  , ad_elkmode_(0u)
  , ad_elkleftinterventionmode_(0u)
  , ad_elkrightinterventionmode_(0u)
  , ad_ldwinhaitwarning_(0u)
  , ad_lkainhaitwarning_(0u){}
struct LDWLKAELKDefaultTypeInternal {
  constexpr LDWLKAELKDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LDWLKAELKDefaultTypeInternal() {}
  union {
    LDWLKAELK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LDWLKAELKDefaultTypeInternal _LDWLKAELK_default_instance_;
constexpr FCWAEBEDS::FCWAEBEDS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ad_aebstatus_(0u)
  , ad_rebstatus_(0u)
  , ad_aesstatus_(0u)
  , ad_fcwlatentwarning_(0u)
  , ad_fcwactive_(0u)
  , ad_rewalert_(0u)
  , ad_fctbactive_(0u)
  , ad_rctbactive_(0u)
  , ad_rebactive_(0u)
  , ad_fctaleftalert_(0u)
  , ad_fctarightalert_(0u)
  , ad_aebactive_(0u)
  , ad_runredlightwarning_(0u)
  , ad_aesactive_(0u){}
struct FCWAEBEDSDefaultTypeInternal {
  constexpr FCWAEBEDSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FCWAEBEDSDefaultTypeInternal() {}
  union {
    FCWAEBEDS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FCWAEBEDSDefaultTypeInternal _FCWAEBEDS_default_instance_;
constexpr LCDAFUN::LCDAFUN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ad_bsdlca_leftalert_(0u)
  , ad_rctaleftalert_(0u)
  , ad_sealeftalert_(0u)
  , ad_dowleftalert_(0u)
  , ad_rcwalert_(0u)
  , ad_bsdlca_rightalert_(0u)
  , ad_rctarightalert_(0u)
  , ad_searightalert_(0u)
  , ad_dowrightalert_(0u){}
struct LCDAFUNDefaultTypeInternal {
  constexpr LCDAFUNDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LCDAFUNDefaultTypeInternal() {}
  union {
    LCDAFUN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LCDAFUNDefaultTypeInternal _LCDAFUN_default_instance_;
constexpr ConvoyFunInfo::ConvoyFunInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lcdafun_(nullptr)
  , fcwaebeds_(nullptr)
  , ldwlkaelk_(nullptr){}
struct ConvoyFunInfoDefaultTypeInternal {
  constexpr ConvoyFunInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConvoyFunInfoDefaultTypeInternal() {}
  union {
    ConvoyFunInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConvoyFunInfoDefaultTypeInternal _ConvoyFunInfo_default_instance_;
constexpr BasicConvoyFunInfo::BasicConvoyFunInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : convoy_fun_info_(nullptr){}
struct BasicConvoyFunInfoDefaultTypeInternal {
  constexpr BasicConvoyFunInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BasicConvoyFunInfoDefaultTypeInternal() {}
  union {
    BasicConvoyFunInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BasicConvoyFunInfoDefaultTypeInternal _BasicConvoyFunInfo_default_instance_;
}  // namespace HmiInterface
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hmi_5fbasic_5fconvoyfun_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hmi_5fbasic_5fconvoyfun_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hmi_5fbasic_5fconvoyfun_2eproto = nullptr;

const uint32_t TableStruct_hmi_5fbasic_5fconvoyfun_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LDWLKAELK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LDWLKAELK, ad_ldwstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LDWLKAELK, ad_lkastatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LDWLKAELK, ad_voiceinfo_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LDWLKAELK, ad_elkmode_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LDWLKAELK, ad_elkleftinterventionmode_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LDWLKAELK, ad_elkrightinterventionmode_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LDWLKAELK, ad_ldwinhaitwarning_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LDWLKAELK, ad_lkainhaitwarning_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_aebstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_rebstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_aesstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_fcwlatentwarning_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_fcwactive_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_rewalert_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_fctbactive_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_rctbactive_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_rebactive_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_fctaleftalert_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_fctarightalert_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_aebactive_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_runredlightwarning_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::FCWAEBEDS, ad_aesactive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LCDAFUN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LCDAFUN, ad_bsdlca_leftalert_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LCDAFUN, ad_rctaleftalert_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LCDAFUN, ad_sealeftalert_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LCDAFUN, ad_dowleftalert_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LCDAFUN, ad_rcwalert_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LCDAFUN, ad_bsdlca_rightalert_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LCDAFUN, ad_rctarightalert_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LCDAFUN, ad_searightalert_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::LCDAFUN, ad_dowrightalert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ConvoyFunInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ConvoyFunInfo, lcdafun_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ConvoyFunInfo, fcwaebeds_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ConvoyFunInfo, ldwlkaelk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::BasicConvoyFunInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::BasicConvoyFunInfo, convoy_fun_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::HmiInterface::LDWLKAELK)},
  { 14, -1, -1, sizeof(::HmiInterface::FCWAEBEDS)},
  { 34, -1, -1, sizeof(::HmiInterface::LCDAFUN)},
  { 49, -1, -1, sizeof(::HmiInterface::ConvoyFunInfo)},
  { 58, -1, -1, sizeof(::HmiInterface::BasicConvoyFunInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_LDWLKAELK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_FCWAEBEDS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_LCDAFUN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_ConvoyFunInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_BasicConvoyFunInfo_default_instance_),
};

const char descriptor_table_protodef_hmi_5fbasic_5fconvoyfun_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031hmi_basic_convoyfun.proto\022\014HmiInterfac"
  "e\"\344\001\n\tLDWLKAELK\022\024\n\014ad_ldwstatus\030\001 \001(\r\022\024\n"
  "\014ad_lkastatus\030\002 \001(\r\022\024\n\014ad_voiceinfo\030\003 \001("
  "\r\022\022\n\nad_elkmode\030\004 \001(\r\022\"\n\032ad_elkleftinter"
  "ventionmode\030\005 \001(\r\022#\n\033ad_elkrightinterven"
  "tionmode\030\006 \001(\r\022\033\n\023ad_ldwinhaitwarning\030\007 "
  "\001(\r\022\033\n\023ad_lkainhaitwarning\030\010 \001(\r\"\331\002\n\tFCW"
  "AEBEDS\022\024\n\014ad_aebstatus\030\001 \001(\r\022\024\n\014ad_rebst"
  "atus\030\002 \001(\r\022\024\n\014ad_aesstatus\030\003 \001(\r\022\033\n\023ad_f"
  "cwlatentwarning\030\004 \001(\r\022\024\n\014ad_fcwactive\030\005 "
  "\001(\r\022\023\n\013ad_rewalert\030\006 \001(\r\022\025\n\rad_fctbactiv"
  "e\030\007 \001(\r\022\025\n\rad_rctbactive\030\010 \001(\r\022\024\n\014ad_reb"
  "active\030\t \001(\r\022\030\n\020ad_fctaleftalert\030\n \001(\r\022\031"
  "\n\021ad_fctarightalert\030\013 \001(\r\022\024\n\014ad_aebactiv"
  "e\030\014 \001(\r\022\035\n\025ad_runredlightwarning\030\r \001(\r\022\024"
  "\n\014ad_aesactive\030\016 \001(\r\"\364\001\n\007LCDAFUN\022\033\n\023ad_b"
  "sdlca_leftalert\030\001 \001(\r\022\030\n\020ad_rctaleftaler"
  "t\030\002 \001(\r\022\027\n\017ad_sealeftalert\030\003 \001(\r\022\027\n\017ad_d"
  "owleftalert\030\004 \001(\r\022\023\n\013ad_rcwalert\030\005 \001(\r\022\034"
  "\n\024ad_bsdlca_rightalert\030\006 \001(\r\022\031\n\021ad_rctar"
  "ightalert\030\007 \001(\r\022\030\n\020ad_searightalert\030\010 \001("
  "\r\022\030\n\020ad_dowrightalert\030\t \001(\r\"\217\001\n\rConvoyFu"
  "nInfo\022&\n\007lcdafun\030\001 \001(\0132\025.HmiInterface.LC"
  "DAFUN\022*\n\tfcwaebeds\030\002 \001(\0132\027.HmiInterface."
  "FCWAEBEDS\022*\n\tldwlkaelk\030\003 \001(\0132\027.HmiInterf"
  "ace.LDWLKAELK\"J\n\022BasicConvoyFunInfo\0224\n\017c"
  "onvoy_fun_info\030\001 \001(\0132\033.HmiInterface.Conv"
  "oyFunInfob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto = {
  false, false, 1097, descriptor_table_protodef_hmi_5fbasic_5fconvoyfun_2eproto, "hmi_basic_convoyfun.proto", 
  &descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_hmi_5fbasic_5fconvoyfun_2eproto::offsets,
  file_level_metadata_hmi_5fbasic_5fconvoyfun_2eproto, file_level_enum_descriptors_hmi_5fbasic_5fconvoyfun_2eproto, file_level_service_descriptors_hmi_5fbasic_5fconvoyfun_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_getter() {
  return &descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_hmi_5fbasic_5fconvoyfun_2eproto(&descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto);
namespace HmiInterface {

// ===================================================================

class LDWLKAELK::_Internal {
 public:
};

LDWLKAELK::LDWLKAELK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.LDWLKAELK)
}
LDWLKAELK::LDWLKAELK(const LDWLKAELK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ad_ldwstatus_, &from.ad_ldwstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&ad_lkainhaitwarning_) -
    reinterpret_cast<char*>(&ad_ldwstatus_)) + sizeof(ad_lkainhaitwarning_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.LDWLKAELK)
}

inline void LDWLKAELK::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ad_ldwstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ad_lkainhaitwarning_) -
    reinterpret_cast<char*>(&ad_ldwstatus_)) + sizeof(ad_lkainhaitwarning_));
}

LDWLKAELK::~LDWLKAELK() {
  // @@protoc_insertion_point(destructor:HmiInterface.LDWLKAELK)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LDWLKAELK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LDWLKAELK::ArenaDtor(void* object) {
  LDWLKAELK* _this = reinterpret_cast< LDWLKAELK* >(object);
  (void)_this;
}
void LDWLKAELK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LDWLKAELK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LDWLKAELK::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.LDWLKAELK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ad_ldwstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ad_lkainhaitwarning_) -
      reinterpret_cast<char*>(&ad_ldwstatus_)) + sizeof(ad_lkainhaitwarning_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LDWLKAELK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ad_ldwstatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ad_ldwstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_lkastatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ad_lkastatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_voiceinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ad_voiceinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_elkmode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ad_elkmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_elkleftinterventionmode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ad_elkleftinterventionmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_elkrightinterventionmode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ad_elkrightinterventionmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_ldwinhaitwarning = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ad_ldwinhaitwarning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_lkainhaitwarning = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ad_lkainhaitwarning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LDWLKAELK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.LDWLKAELK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ad_ldwstatus = 1;
  if (this->_internal_ad_ldwstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ad_ldwstatus(), target);
  }

  // uint32 ad_lkastatus = 2;
  if (this->_internal_ad_lkastatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ad_lkastatus(), target);
  }

  // uint32 ad_voiceinfo = 3;
  if (this->_internal_ad_voiceinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ad_voiceinfo(), target);
  }

  // uint32 ad_elkmode = 4;
  if (this->_internal_ad_elkmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ad_elkmode(), target);
  }

  // uint32 ad_elkleftinterventionmode = 5;
  if (this->_internal_ad_elkleftinterventionmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ad_elkleftinterventionmode(), target);
  }

  // uint32 ad_elkrightinterventionmode = 6;
  if (this->_internal_ad_elkrightinterventionmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ad_elkrightinterventionmode(), target);
  }

  // uint32 ad_ldwinhaitwarning = 7;
  if (this->_internal_ad_ldwinhaitwarning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ad_ldwinhaitwarning(), target);
  }

  // uint32 ad_lkainhaitwarning = 8;
  if (this->_internal_ad_lkainhaitwarning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ad_lkainhaitwarning(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.LDWLKAELK)
  return target;
}

size_t LDWLKAELK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.LDWLKAELK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ad_ldwstatus = 1;
  if (this->_internal_ad_ldwstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_ldwstatus());
  }

  // uint32 ad_lkastatus = 2;
  if (this->_internal_ad_lkastatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_lkastatus());
  }

  // uint32 ad_voiceinfo = 3;
  if (this->_internal_ad_voiceinfo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_voiceinfo());
  }

  // uint32 ad_elkmode = 4;
  if (this->_internal_ad_elkmode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_elkmode());
  }

  // uint32 ad_elkleftinterventionmode = 5;
  if (this->_internal_ad_elkleftinterventionmode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_elkleftinterventionmode());
  }

  // uint32 ad_elkrightinterventionmode = 6;
  if (this->_internal_ad_elkrightinterventionmode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_elkrightinterventionmode());
  }

  // uint32 ad_ldwinhaitwarning = 7;
  if (this->_internal_ad_ldwinhaitwarning() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_ldwinhaitwarning());
  }

  // uint32 ad_lkainhaitwarning = 8;
  if (this->_internal_ad_lkainhaitwarning() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_lkainhaitwarning());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LDWLKAELK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LDWLKAELK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LDWLKAELK::GetClassData() const { return &_class_data_; }

void LDWLKAELK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LDWLKAELK *>(to)->MergeFrom(
      static_cast<const LDWLKAELK &>(from));
}


void LDWLKAELK::MergeFrom(const LDWLKAELK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.LDWLKAELK)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ad_ldwstatus() != 0) {
    _internal_set_ad_ldwstatus(from._internal_ad_ldwstatus());
  }
  if (from._internal_ad_lkastatus() != 0) {
    _internal_set_ad_lkastatus(from._internal_ad_lkastatus());
  }
  if (from._internal_ad_voiceinfo() != 0) {
    _internal_set_ad_voiceinfo(from._internal_ad_voiceinfo());
  }
  if (from._internal_ad_elkmode() != 0) {
    _internal_set_ad_elkmode(from._internal_ad_elkmode());
  }
  if (from._internal_ad_elkleftinterventionmode() != 0) {
    _internal_set_ad_elkleftinterventionmode(from._internal_ad_elkleftinterventionmode());
  }
  if (from._internal_ad_elkrightinterventionmode() != 0) {
    _internal_set_ad_elkrightinterventionmode(from._internal_ad_elkrightinterventionmode());
  }
  if (from._internal_ad_ldwinhaitwarning() != 0) {
    _internal_set_ad_ldwinhaitwarning(from._internal_ad_ldwinhaitwarning());
  }
  if (from._internal_ad_lkainhaitwarning() != 0) {
    _internal_set_ad_lkainhaitwarning(from._internal_ad_lkainhaitwarning());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LDWLKAELK::CopyFrom(const LDWLKAELK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.LDWLKAELK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LDWLKAELK::IsInitialized() const {
  return true;
}

void LDWLKAELK::InternalSwap(LDWLKAELK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LDWLKAELK, ad_lkainhaitwarning_)
      + sizeof(LDWLKAELK::ad_lkainhaitwarning_)
      - PROTOBUF_FIELD_OFFSET(LDWLKAELK, ad_ldwstatus_)>(
          reinterpret_cast<char*>(&ad_ldwstatus_),
          reinterpret_cast<char*>(&other->ad_ldwstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LDWLKAELK::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_getter, &descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fconvoyfun_2eproto[0]);
}

// ===================================================================

class FCWAEBEDS::_Internal {
 public:
};

FCWAEBEDS::FCWAEBEDS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.FCWAEBEDS)
}
FCWAEBEDS::FCWAEBEDS(const FCWAEBEDS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ad_aebstatus_, &from.ad_aebstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&ad_aesactive_) -
    reinterpret_cast<char*>(&ad_aebstatus_)) + sizeof(ad_aesactive_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.FCWAEBEDS)
}

inline void FCWAEBEDS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ad_aebstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ad_aesactive_) -
    reinterpret_cast<char*>(&ad_aebstatus_)) + sizeof(ad_aesactive_));
}

FCWAEBEDS::~FCWAEBEDS() {
  // @@protoc_insertion_point(destructor:HmiInterface.FCWAEBEDS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FCWAEBEDS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FCWAEBEDS::ArenaDtor(void* object) {
  FCWAEBEDS* _this = reinterpret_cast< FCWAEBEDS* >(object);
  (void)_this;
}
void FCWAEBEDS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FCWAEBEDS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FCWAEBEDS::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.FCWAEBEDS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ad_aebstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ad_aesactive_) -
      reinterpret_cast<char*>(&ad_aebstatus_)) + sizeof(ad_aesactive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FCWAEBEDS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ad_aebstatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ad_aebstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_rebstatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ad_rebstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_aesstatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ad_aesstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_fcwlatentwarning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ad_fcwlatentwarning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_fcwactive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ad_fcwactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_rewalert = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ad_rewalert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_fctbactive = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ad_fctbactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_rctbactive = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ad_rctbactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_rebactive = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ad_rebactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_fctaleftalert = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ad_fctaleftalert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_fctarightalert = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ad_fctarightalert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_aebactive = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          ad_aebactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_runredlightwarning = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ad_runredlightwarning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_aesactive = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          ad_aesactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FCWAEBEDS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.FCWAEBEDS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ad_aebstatus = 1;
  if (this->_internal_ad_aebstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ad_aebstatus(), target);
  }

  // uint32 ad_rebstatus = 2;
  if (this->_internal_ad_rebstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ad_rebstatus(), target);
  }

  // uint32 ad_aesstatus = 3;
  if (this->_internal_ad_aesstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ad_aesstatus(), target);
  }

  // uint32 ad_fcwlatentwarning = 4;
  if (this->_internal_ad_fcwlatentwarning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ad_fcwlatentwarning(), target);
  }

  // uint32 ad_fcwactive = 5;
  if (this->_internal_ad_fcwactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ad_fcwactive(), target);
  }

  // uint32 ad_rewalert = 6;
  if (this->_internal_ad_rewalert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ad_rewalert(), target);
  }

  // uint32 ad_fctbactive = 7;
  if (this->_internal_ad_fctbactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ad_fctbactive(), target);
  }

  // uint32 ad_rctbactive = 8;
  if (this->_internal_ad_rctbactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ad_rctbactive(), target);
  }

  // uint32 ad_rebactive = 9;
  if (this->_internal_ad_rebactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ad_rebactive(), target);
  }

  // uint32 ad_fctaleftalert = 10;
  if (this->_internal_ad_fctaleftalert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ad_fctaleftalert(), target);
  }

  // uint32 ad_fctarightalert = 11;
  if (this->_internal_ad_fctarightalert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ad_fctarightalert(), target);
  }

  // uint32 ad_aebactive = 12;
  if (this->_internal_ad_aebactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ad_aebactive(), target);
  }

  // uint32 ad_runredlightwarning = 13;
  if (this->_internal_ad_runredlightwarning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_ad_runredlightwarning(), target);
  }

  // uint32 ad_aesactive = 14;
  if (this->_internal_ad_aesactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_ad_aesactive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.FCWAEBEDS)
  return target;
}

size_t FCWAEBEDS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.FCWAEBEDS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ad_aebstatus = 1;
  if (this->_internal_ad_aebstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_aebstatus());
  }

  // uint32 ad_rebstatus = 2;
  if (this->_internal_ad_rebstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_rebstatus());
  }

  // uint32 ad_aesstatus = 3;
  if (this->_internal_ad_aesstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_aesstatus());
  }

  // uint32 ad_fcwlatentwarning = 4;
  if (this->_internal_ad_fcwlatentwarning() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_fcwlatentwarning());
  }

  // uint32 ad_fcwactive = 5;
  if (this->_internal_ad_fcwactive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_fcwactive());
  }

  // uint32 ad_rewalert = 6;
  if (this->_internal_ad_rewalert() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_rewalert());
  }

  // uint32 ad_fctbactive = 7;
  if (this->_internal_ad_fctbactive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_fctbactive());
  }

  // uint32 ad_rctbactive = 8;
  if (this->_internal_ad_rctbactive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_rctbactive());
  }

  // uint32 ad_rebactive = 9;
  if (this->_internal_ad_rebactive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_rebactive());
  }

  // uint32 ad_fctaleftalert = 10;
  if (this->_internal_ad_fctaleftalert() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_fctaleftalert());
  }

  // uint32 ad_fctarightalert = 11;
  if (this->_internal_ad_fctarightalert() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_fctarightalert());
  }

  // uint32 ad_aebactive = 12;
  if (this->_internal_ad_aebactive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_aebactive());
  }

  // uint32 ad_runredlightwarning = 13;
  if (this->_internal_ad_runredlightwarning() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_runredlightwarning());
  }

  // uint32 ad_aesactive = 14;
  if (this->_internal_ad_aesactive() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_aesactive());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FCWAEBEDS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FCWAEBEDS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FCWAEBEDS::GetClassData() const { return &_class_data_; }

void FCWAEBEDS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FCWAEBEDS *>(to)->MergeFrom(
      static_cast<const FCWAEBEDS &>(from));
}


void FCWAEBEDS::MergeFrom(const FCWAEBEDS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.FCWAEBEDS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ad_aebstatus() != 0) {
    _internal_set_ad_aebstatus(from._internal_ad_aebstatus());
  }
  if (from._internal_ad_rebstatus() != 0) {
    _internal_set_ad_rebstatus(from._internal_ad_rebstatus());
  }
  if (from._internal_ad_aesstatus() != 0) {
    _internal_set_ad_aesstatus(from._internal_ad_aesstatus());
  }
  if (from._internal_ad_fcwlatentwarning() != 0) {
    _internal_set_ad_fcwlatentwarning(from._internal_ad_fcwlatentwarning());
  }
  if (from._internal_ad_fcwactive() != 0) {
    _internal_set_ad_fcwactive(from._internal_ad_fcwactive());
  }
  if (from._internal_ad_rewalert() != 0) {
    _internal_set_ad_rewalert(from._internal_ad_rewalert());
  }
  if (from._internal_ad_fctbactive() != 0) {
    _internal_set_ad_fctbactive(from._internal_ad_fctbactive());
  }
  if (from._internal_ad_rctbactive() != 0) {
    _internal_set_ad_rctbactive(from._internal_ad_rctbactive());
  }
  if (from._internal_ad_rebactive() != 0) {
    _internal_set_ad_rebactive(from._internal_ad_rebactive());
  }
  if (from._internal_ad_fctaleftalert() != 0) {
    _internal_set_ad_fctaleftalert(from._internal_ad_fctaleftalert());
  }
  if (from._internal_ad_fctarightalert() != 0) {
    _internal_set_ad_fctarightalert(from._internal_ad_fctarightalert());
  }
  if (from._internal_ad_aebactive() != 0) {
    _internal_set_ad_aebactive(from._internal_ad_aebactive());
  }
  if (from._internal_ad_runredlightwarning() != 0) {
    _internal_set_ad_runredlightwarning(from._internal_ad_runredlightwarning());
  }
  if (from._internal_ad_aesactive() != 0) {
    _internal_set_ad_aesactive(from._internal_ad_aesactive());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FCWAEBEDS::CopyFrom(const FCWAEBEDS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.FCWAEBEDS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCWAEBEDS::IsInitialized() const {
  return true;
}

void FCWAEBEDS::InternalSwap(FCWAEBEDS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FCWAEBEDS, ad_aesactive_)
      + sizeof(FCWAEBEDS::ad_aesactive_)
      - PROTOBUF_FIELD_OFFSET(FCWAEBEDS, ad_aebstatus_)>(
          reinterpret_cast<char*>(&ad_aebstatus_),
          reinterpret_cast<char*>(&other->ad_aebstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FCWAEBEDS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_getter, &descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fconvoyfun_2eproto[1]);
}

// ===================================================================

class LCDAFUN::_Internal {
 public:
};

LCDAFUN::LCDAFUN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.LCDAFUN)
}
LCDAFUN::LCDAFUN(const LCDAFUN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ad_bsdlca_leftalert_, &from.ad_bsdlca_leftalert_,
    static_cast<size_t>(reinterpret_cast<char*>(&ad_dowrightalert_) -
    reinterpret_cast<char*>(&ad_bsdlca_leftalert_)) + sizeof(ad_dowrightalert_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.LCDAFUN)
}

inline void LCDAFUN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ad_bsdlca_leftalert_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ad_dowrightalert_) -
    reinterpret_cast<char*>(&ad_bsdlca_leftalert_)) + sizeof(ad_dowrightalert_));
}

LCDAFUN::~LCDAFUN() {
  // @@protoc_insertion_point(destructor:HmiInterface.LCDAFUN)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LCDAFUN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LCDAFUN::ArenaDtor(void* object) {
  LCDAFUN* _this = reinterpret_cast< LCDAFUN* >(object);
  (void)_this;
}
void LCDAFUN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LCDAFUN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LCDAFUN::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.LCDAFUN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ad_bsdlca_leftalert_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ad_dowrightalert_) -
      reinterpret_cast<char*>(&ad_bsdlca_leftalert_)) + sizeof(ad_dowrightalert_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LCDAFUN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ad_bsdlca_leftalert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ad_bsdlca_leftalert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_rctaleftalert = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ad_rctaleftalert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_sealeftalert = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ad_sealeftalert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_dowleftalert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ad_dowleftalert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_rcwalert = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ad_rcwalert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_bsdlca_rightalert = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ad_bsdlca_rightalert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_rctarightalert = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ad_rctarightalert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_searightalert = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ad_searightalert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ad_dowrightalert = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ad_dowrightalert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LCDAFUN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.LCDAFUN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ad_bsdlca_leftalert = 1;
  if (this->_internal_ad_bsdlca_leftalert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ad_bsdlca_leftalert(), target);
  }

  // uint32 ad_rctaleftalert = 2;
  if (this->_internal_ad_rctaleftalert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ad_rctaleftalert(), target);
  }

  // uint32 ad_sealeftalert = 3;
  if (this->_internal_ad_sealeftalert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ad_sealeftalert(), target);
  }

  // uint32 ad_dowleftalert = 4;
  if (this->_internal_ad_dowleftalert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ad_dowleftalert(), target);
  }

  // uint32 ad_rcwalert = 5;
  if (this->_internal_ad_rcwalert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ad_rcwalert(), target);
  }

  // uint32 ad_bsdlca_rightalert = 6;
  if (this->_internal_ad_bsdlca_rightalert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ad_bsdlca_rightalert(), target);
  }

  // uint32 ad_rctarightalert = 7;
  if (this->_internal_ad_rctarightalert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ad_rctarightalert(), target);
  }

  // uint32 ad_searightalert = 8;
  if (this->_internal_ad_searightalert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ad_searightalert(), target);
  }

  // uint32 ad_dowrightalert = 9;
  if (this->_internal_ad_dowrightalert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ad_dowrightalert(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.LCDAFUN)
  return target;
}

size_t LCDAFUN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.LCDAFUN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ad_bsdlca_leftalert = 1;
  if (this->_internal_ad_bsdlca_leftalert() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_bsdlca_leftalert());
  }

  // uint32 ad_rctaleftalert = 2;
  if (this->_internal_ad_rctaleftalert() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_rctaleftalert());
  }

  // uint32 ad_sealeftalert = 3;
  if (this->_internal_ad_sealeftalert() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_sealeftalert());
  }

  // uint32 ad_dowleftalert = 4;
  if (this->_internal_ad_dowleftalert() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_dowleftalert());
  }

  // uint32 ad_rcwalert = 5;
  if (this->_internal_ad_rcwalert() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_rcwalert());
  }

  // uint32 ad_bsdlca_rightalert = 6;
  if (this->_internal_ad_bsdlca_rightalert() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_bsdlca_rightalert());
  }

  // uint32 ad_rctarightalert = 7;
  if (this->_internal_ad_rctarightalert() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_rctarightalert());
  }

  // uint32 ad_searightalert = 8;
  if (this->_internal_ad_searightalert() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_searightalert());
  }

  // uint32 ad_dowrightalert = 9;
  if (this->_internal_ad_dowrightalert() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_dowrightalert());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LCDAFUN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LCDAFUN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LCDAFUN::GetClassData() const { return &_class_data_; }

void LCDAFUN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LCDAFUN *>(to)->MergeFrom(
      static_cast<const LCDAFUN &>(from));
}


void LCDAFUN::MergeFrom(const LCDAFUN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.LCDAFUN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ad_bsdlca_leftalert() != 0) {
    _internal_set_ad_bsdlca_leftalert(from._internal_ad_bsdlca_leftalert());
  }
  if (from._internal_ad_rctaleftalert() != 0) {
    _internal_set_ad_rctaleftalert(from._internal_ad_rctaleftalert());
  }
  if (from._internal_ad_sealeftalert() != 0) {
    _internal_set_ad_sealeftalert(from._internal_ad_sealeftalert());
  }
  if (from._internal_ad_dowleftalert() != 0) {
    _internal_set_ad_dowleftalert(from._internal_ad_dowleftalert());
  }
  if (from._internal_ad_rcwalert() != 0) {
    _internal_set_ad_rcwalert(from._internal_ad_rcwalert());
  }
  if (from._internal_ad_bsdlca_rightalert() != 0) {
    _internal_set_ad_bsdlca_rightalert(from._internal_ad_bsdlca_rightalert());
  }
  if (from._internal_ad_rctarightalert() != 0) {
    _internal_set_ad_rctarightalert(from._internal_ad_rctarightalert());
  }
  if (from._internal_ad_searightalert() != 0) {
    _internal_set_ad_searightalert(from._internal_ad_searightalert());
  }
  if (from._internal_ad_dowrightalert() != 0) {
    _internal_set_ad_dowrightalert(from._internal_ad_dowrightalert());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LCDAFUN::CopyFrom(const LCDAFUN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.LCDAFUN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LCDAFUN::IsInitialized() const {
  return true;
}

void LCDAFUN::InternalSwap(LCDAFUN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LCDAFUN, ad_dowrightalert_)
      + sizeof(LCDAFUN::ad_dowrightalert_)
      - PROTOBUF_FIELD_OFFSET(LCDAFUN, ad_bsdlca_leftalert_)>(
          reinterpret_cast<char*>(&ad_bsdlca_leftalert_),
          reinterpret_cast<char*>(&other->ad_bsdlca_leftalert_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LCDAFUN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_getter, &descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fconvoyfun_2eproto[2]);
}

// ===================================================================

class ConvoyFunInfo::_Internal {
 public:
  static const ::HmiInterface::LCDAFUN& lcdafun(const ConvoyFunInfo* msg);
  static const ::HmiInterface::FCWAEBEDS& fcwaebeds(const ConvoyFunInfo* msg);
  static const ::HmiInterface::LDWLKAELK& ldwlkaelk(const ConvoyFunInfo* msg);
};

const ::HmiInterface::LCDAFUN&
ConvoyFunInfo::_Internal::lcdafun(const ConvoyFunInfo* msg) {
  return *msg->lcdafun_;
}
const ::HmiInterface::FCWAEBEDS&
ConvoyFunInfo::_Internal::fcwaebeds(const ConvoyFunInfo* msg) {
  return *msg->fcwaebeds_;
}
const ::HmiInterface::LDWLKAELK&
ConvoyFunInfo::_Internal::ldwlkaelk(const ConvoyFunInfo* msg) {
  return *msg->ldwlkaelk_;
}
ConvoyFunInfo::ConvoyFunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.ConvoyFunInfo)
}
ConvoyFunInfo::ConvoyFunInfo(const ConvoyFunInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lcdafun()) {
    lcdafun_ = new ::HmiInterface::LCDAFUN(*from.lcdafun_);
  } else {
    lcdafun_ = nullptr;
  }
  if (from._internal_has_fcwaebeds()) {
    fcwaebeds_ = new ::HmiInterface::FCWAEBEDS(*from.fcwaebeds_);
  } else {
    fcwaebeds_ = nullptr;
  }
  if (from._internal_has_ldwlkaelk()) {
    ldwlkaelk_ = new ::HmiInterface::LDWLKAELK(*from.ldwlkaelk_);
  } else {
    ldwlkaelk_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HmiInterface.ConvoyFunInfo)
}

inline void ConvoyFunInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lcdafun_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ldwlkaelk_) -
    reinterpret_cast<char*>(&lcdafun_)) + sizeof(ldwlkaelk_));
}

ConvoyFunInfo::~ConvoyFunInfo() {
  // @@protoc_insertion_point(destructor:HmiInterface.ConvoyFunInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConvoyFunInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lcdafun_;
  if (this != internal_default_instance()) delete fcwaebeds_;
  if (this != internal_default_instance()) delete ldwlkaelk_;
}

void ConvoyFunInfo::ArenaDtor(void* object) {
  ConvoyFunInfo* _this = reinterpret_cast< ConvoyFunInfo* >(object);
  (void)_this;
}
void ConvoyFunInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConvoyFunInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConvoyFunInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.ConvoyFunInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lcdafun_ != nullptr) {
    delete lcdafun_;
  }
  lcdafun_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fcwaebeds_ != nullptr) {
    delete fcwaebeds_;
  }
  fcwaebeds_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ldwlkaelk_ != nullptr) {
    delete ldwlkaelk_;
  }
  ldwlkaelk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvoyFunInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .HmiInterface.LCDAFUN lcdafun = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lcdafun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.FCWAEBEDS fcwaebeds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fcwaebeds(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.LDWLKAELK ldwlkaelk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ldwlkaelk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConvoyFunInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.ConvoyFunInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .HmiInterface.LCDAFUN lcdafun = 1;
  if (this->_internal_has_lcdafun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lcdafun(this), target, stream);
  }

  // .HmiInterface.FCWAEBEDS fcwaebeds = 2;
  if (this->_internal_has_fcwaebeds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fcwaebeds(this), target, stream);
  }

  // .HmiInterface.LDWLKAELK ldwlkaelk = 3;
  if (this->_internal_has_ldwlkaelk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ldwlkaelk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.ConvoyFunInfo)
  return target;
}

size_t ConvoyFunInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.ConvoyFunInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .HmiInterface.LCDAFUN lcdafun = 1;
  if (this->_internal_has_lcdafun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lcdafun_);
  }

  // .HmiInterface.FCWAEBEDS fcwaebeds = 2;
  if (this->_internal_has_fcwaebeds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fcwaebeds_);
  }

  // .HmiInterface.LDWLKAELK ldwlkaelk = 3;
  if (this->_internal_has_ldwlkaelk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ldwlkaelk_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConvoyFunInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConvoyFunInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConvoyFunInfo::GetClassData() const { return &_class_data_; }

void ConvoyFunInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConvoyFunInfo *>(to)->MergeFrom(
      static_cast<const ConvoyFunInfo &>(from));
}


void ConvoyFunInfo::MergeFrom(const ConvoyFunInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.ConvoyFunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lcdafun()) {
    _internal_mutable_lcdafun()->::HmiInterface::LCDAFUN::MergeFrom(from._internal_lcdafun());
  }
  if (from._internal_has_fcwaebeds()) {
    _internal_mutable_fcwaebeds()->::HmiInterface::FCWAEBEDS::MergeFrom(from._internal_fcwaebeds());
  }
  if (from._internal_has_ldwlkaelk()) {
    _internal_mutable_ldwlkaelk()->::HmiInterface::LDWLKAELK::MergeFrom(from._internal_ldwlkaelk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConvoyFunInfo::CopyFrom(const ConvoyFunInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.ConvoyFunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvoyFunInfo::IsInitialized() const {
  return true;
}

void ConvoyFunInfo::InternalSwap(ConvoyFunInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConvoyFunInfo, ldwlkaelk_)
      + sizeof(ConvoyFunInfo::ldwlkaelk_)
      - PROTOBUF_FIELD_OFFSET(ConvoyFunInfo, lcdafun_)>(
          reinterpret_cast<char*>(&lcdafun_),
          reinterpret_cast<char*>(&other->lcdafun_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvoyFunInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_getter, &descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fconvoyfun_2eproto[3]);
}

// ===================================================================

class BasicConvoyFunInfo::_Internal {
 public:
  static const ::HmiInterface::ConvoyFunInfo& convoy_fun_info(const BasicConvoyFunInfo* msg);
};

const ::HmiInterface::ConvoyFunInfo&
BasicConvoyFunInfo::_Internal::convoy_fun_info(const BasicConvoyFunInfo* msg) {
  return *msg->convoy_fun_info_;
}
BasicConvoyFunInfo::BasicConvoyFunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.BasicConvoyFunInfo)
}
BasicConvoyFunInfo::BasicConvoyFunInfo(const BasicConvoyFunInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_convoy_fun_info()) {
    convoy_fun_info_ = new ::HmiInterface::ConvoyFunInfo(*from.convoy_fun_info_);
  } else {
    convoy_fun_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HmiInterface.BasicConvoyFunInfo)
}

inline void BasicConvoyFunInfo::SharedCtor() {
convoy_fun_info_ = nullptr;
}

BasicConvoyFunInfo::~BasicConvoyFunInfo() {
  // @@protoc_insertion_point(destructor:HmiInterface.BasicConvoyFunInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BasicConvoyFunInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete convoy_fun_info_;
}

void BasicConvoyFunInfo::ArenaDtor(void* object) {
  BasicConvoyFunInfo* _this = reinterpret_cast< BasicConvoyFunInfo* >(object);
  (void)_this;
}
void BasicConvoyFunInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasicConvoyFunInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasicConvoyFunInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.BasicConvoyFunInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && convoy_fun_info_ != nullptr) {
    delete convoy_fun_info_;
  }
  convoy_fun_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasicConvoyFunInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .HmiInterface.ConvoyFunInfo convoy_fun_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_convoy_fun_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BasicConvoyFunInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.BasicConvoyFunInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .HmiInterface.ConvoyFunInfo convoy_fun_info = 1;
  if (this->_internal_has_convoy_fun_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::convoy_fun_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.BasicConvoyFunInfo)
  return target;
}

size_t BasicConvoyFunInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.BasicConvoyFunInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .HmiInterface.ConvoyFunInfo convoy_fun_info = 1;
  if (this->_internal_has_convoy_fun_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *convoy_fun_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasicConvoyFunInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BasicConvoyFunInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasicConvoyFunInfo::GetClassData() const { return &_class_data_; }

void BasicConvoyFunInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BasicConvoyFunInfo *>(to)->MergeFrom(
      static_cast<const BasicConvoyFunInfo &>(from));
}


void BasicConvoyFunInfo::MergeFrom(const BasicConvoyFunInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.BasicConvoyFunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_convoy_fun_info()) {
    _internal_mutable_convoy_fun_info()->::HmiInterface::ConvoyFunInfo::MergeFrom(from._internal_convoy_fun_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasicConvoyFunInfo::CopyFrom(const BasicConvoyFunInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.BasicConvoyFunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicConvoyFunInfo::IsInitialized() const {
  return true;
}

void BasicConvoyFunInfo::InternalSwap(BasicConvoyFunInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(convoy_fun_info_, other->convoy_fun_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicConvoyFunInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_getter, &descriptor_table_hmi_5fbasic_5fconvoyfun_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fconvoyfun_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace HmiInterface
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HmiInterface::LDWLKAELK* Arena::CreateMaybeMessage< ::HmiInterface::LDWLKAELK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::LDWLKAELK >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::FCWAEBEDS* Arena::CreateMaybeMessage< ::HmiInterface::FCWAEBEDS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::FCWAEBEDS >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::LCDAFUN* Arena::CreateMaybeMessage< ::HmiInterface::LCDAFUN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::LCDAFUN >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::ConvoyFunInfo* Arena::CreateMaybeMessage< ::HmiInterface::ConvoyFunInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::ConvoyFunInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::BasicConvoyFunInfo* Arena::CreateMaybeMessage< ::HmiInterface::BasicConvoyFunInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::BasicConvoyFunInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
