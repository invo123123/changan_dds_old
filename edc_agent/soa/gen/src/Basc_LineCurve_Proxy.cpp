/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.2
  ServiceLatestModifyTime: 2023-08-28T11:51:47
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#include "changan/Basc_LineCurve_Proxy.hpp"
#include <string.h>
#include "dds/ddsrt/sync.h"
#include <iostream>
#include "changan/string_util.hpp"
#include "changan/dds_client.hpp"
namespace com {
namespace changan {
namespace carDrive {
namespace C2Controller {
namespace proxy {
    using namespace com::changan::rpc_service;
    using namespace com::changan::soa_log::skeleton;
    void Basc_LineCurve_Ntf_LineCruve_trigger(carDrive_Basc_LineCurve_Ntf* notify_data){
	    Basc_LineCurve_Proxy::get_instance().Ntf_LineCruve.trigger(notify_data->data._u.Basc_LineCurve_Ntf_LineCruve);
		carDrive_Basc_LineCurve_Ntf_free(notify_data, DDS_FREE_ALL);
    }
    void Basc_LineCurve_Ntf_LineCruveValid_trigger(carDrive_Basc_LineCurve_Ntf* notify_data){
	    Basc_LineCurve_Proxy::get_instance().Ntf_LineCruveValid.trigger(notify_data->data._u.Basc_LineCurve_Ntf_LineCruveValid);
		carDrive_Basc_LineCurve_Ntf_free(notify_data, DDS_FREE_ALL);
    }
    void Basc_LineCurve_Ntf_CamLinesCurve_trigger(carDrive_Basc_LineCurve_Ntf* notify_data){
	    Basc_LineCurve_Proxy::get_instance().Ntf_CamLinesCurve.trigger(notify_data->data._u.Basc_LineCurve_Ntf_CamLinesCurve);
		carDrive_Basc_LineCurve_Ntf_free(notify_data, DDS_FREE_ALL);
    }
    void on_Basc_LineCurve_Ntf_LineCruve_data_available(int32_t reader, void* arg){
        ASF_LOG_DEBUG_ARGS("on_Basc_LineCurve_Ntf_LineCruve_data_available");
    	dds_return_t rc;
		carDrive_Basc_LineCurve_Ntf* data;
		void* samples[1];
		samples[0] = carDrive_Basc_LineCurve_Ntf__alloc();
		dds_sample_info_t infos[1];
		rc = dds_take_next(reader, samples, infos);
		if (rc < 0){
			ASF_LOG_ERROR_ARGS("on_Basc_LineCurve_Ntf_LineCruve_data_available dds_take_next faild rc=[%d]", rc);
			//printf("dds_take_next failed!\n");
        }
		if (infos[0].valid_data){
            data = (carDrive_Basc_LineCurve_Ntf*)samples[0];
            ASF_LOG_DEBUG_ARGS("on_Basc_LineCurve_Ntf_LineCruve_data_available, hashId=[%d]", data->data._d);
			DDSClient::execute(Basc_LineCurve_Ntf_LineCruve_trigger,data);
			return;
		}
		carDrive_Basc_LineCurve_Ntf_free(samples[0],DDS_FREE_ALL);
	}
    void on_Basc_LineCurve_Ntf_LineCruveValid_data_available(int32_t reader, void* arg){
        ASF_LOG_DEBUG_ARGS("on_Basc_LineCurve_Ntf_LineCruveValid_data_available");
    	dds_return_t rc;
		carDrive_Basc_LineCurve_Ntf* data;
		void* samples[1];
		samples[0] = carDrive_Basc_LineCurve_Ntf__alloc();
		dds_sample_info_t infos[1];
		rc = dds_take_next(reader, samples, infos);
		if (rc < 0){
			ASF_LOG_ERROR_ARGS("on_Basc_LineCurve_Ntf_LineCruveValid_data_available dds_take_next faild rc=[%d]", rc);
			//printf("dds_take_next failed!\n");
        }
		if (infos[0].valid_data){
            data = (carDrive_Basc_LineCurve_Ntf*)samples[0];
            ASF_LOG_DEBUG_ARGS("on_Basc_LineCurve_Ntf_LineCruveValid_data_available, hashId=[%d]", data->data._d);
			DDSClient::execute(Basc_LineCurve_Ntf_LineCruveValid_trigger,data);
			return;
		}
		carDrive_Basc_LineCurve_Ntf_free(samples[0],DDS_FREE_ALL);
	}
    void on_Basc_LineCurve_Ntf_CamLinesCurve_data_available(int32_t reader, void* arg){
        ASF_LOG_DEBUG_ARGS("on_Basc_LineCurve_Ntf_CamLinesCurve_data_available");
    	dds_return_t rc;
		carDrive_Basc_LineCurve_Ntf* data;
		void* samples[1];
		samples[0] = carDrive_Basc_LineCurve_Ntf__alloc();
		dds_sample_info_t infos[1];
		rc = dds_take_next(reader, samples, infos);
		if (rc < 0){
			ASF_LOG_ERROR_ARGS("on_Basc_LineCurve_Ntf_CamLinesCurve_data_available dds_take_next faild rc=[%d]", rc);
			//printf("dds_take_next failed!\n");
        }
		if (infos[0].valid_data){
            data = (carDrive_Basc_LineCurve_Ntf*)samples[0];
            ASF_LOG_DEBUG_ARGS("on_Basc_LineCurve_Ntf_CamLinesCurve_data_available, hashId=[%d]", data->data._d);
			DDSClient::execute(Basc_LineCurve_Ntf_CamLinesCurve_trigger,data);
			return;
		}
		carDrive_Basc_LineCurve_Ntf_free(samples[0],DDS_FREE_ALL);
	}

	Basc_LineCurve_Proxy::Basc_LineCurve_Proxy(){

    }

    void on_Basc_LineCurve_request_publication_matched_cb(dds_entity_t writer, const dds_publication_matched_status_t  status, void* arg) {
		ASF_LOG_DEBUG_ARGS("on_Basc_LineCurve_request_publication_matched_cb, writer=[%d], current_count=[%d]", writer, status.current_count);
		Basc_LineCurve_Proxy *pTmp = &Basc_LineCurve_Proxy::get_instance();
		auto handler=Basc_LineCurve_Proxy::get_instance().get_provider_matched_handler();
		if(NULL!=handler){
			ProviderMatchedStatus data=DDSUtil::get_provider_matched_status(writer,status);
			if(data.is_online == true)
            {
                pTmp->add_link_count();
            }
			else
            {
                pTmp->subtract_link_count();
            }
            if(pTmp->get_link_count() < 2)
            {
               data.is_online = false;
            }
            handler(data);
		}
	}
	
	void on_Basc_LineCurve_reply_sublication_matched_cb(dds_entity_t reader, const dds_subscription_matched_status_t  status, void* arg) {
		ASF_LOG_DEBUG_ARGS("on_Basc_LineCurve_reply_sublication_matched_cb, reader=[%d], current_count=[%d]", reader, status.current_count);
		Basc_LineCurve_Proxy *pTmp = &Basc_LineCurve_Proxy::get_instance();
        auto handler = pTmp->get_provider_matched_handler();
        if(NULL!=handler){
            ConsumerMatchedStatus ConsumerData=DDSUtil::get_consumer_matched_status(reader,status);
            ProviderMatchedStatus ProviderData;
			ProviderData.is_online = false;
            if(ConsumerData.is_online == true)
            {
                pTmp->add_link_count();
            }
            else
            {
                pTmp->subtract_link_count();
            }
            
            if(pTmp->get_link_count() == 2)
            {
                ProviderData.is_online = true;
            }
            handler(ProviderData);
        }
    }


	void Basc_LineCurve_Proxy::wait_server_online()
	{
		this->wait_for_sub_online(dds_rpc_reply_handle.reader);
	}

	bool Basc_LineCurve_Proxy::init(std::string config) {
	    std::lock_guard<std::mutex> guard(init_mutex);
	    if(this->init_flag){
	        return true;
	    }
		logconfig_Skeleton::get_instance().init(config);
		DDSUtil::event_sub_init(DDS_DOMAIN_ID,
			this->get_service_name()+"_"+this->Ntf_LineCruve.get_name(),
		    &carDrive_Basc_LineCurve_Ntf_desc,
			&on_Basc_LineCurve_Ntf_LineCruve_data_available,
			NULL,
			&dds_Ntf_LineCruve_handle,
			NULL,{PROXY_TOKEN, PROXY_TOKEN, ""},{},config);
		DDSUtil::event_sub_init(DDS_DOMAIN_ID,
			this->get_service_name()+"_"+this->Ntf_LineCruveValid.get_name(),
		    &carDrive_Basc_LineCurve_Ntf_desc,
			&on_Basc_LineCurve_Ntf_LineCruveValid_data_available,
			NULL,
			&dds_Ntf_LineCruveValid_handle,
			NULL,{PROXY_TOKEN, PROXY_TOKEN, ""},{},config);
		DDSUtil::event_sub_init(DDS_DOMAIN_ID,
			this->get_service_name()+"_"+this->Ntf_CamLinesCurve.get_name(),
		    &carDrive_Basc_LineCurve_Ntf_desc,
			&on_Basc_LineCurve_Ntf_CamLinesCurve_data_available,
			NULL,
			&dds_Ntf_CamLinesCurve_handle,
			NULL,{PROXY_TOKEN, PROXY_TOKEN, ""},{},config);

		this->init_flag = true;
		return true;
	}

	bool Basc_LineCurve_Proxy::destroy() {
		ASF_LOG_DEBUG_ARGS("Basc_LineCurve_Proxy::destroy");
		std::lock_guard<std::mutex> guard(init_mutex);
	    if (!this->init_flag) {
			return true;
		}
		if (!DDSUtil::dds_client_destroy(&dds_Ntf_LineCruve_handle)) {
			return false;
		}
		if (!DDSUtil::dds_client_destroy(&dds_Ntf_LineCruveValid_handle)) {
			return false;
		}
		if (!DDSUtil::dds_client_destroy(&dds_Ntf_CamLinesCurve_handle)) {
			return false;
		}
		this->init_flag = false;
		return true;
	}

    Basc_LineCurve_Proxy::~Basc_LineCurve_Proxy(){

    }

	Basc_LineCurve_Proxy& Basc_LineCurve_Proxy::get_instance()
	{
		static Basc_LineCurve_Proxy instance;
		return instance;
	}
}
}
}
}
}

