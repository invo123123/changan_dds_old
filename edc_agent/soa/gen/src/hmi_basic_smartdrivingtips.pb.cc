// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmi_basic_smartdrivingtips.proto

#include "hmi_basic_smartdrivingtips.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace HmiInterface {
constexpr SpeedLimitShowDemand::SpeedLimitShowDemand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : las_tsrhostspdlimit_(0)
  , las_overspeedvisualwarning_(0u)
  , las_overspeedsoundwarning_(0u)
  , acc_cslsetreq_(0u)
  , ads_spdlimitedstatus_(0u)
  , ads_spdlmttype_(0u)
  , ads_tsrhostnextspdlimit_(0)
  , ads_tsrhostnextspdlimitdist_(0){}
struct SpeedLimitShowDemandDefaultTypeInternal {
  constexpr SpeedLimitShowDemandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeedLimitShowDemandDefaultTypeInternal() {}
  union {
    SpeedLimitShowDemand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeedLimitShowDemandDefaultTypeInternal _SpeedLimitShowDemand_default_instance_;
constexpr CNANotice::CNANotice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ads_cnatextinfo_(0u){}
struct CNANoticeDefaultTypeInternal {
  constexpr CNANoticeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CNANoticeDefaultTypeInternal() {}
  union {
    CNANotice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CNANoticeDefaultTypeInternal _CNANotice_default_instance_;
constexpr ADCNotice::ADCNotice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_adcnotice_(0u){}
struct ADCNoticeDefaultTypeInternal {
  constexpr ADCNoticeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ADCNoticeDefaultTypeInternal() {}
  union {
    ADCNotice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ADCNoticeDefaultTypeInternal _ADCNotice_default_instance_;
constexpr TJPNotice::TJPNotice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ads_tjptextinfo_(0u){}
struct TJPNoticeDefaultTypeInternal {
  constexpr TJPNoticeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TJPNoticeDefaultTypeInternal() {}
  union {
    TJPNotice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TJPNoticeDefaultTypeInternal _TJPNotice_default_instance_;
constexpr NewRecommend::NewRecommend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ads_newrecommend_(0u){}
struct NewRecommendDefaultTypeInternal {
  constexpr NewRecommendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewRecommendDefaultTypeInternal() {}
  union {
    NewRecommend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewRecommendDefaultTypeInternal _NewRecommend_default_instance_;
constexpr NIDShowDemand::NIDShowDemand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ads_ndatextinfo_(0u)
  , ads_ndafenceterminaldis_(0)
  , ads_oastatus_(0u)
  , ads_oadirection_(0u)
  , ads_oalatdistance_(0u)
  , ads_oalngdistance_(0u){}
struct NIDShowDemandDefaultTypeInternal {
  constexpr NIDShowDemandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NIDShowDemandDefaultTypeInternal() {}
  union {
    NIDShowDemand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NIDShowDemandDefaultTypeInternal _NIDShowDemand_default_instance_;
constexpr UDLCShowDemand::UDLCShowDemand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ads_pathshow_status_(0u)
  , ads_totargetlatdistance_(0){}
struct UDLCShowDemandDefaultTypeInternal {
  constexpr UDLCShowDemandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UDLCShowDemandDefaultTypeInternal() {}
  union {
    UDLCShowDemand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UDLCShowDemandDefaultTypeInternal _UDLCShowDemand_default_instance_;
constexpr ACCShowDemand::ACCShowDemand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_setspeed_(0)
  , acc_timegapset_(0u)
  , acc_vehiclestartremindsts_(0u){}
struct ACCShowDemandDefaultTypeInternal {
  constexpr ACCShowDemandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ACCShowDemandDefaultTypeInternal() {}
  union {
    ACCShowDemand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ACCShowDemandDefaultTypeInternal _ACCShowDemand_default_instance_;
constexpr ADAScruiseRecflag::ADAScruiseRecflag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ad_adascruiserecflag_(0u){}
struct ADAScruiseRecflagDefaultTypeInternal {
  constexpr ADAScruiseRecflagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ADAScruiseRecflagDefaultTypeInternal() {}
  union {
    ADAScruiseRecflag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ADAScruiseRecflagDefaultTypeInternal _ADAScruiseRecflag_default_instance_;
constexpr ADSNIDOutDis::ADSNIDOutDis(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ads_nidoutdis_(0){}
struct ADSNIDOutDisDefaultTypeInternal {
  constexpr ADSNIDOutDisDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ADSNIDOutDisDefaultTypeInternal() {}
  union {
    ADSNIDOutDis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ADSNIDOutDisDefaultTypeInternal _ADSNIDOutDis_default_instance_;
constexpr SmartDrivingTips::SmartDrivingTips(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_fun_(nullptr)
  , udlc_fun_(nullptr)
  , nid_fun_(nullptr)
  , recommend_fun_(nullptr)
  , tjp_fun_(nullptr)
  , adc_funtips_(nullptr)
  , cna_fun_(nullptr)
  , speedlimit_fun_(nullptr)
  , ads_adascruiserec_(nullptr)
  , ads_nidoutdistance_(nullptr)
  , ads_latprohibitcountdown_(0)
  , ads_sbuncountdown_(0){}
struct SmartDrivingTipsDefaultTypeInternal {
  constexpr SmartDrivingTipsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SmartDrivingTipsDefaultTypeInternal() {}
  union {
    SmartDrivingTips _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SmartDrivingTipsDefaultTypeInternal _SmartDrivingTips_default_instance_;
constexpr BasicSmartDrivingTips::BasicSmartDrivingTips(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : smartdrivetips_(nullptr){}
struct BasicSmartDrivingTipsDefaultTypeInternal {
  constexpr BasicSmartDrivingTipsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BasicSmartDrivingTipsDefaultTypeInternal() {}
  union {
    BasicSmartDrivingTips _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BasicSmartDrivingTipsDefaultTypeInternal _BasicSmartDrivingTips_default_instance_;
}  // namespace HmiInterface
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hmi_5fbasic_5fsmartdrivingtips_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hmi_5fbasic_5fsmartdrivingtips_2eproto = nullptr;

const uint32_t TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SpeedLimitShowDemand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SpeedLimitShowDemand, las_tsrhostspdlimit_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SpeedLimitShowDemand, las_overspeedvisualwarning_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SpeedLimitShowDemand, las_overspeedsoundwarning_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SpeedLimitShowDemand, acc_cslsetreq_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SpeedLimitShowDemand, ads_spdlimitedstatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SpeedLimitShowDemand, ads_spdlmttype_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SpeedLimitShowDemand, ads_tsrhostnextspdlimit_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SpeedLimitShowDemand, ads_tsrhostnextspdlimitdist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::CNANotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::CNANotice, ads_cnatextinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADCNotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADCNotice, acc_adcnotice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::TJPNotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::TJPNotice, ads_tjptextinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::NewRecommend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::NewRecommend, ads_newrecommend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::NIDShowDemand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::NIDShowDemand, ads_ndatextinfo_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::NIDShowDemand, ads_ndafenceterminaldis_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::NIDShowDemand, ads_oastatus_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::NIDShowDemand, ads_oadirection_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::NIDShowDemand, ads_oalatdistance_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::NIDShowDemand, ads_oalngdistance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::UDLCShowDemand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::UDLCShowDemand, ads_pathshow_status_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::UDLCShowDemand, ads_totargetlatdistance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ACCShowDemand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ACCShowDemand, acc_setspeed_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ACCShowDemand, acc_timegapset_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ACCShowDemand, acc_vehiclestartremindsts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADAScruiseRecflag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADAScruiseRecflag, ad_adascruiserecflag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADSNIDOutDis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::ADSNIDOutDis, ads_nidoutdis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, acc_fun_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, udlc_fun_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, nid_fun_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, recommend_fun_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, tjp_fun_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, adc_funtips_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, cna_fun_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, speedlimit_fun_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, ads_latprohibitcountdown_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, ads_sbuncountdown_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, ads_adascruiserec_),
  PROTOBUF_FIELD_OFFSET(::HmiInterface::SmartDrivingTips, ads_nidoutdistance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::BasicSmartDrivingTips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HmiInterface::BasicSmartDrivingTips, smartdrivetips_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::HmiInterface::SpeedLimitShowDemand)},
  { 14, -1, -1, sizeof(::HmiInterface::CNANotice)},
  { 21, -1, -1, sizeof(::HmiInterface::ADCNotice)},
  { 28, -1, -1, sizeof(::HmiInterface::TJPNotice)},
  { 35, -1, -1, sizeof(::HmiInterface::NewRecommend)},
  { 42, -1, -1, sizeof(::HmiInterface::NIDShowDemand)},
  { 54, -1, -1, sizeof(::HmiInterface::UDLCShowDemand)},
  { 62, -1, -1, sizeof(::HmiInterface::ACCShowDemand)},
  { 71, -1, -1, sizeof(::HmiInterface::ADAScruiseRecflag)},
  { 78, -1, -1, sizeof(::HmiInterface::ADSNIDOutDis)},
  { 85, -1, -1, sizeof(::HmiInterface::SmartDrivingTips)},
  { 103, -1, -1, sizeof(::HmiInterface::BasicSmartDrivingTips)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_SpeedLimitShowDemand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_CNANotice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_ADCNotice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_TJPNotice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_NewRecommend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_NIDShowDemand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_UDLCShowDemand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_ACCShowDemand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_ADAScruiseRecflag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_ADSNIDOutDis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_SmartDrivingTips_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::HmiInterface::_BasicSmartDrivingTips_default_instance_),
};

const char descriptor_table_protodef_hmi_5fbasic_5fsmartdrivingtips_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n hmi_basic_smartdrivingtips.proto\022\014HmiI"
  "nterface\"\215\002\n\024SpeedLimitShowDemand\022\033\n\023las"
  "_tsrhostspdlimit\030\001 \001(\002\022\"\n\032las_overspeedv"
  "isualwarning\030\002 \001(\r\022!\n\031las_overspeedsound"
  "warning\030\003 \001(\r\022\025\n\racc_cslsetreq\030\004 \001(\r\022\034\n\024"
  "ads_spdlimitedstatus\030\005 \001(\r\022\026\n\016ads_spdlmt"
  "type\030\006 \001(\r\022\037\n\027ads_tsrhostnextspdlimit\030\007 "
  "\001(\002\022#\n\033ads_tsrhostnextspdlimitdist\030\010 \001(\002"
  "\"$\n\tCNANotice\022\027\n\017ads_cnatextinfo\030\001 \001(\r\"\""
  "\n\tADCNotice\022\025\n\racc_adcnotice\030\001 \001(\r\"$\n\tTJ"
  "PNotice\022\027\n\017ads_tjptextinfo\030\001 \001(\r\"(\n\014NewR"
  "ecommend\022\030\n\020ads_newrecommend\030\001 \001(\r\"\256\001\n\rN"
  "IDShowDemand\022\027\n\017ads_ndatextinfo\030\001 \001(\r\022\037\n"
  "\027ads_ndafenceterminaldis\030\002 \001(\002\022\024\n\014ads_oa"
  "status\030\003 \001(\r\022\027\n\017ads_oadirection\030\004 \001(\r\022\031\n"
  "\021ads_oalatdistance\030\005 \001(\r\022\031\n\021ads_oalngdis"
  "tance\030\006 \001(\r\"N\n\016UDLCShowDemand\022\033\n\023ads_pat"
  "hshow_status\030\001 \001(\r\022\037\n\027ads_totargetlatdis"
  "tance\030\002 \001(\002\"`\n\rACCShowDemand\022\024\n\014acc_sets"
  "peed\030\002 \001(\002\022\026\n\016acc_timegapset\030\003 \001(\r\022!\n\031ac"
  "c_vehiclestartremindsts\030\004 \001(\r\"1\n\021ADAScru"
  "iseRecflag\022\034\n\024ad_adascruiserecflag\030\001 \001(\r"
  "\"%\n\014ADSNIDOutDis\022\025\n\rads_nidoutdis\030\001 \001(\002\""
  "\300\004\n\020SmartDrivingTips\022,\n\007acc_fun\030\001 \001(\0132\033."
  "HmiInterface.ACCShowDemand\022.\n\010udlc_fun\030\002"
  " \001(\0132\034.HmiInterface.UDLCShowDemand\022,\n\007ni"
  "d_fun\030\003 \001(\0132\033.HmiInterface.NIDShowDemand"
  "\0221\n\rrecommend_fun\030\004 \001(\0132\032.HmiInterface.N"
  "ewRecommend\022(\n\007tjp_fun\030\005 \001(\0132\027.HmiInterf"
  "ace.TJPNotice\022,\n\013adc_funtips\030\006 \001(\0132\027.Hmi"
  "Interface.ADCNotice\022(\n\007cna_fun\030\007 \001(\0132\027.H"
  "miInterface.CNANotice\022:\n\016speedlimit_fun\030"
  "\010 \001(\0132\".HmiInterface.SpeedLimitShowDeman"
  "d\022 \n\030ads_latprohibitcountdown\030\t \001(\002\022\031\n\021a"
  "ds_sbuncountdown\030\n \001(\002\022:\n\021ads_adascruise"
  "rec\030\013 \001(\0132\037.HmiInterface.ADAScruiseRecfl"
  "ag\0226\n\022ads_nidoutdistance\030\014 \001(\0132\032.HmiInte"
  "rface.ADSNIDOutDis\"O\n\025BasicSmartDrivingT"
  "ips\0226\n\016smartdrivetips\030\001 \001(\0132\036.HmiInterfa"
  "ce.SmartDrivingTipsb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto = {
  false, false, 1587, descriptor_table_protodef_hmi_5fbasic_5fsmartdrivingtips_2eproto, "hmi_basic_smartdrivingtips.proto", 
  &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_hmi_5fbasic_5fsmartdrivingtips_2eproto::offsets,
  file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto, file_level_enum_descriptors_hmi_5fbasic_5fsmartdrivingtips_2eproto, file_level_service_descriptors_hmi_5fbasic_5fsmartdrivingtips_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter() {
  return &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_hmi_5fbasic_5fsmartdrivingtips_2eproto(&descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto);
namespace HmiInterface {

// ===================================================================

class SpeedLimitShowDemand::_Internal {
 public:
};

SpeedLimitShowDemand::SpeedLimitShowDemand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.SpeedLimitShowDemand)
}
SpeedLimitShowDemand::SpeedLimitShowDemand(const SpeedLimitShowDemand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&las_tsrhostspdlimit_, &from.las_tsrhostspdlimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&ads_tsrhostnextspdlimitdist_) -
    reinterpret_cast<char*>(&las_tsrhostspdlimit_)) + sizeof(ads_tsrhostnextspdlimitdist_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.SpeedLimitShowDemand)
}

inline void SpeedLimitShowDemand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&las_tsrhostspdlimit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ads_tsrhostnextspdlimitdist_) -
    reinterpret_cast<char*>(&las_tsrhostspdlimit_)) + sizeof(ads_tsrhostnextspdlimitdist_));
}

SpeedLimitShowDemand::~SpeedLimitShowDemand() {
  // @@protoc_insertion_point(destructor:HmiInterface.SpeedLimitShowDemand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpeedLimitShowDemand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeedLimitShowDemand::ArenaDtor(void* object) {
  SpeedLimitShowDemand* _this = reinterpret_cast< SpeedLimitShowDemand* >(object);
  (void)_this;
}
void SpeedLimitShowDemand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedLimitShowDemand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeedLimitShowDemand::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.SpeedLimitShowDemand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&las_tsrhostspdlimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ads_tsrhostnextspdlimitdist_) -
      reinterpret_cast<char*>(&las_tsrhostspdlimit_)) + sizeof(ads_tsrhostnextspdlimitdist_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedLimitShowDemand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float las_tsrhostspdlimit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          las_tsrhostspdlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 las_overspeedvisualwarning = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          las_overspeedvisualwarning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 las_overspeedsoundwarning = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          las_overspeedsoundwarning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 acc_cslsetreq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          acc_cslsetreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ads_spdlimitedstatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ads_spdlimitedstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ads_spdlmttype = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ads_spdlmttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ads_tsrhostnextspdlimit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          ads_tsrhostnextspdlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ads_tsrhostnextspdlimitdist = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          ads_tsrhostnextspdlimitdist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedLimitShowDemand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.SpeedLimitShowDemand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float las_tsrhostspdlimit = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_las_tsrhostspdlimit = this->_internal_las_tsrhostspdlimit();
  uint32_t raw_las_tsrhostspdlimit;
  memcpy(&raw_las_tsrhostspdlimit, &tmp_las_tsrhostspdlimit, sizeof(tmp_las_tsrhostspdlimit));
  if (raw_las_tsrhostspdlimit != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_las_tsrhostspdlimit(), target);
  }

  // uint32 las_overspeedvisualwarning = 2;
  if (this->_internal_las_overspeedvisualwarning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_las_overspeedvisualwarning(), target);
  }

  // uint32 las_overspeedsoundwarning = 3;
  if (this->_internal_las_overspeedsoundwarning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_las_overspeedsoundwarning(), target);
  }

  // uint32 acc_cslsetreq = 4;
  if (this->_internal_acc_cslsetreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_acc_cslsetreq(), target);
  }

  // uint32 ads_spdlimitedstatus = 5;
  if (this->_internal_ads_spdlimitedstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ads_spdlimitedstatus(), target);
  }

  // uint32 ads_spdlmttype = 6;
  if (this->_internal_ads_spdlmttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ads_spdlmttype(), target);
  }

  // float ads_tsrhostnextspdlimit = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_tsrhostnextspdlimit = this->_internal_ads_tsrhostnextspdlimit();
  uint32_t raw_ads_tsrhostnextspdlimit;
  memcpy(&raw_ads_tsrhostnextspdlimit, &tmp_ads_tsrhostnextspdlimit, sizeof(tmp_ads_tsrhostnextspdlimit));
  if (raw_ads_tsrhostnextspdlimit != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_ads_tsrhostnextspdlimit(), target);
  }

  // float ads_tsrhostnextspdlimitdist = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_tsrhostnextspdlimitdist = this->_internal_ads_tsrhostnextspdlimitdist();
  uint32_t raw_ads_tsrhostnextspdlimitdist;
  memcpy(&raw_ads_tsrhostnextspdlimitdist, &tmp_ads_tsrhostnextspdlimitdist, sizeof(tmp_ads_tsrhostnextspdlimitdist));
  if (raw_ads_tsrhostnextspdlimitdist != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_ads_tsrhostnextspdlimitdist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.SpeedLimitShowDemand)
  return target;
}

size_t SpeedLimitShowDemand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.SpeedLimitShowDemand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float las_tsrhostspdlimit = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_las_tsrhostspdlimit = this->_internal_las_tsrhostspdlimit();
  uint32_t raw_las_tsrhostspdlimit;
  memcpy(&raw_las_tsrhostspdlimit, &tmp_las_tsrhostspdlimit, sizeof(tmp_las_tsrhostspdlimit));
  if (raw_las_tsrhostspdlimit != 0) {
    total_size += 1 + 4;
  }

  // uint32 las_overspeedvisualwarning = 2;
  if (this->_internal_las_overspeedvisualwarning() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_las_overspeedvisualwarning());
  }

  // uint32 las_overspeedsoundwarning = 3;
  if (this->_internal_las_overspeedsoundwarning() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_las_overspeedsoundwarning());
  }

  // uint32 acc_cslsetreq = 4;
  if (this->_internal_acc_cslsetreq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_acc_cslsetreq());
  }

  // uint32 ads_spdlimitedstatus = 5;
  if (this->_internal_ads_spdlimitedstatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ads_spdlimitedstatus());
  }

  // uint32 ads_spdlmttype = 6;
  if (this->_internal_ads_spdlmttype() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ads_spdlmttype());
  }

  // float ads_tsrhostnextspdlimit = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_tsrhostnextspdlimit = this->_internal_ads_tsrhostnextspdlimit();
  uint32_t raw_ads_tsrhostnextspdlimit;
  memcpy(&raw_ads_tsrhostnextspdlimit, &tmp_ads_tsrhostnextspdlimit, sizeof(tmp_ads_tsrhostnextspdlimit));
  if (raw_ads_tsrhostnextspdlimit != 0) {
    total_size += 1 + 4;
  }

  // float ads_tsrhostnextspdlimitdist = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_tsrhostnextspdlimitdist = this->_internal_ads_tsrhostnextspdlimitdist();
  uint32_t raw_ads_tsrhostnextspdlimitdist;
  memcpy(&raw_ads_tsrhostnextspdlimitdist, &tmp_ads_tsrhostnextspdlimitdist, sizeof(tmp_ads_tsrhostnextspdlimitdist));
  if (raw_ads_tsrhostnextspdlimitdist != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedLimitShowDemand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedLimitShowDemand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedLimitShowDemand::GetClassData() const { return &_class_data_; }

void SpeedLimitShowDemand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedLimitShowDemand *>(to)->MergeFrom(
      static_cast<const SpeedLimitShowDemand &>(from));
}


void SpeedLimitShowDemand::MergeFrom(const SpeedLimitShowDemand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.SpeedLimitShowDemand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_las_tsrhostspdlimit = from._internal_las_tsrhostspdlimit();
  uint32_t raw_las_tsrhostspdlimit;
  memcpy(&raw_las_tsrhostspdlimit, &tmp_las_tsrhostspdlimit, sizeof(tmp_las_tsrhostspdlimit));
  if (raw_las_tsrhostspdlimit != 0) {
    _internal_set_las_tsrhostspdlimit(from._internal_las_tsrhostspdlimit());
  }
  if (from._internal_las_overspeedvisualwarning() != 0) {
    _internal_set_las_overspeedvisualwarning(from._internal_las_overspeedvisualwarning());
  }
  if (from._internal_las_overspeedsoundwarning() != 0) {
    _internal_set_las_overspeedsoundwarning(from._internal_las_overspeedsoundwarning());
  }
  if (from._internal_acc_cslsetreq() != 0) {
    _internal_set_acc_cslsetreq(from._internal_acc_cslsetreq());
  }
  if (from._internal_ads_spdlimitedstatus() != 0) {
    _internal_set_ads_spdlimitedstatus(from._internal_ads_spdlimitedstatus());
  }
  if (from._internal_ads_spdlmttype() != 0) {
    _internal_set_ads_spdlmttype(from._internal_ads_spdlmttype());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_tsrhostnextspdlimit = from._internal_ads_tsrhostnextspdlimit();
  uint32_t raw_ads_tsrhostnextspdlimit;
  memcpy(&raw_ads_tsrhostnextspdlimit, &tmp_ads_tsrhostnextspdlimit, sizeof(tmp_ads_tsrhostnextspdlimit));
  if (raw_ads_tsrhostnextspdlimit != 0) {
    _internal_set_ads_tsrhostnextspdlimit(from._internal_ads_tsrhostnextspdlimit());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_tsrhostnextspdlimitdist = from._internal_ads_tsrhostnextspdlimitdist();
  uint32_t raw_ads_tsrhostnextspdlimitdist;
  memcpy(&raw_ads_tsrhostnextspdlimitdist, &tmp_ads_tsrhostnextspdlimitdist, sizeof(tmp_ads_tsrhostnextspdlimitdist));
  if (raw_ads_tsrhostnextspdlimitdist != 0) {
    _internal_set_ads_tsrhostnextspdlimitdist(from._internal_ads_tsrhostnextspdlimitdist());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedLimitShowDemand::CopyFrom(const SpeedLimitShowDemand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.SpeedLimitShowDemand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedLimitShowDemand::IsInitialized() const {
  return true;
}

void SpeedLimitShowDemand::InternalSwap(SpeedLimitShowDemand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedLimitShowDemand, ads_tsrhostnextspdlimitdist_)
      + sizeof(SpeedLimitShowDemand::ads_tsrhostnextspdlimitdist_)
      - PROTOBUF_FIELD_OFFSET(SpeedLimitShowDemand, las_tsrhostspdlimit_)>(
          reinterpret_cast<char*>(&las_tsrhostspdlimit_),
          reinterpret_cast<char*>(&other->las_tsrhostspdlimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedLimitShowDemand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter, &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[0]);
}

// ===================================================================

class CNANotice::_Internal {
 public:
};

CNANotice::CNANotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.CNANotice)
}
CNANotice::CNANotice(const CNANotice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ads_cnatextinfo_ = from.ads_cnatextinfo_;
  // @@protoc_insertion_point(copy_constructor:HmiInterface.CNANotice)
}

inline void CNANotice::SharedCtor() {
ads_cnatextinfo_ = 0u;
}

CNANotice::~CNANotice() {
  // @@protoc_insertion_point(destructor:HmiInterface.CNANotice)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CNANotice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CNANotice::ArenaDtor(void* object) {
  CNANotice* _this = reinterpret_cast< CNANotice* >(object);
  (void)_this;
}
void CNANotice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CNANotice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CNANotice::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.CNANotice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ads_cnatextinfo_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNANotice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ads_cnatextinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ads_cnatextinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNANotice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.CNANotice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ads_cnatextinfo = 1;
  if (this->_internal_ads_cnatextinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ads_cnatextinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.CNANotice)
  return target;
}

size_t CNANotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.CNANotice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ads_cnatextinfo = 1;
  if (this->_internal_ads_cnatextinfo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ads_cnatextinfo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNANotice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CNANotice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNANotice::GetClassData() const { return &_class_data_; }

void CNANotice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CNANotice *>(to)->MergeFrom(
      static_cast<const CNANotice &>(from));
}


void CNANotice::MergeFrom(const CNANotice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.CNANotice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ads_cnatextinfo() != 0) {
    _internal_set_ads_cnatextinfo(from._internal_ads_cnatextinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNANotice::CopyFrom(const CNANotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.CNANotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNANotice::IsInitialized() const {
  return true;
}

void CNANotice::InternalSwap(CNANotice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ads_cnatextinfo_, other->ads_cnatextinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNANotice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter, &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[1]);
}

// ===================================================================

class ADCNotice::_Internal {
 public:
};

ADCNotice::ADCNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.ADCNotice)
}
ADCNotice::ADCNotice(const ADCNotice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_adcnotice_ = from.acc_adcnotice_;
  // @@protoc_insertion_point(copy_constructor:HmiInterface.ADCNotice)
}

inline void ADCNotice::SharedCtor() {
acc_adcnotice_ = 0u;
}

ADCNotice::~ADCNotice() {
  // @@protoc_insertion_point(destructor:HmiInterface.ADCNotice)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ADCNotice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADCNotice::ArenaDtor(void* object) {
  ADCNotice* _this = reinterpret_cast< ADCNotice* >(object);
  (void)_this;
}
void ADCNotice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ADCNotice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ADCNotice::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.ADCNotice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_adcnotice_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADCNotice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 acc_adcnotice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_adcnotice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADCNotice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.ADCNotice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 acc_adcnotice = 1;
  if (this->_internal_acc_adcnotice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_acc_adcnotice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.ADCNotice)
  return target;
}

size_t ADCNotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.ADCNotice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 acc_adcnotice = 1;
  if (this->_internal_acc_adcnotice() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_acc_adcnotice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADCNotice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ADCNotice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADCNotice::GetClassData() const { return &_class_data_; }

void ADCNotice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ADCNotice *>(to)->MergeFrom(
      static_cast<const ADCNotice &>(from));
}


void ADCNotice::MergeFrom(const ADCNotice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.ADCNotice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_acc_adcnotice() != 0) {
    _internal_set_acc_adcnotice(from._internal_acc_adcnotice());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADCNotice::CopyFrom(const ADCNotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.ADCNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCNotice::IsInitialized() const {
  return true;
}

void ADCNotice::InternalSwap(ADCNotice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(acc_adcnotice_, other->acc_adcnotice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCNotice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter, &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[2]);
}

// ===================================================================

class TJPNotice::_Internal {
 public:
};

TJPNotice::TJPNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.TJPNotice)
}
TJPNotice::TJPNotice(const TJPNotice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ads_tjptextinfo_ = from.ads_tjptextinfo_;
  // @@protoc_insertion_point(copy_constructor:HmiInterface.TJPNotice)
}

inline void TJPNotice::SharedCtor() {
ads_tjptextinfo_ = 0u;
}

TJPNotice::~TJPNotice() {
  // @@protoc_insertion_point(destructor:HmiInterface.TJPNotice)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TJPNotice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TJPNotice::ArenaDtor(void* object) {
  TJPNotice* _this = reinterpret_cast< TJPNotice* >(object);
  (void)_this;
}
void TJPNotice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TJPNotice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TJPNotice::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.TJPNotice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ads_tjptextinfo_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TJPNotice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ads_tjptextinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ads_tjptextinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TJPNotice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.TJPNotice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ads_tjptextinfo = 1;
  if (this->_internal_ads_tjptextinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ads_tjptextinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.TJPNotice)
  return target;
}

size_t TJPNotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.TJPNotice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ads_tjptextinfo = 1;
  if (this->_internal_ads_tjptextinfo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ads_tjptextinfo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TJPNotice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TJPNotice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TJPNotice::GetClassData() const { return &_class_data_; }

void TJPNotice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TJPNotice *>(to)->MergeFrom(
      static_cast<const TJPNotice &>(from));
}


void TJPNotice::MergeFrom(const TJPNotice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.TJPNotice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ads_tjptextinfo() != 0) {
    _internal_set_ads_tjptextinfo(from._internal_ads_tjptextinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TJPNotice::CopyFrom(const TJPNotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.TJPNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TJPNotice::IsInitialized() const {
  return true;
}

void TJPNotice::InternalSwap(TJPNotice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ads_tjptextinfo_, other->ads_tjptextinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TJPNotice::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter, &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[3]);
}

// ===================================================================

class NewRecommend::_Internal {
 public:
};

NewRecommend::NewRecommend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.NewRecommend)
}
NewRecommend::NewRecommend(const NewRecommend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ads_newrecommend_ = from.ads_newrecommend_;
  // @@protoc_insertion_point(copy_constructor:HmiInterface.NewRecommend)
}

inline void NewRecommend::SharedCtor() {
ads_newrecommend_ = 0u;
}

NewRecommend::~NewRecommend() {
  // @@protoc_insertion_point(destructor:HmiInterface.NewRecommend)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NewRecommend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NewRecommend::ArenaDtor(void* object) {
  NewRecommend* _this = reinterpret_cast< NewRecommend* >(object);
  (void)_this;
}
void NewRecommend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewRecommend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewRecommend::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.NewRecommend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ads_newrecommend_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewRecommend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ads_newrecommend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ads_newrecommend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewRecommend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.NewRecommend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ads_newrecommend = 1;
  if (this->_internal_ads_newrecommend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ads_newrecommend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.NewRecommend)
  return target;
}

size_t NewRecommend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.NewRecommend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ads_newrecommend = 1;
  if (this->_internal_ads_newrecommend() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ads_newrecommend());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewRecommend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NewRecommend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewRecommend::GetClassData() const { return &_class_data_; }

void NewRecommend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NewRecommend *>(to)->MergeFrom(
      static_cast<const NewRecommend &>(from));
}


void NewRecommend::MergeFrom(const NewRecommend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.NewRecommend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ads_newrecommend() != 0) {
    _internal_set_ads_newrecommend(from._internal_ads_newrecommend());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewRecommend::CopyFrom(const NewRecommend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.NewRecommend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewRecommend::IsInitialized() const {
  return true;
}

void NewRecommend::InternalSwap(NewRecommend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ads_newrecommend_, other->ads_newrecommend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewRecommend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter, &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[4]);
}

// ===================================================================

class NIDShowDemand::_Internal {
 public:
};

NIDShowDemand::NIDShowDemand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.NIDShowDemand)
}
NIDShowDemand::NIDShowDemand(const NIDShowDemand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ads_ndatextinfo_, &from.ads_ndatextinfo_,
    static_cast<size_t>(reinterpret_cast<char*>(&ads_oalngdistance_) -
    reinterpret_cast<char*>(&ads_ndatextinfo_)) + sizeof(ads_oalngdistance_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.NIDShowDemand)
}

inline void NIDShowDemand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ads_ndatextinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ads_oalngdistance_) -
    reinterpret_cast<char*>(&ads_ndatextinfo_)) + sizeof(ads_oalngdistance_));
}

NIDShowDemand::~NIDShowDemand() {
  // @@protoc_insertion_point(destructor:HmiInterface.NIDShowDemand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NIDShowDemand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NIDShowDemand::ArenaDtor(void* object) {
  NIDShowDemand* _this = reinterpret_cast< NIDShowDemand* >(object);
  (void)_this;
}
void NIDShowDemand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NIDShowDemand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NIDShowDemand::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.NIDShowDemand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ads_ndatextinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ads_oalngdistance_) -
      reinterpret_cast<char*>(&ads_ndatextinfo_)) + sizeof(ads_oalngdistance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NIDShowDemand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ads_ndatextinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ads_ndatextinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ads_ndafenceterminaldis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ads_ndafenceterminaldis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 ads_oastatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ads_oastatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ads_oadirection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ads_oadirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ads_oalatdistance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ads_oalatdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ads_oalngdistance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ads_oalngdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NIDShowDemand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.NIDShowDemand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ads_ndatextinfo = 1;
  if (this->_internal_ads_ndatextinfo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ads_ndatextinfo(), target);
  }

  // float ads_ndafenceterminaldis = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_ndafenceterminaldis = this->_internal_ads_ndafenceterminaldis();
  uint32_t raw_ads_ndafenceterminaldis;
  memcpy(&raw_ads_ndafenceterminaldis, &tmp_ads_ndafenceterminaldis, sizeof(tmp_ads_ndafenceterminaldis));
  if (raw_ads_ndafenceterminaldis != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ads_ndafenceterminaldis(), target);
  }

  // uint32 ads_oastatus = 3;
  if (this->_internal_ads_oastatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ads_oastatus(), target);
  }

  // uint32 ads_oadirection = 4;
  if (this->_internal_ads_oadirection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ads_oadirection(), target);
  }

  // uint32 ads_oalatdistance = 5;
  if (this->_internal_ads_oalatdistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ads_oalatdistance(), target);
  }

  // uint32 ads_oalngdistance = 6;
  if (this->_internal_ads_oalngdistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ads_oalngdistance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.NIDShowDemand)
  return target;
}

size_t NIDShowDemand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.NIDShowDemand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ads_ndatextinfo = 1;
  if (this->_internal_ads_ndatextinfo() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ads_ndatextinfo());
  }

  // float ads_ndafenceterminaldis = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_ndafenceterminaldis = this->_internal_ads_ndafenceterminaldis();
  uint32_t raw_ads_ndafenceterminaldis;
  memcpy(&raw_ads_ndafenceterminaldis, &tmp_ads_ndafenceterminaldis, sizeof(tmp_ads_ndafenceterminaldis));
  if (raw_ads_ndafenceterminaldis != 0) {
    total_size += 1 + 4;
  }

  // uint32 ads_oastatus = 3;
  if (this->_internal_ads_oastatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ads_oastatus());
  }

  // uint32 ads_oadirection = 4;
  if (this->_internal_ads_oadirection() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ads_oadirection());
  }

  // uint32 ads_oalatdistance = 5;
  if (this->_internal_ads_oalatdistance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ads_oalatdistance());
  }

  // uint32 ads_oalngdistance = 6;
  if (this->_internal_ads_oalngdistance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ads_oalngdistance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NIDShowDemand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NIDShowDemand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NIDShowDemand::GetClassData() const { return &_class_data_; }

void NIDShowDemand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NIDShowDemand *>(to)->MergeFrom(
      static_cast<const NIDShowDemand &>(from));
}


void NIDShowDemand::MergeFrom(const NIDShowDemand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.NIDShowDemand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ads_ndatextinfo() != 0) {
    _internal_set_ads_ndatextinfo(from._internal_ads_ndatextinfo());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_ndafenceterminaldis = from._internal_ads_ndafenceterminaldis();
  uint32_t raw_ads_ndafenceterminaldis;
  memcpy(&raw_ads_ndafenceterminaldis, &tmp_ads_ndafenceterminaldis, sizeof(tmp_ads_ndafenceterminaldis));
  if (raw_ads_ndafenceterminaldis != 0) {
    _internal_set_ads_ndafenceterminaldis(from._internal_ads_ndafenceterminaldis());
  }
  if (from._internal_ads_oastatus() != 0) {
    _internal_set_ads_oastatus(from._internal_ads_oastatus());
  }
  if (from._internal_ads_oadirection() != 0) {
    _internal_set_ads_oadirection(from._internal_ads_oadirection());
  }
  if (from._internal_ads_oalatdistance() != 0) {
    _internal_set_ads_oalatdistance(from._internal_ads_oalatdistance());
  }
  if (from._internal_ads_oalngdistance() != 0) {
    _internal_set_ads_oalngdistance(from._internal_ads_oalngdistance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NIDShowDemand::CopyFrom(const NIDShowDemand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.NIDShowDemand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NIDShowDemand::IsInitialized() const {
  return true;
}

void NIDShowDemand::InternalSwap(NIDShowDemand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NIDShowDemand, ads_oalngdistance_)
      + sizeof(NIDShowDemand::ads_oalngdistance_)
      - PROTOBUF_FIELD_OFFSET(NIDShowDemand, ads_ndatextinfo_)>(
          reinterpret_cast<char*>(&ads_ndatextinfo_),
          reinterpret_cast<char*>(&other->ads_ndatextinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NIDShowDemand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter, &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[5]);
}

// ===================================================================

class UDLCShowDemand::_Internal {
 public:
};

UDLCShowDemand::UDLCShowDemand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.UDLCShowDemand)
}
UDLCShowDemand::UDLCShowDemand(const UDLCShowDemand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ads_pathshow_status_, &from.ads_pathshow_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&ads_totargetlatdistance_) -
    reinterpret_cast<char*>(&ads_pathshow_status_)) + sizeof(ads_totargetlatdistance_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.UDLCShowDemand)
}

inline void UDLCShowDemand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ads_pathshow_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ads_totargetlatdistance_) -
    reinterpret_cast<char*>(&ads_pathshow_status_)) + sizeof(ads_totargetlatdistance_));
}

UDLCShowDemand::~UDLCShowDemand() {
  // @@protoc_insertion_point(destructor:HmiInterface.UDLCShowDemand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UDLCShowDemand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UDLCShowDemand::ArenaDtor(void* object) {
  UDLCShowDemand* _this = reinterpret_cast< UDLCShowDemand* >(object);
  (void)_this;
}
void UDLCShowDemand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UDLCShowDemand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UDLCShowDemand::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.UDLCShowDemand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ads_pathshow_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ads_totargetlatdistance_) -
      reinterpret_cast<char*>(&ads_pathshow_status_)) + sizeof(ads_totargetlatdistance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UDLCShowDemand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ads_pathshow_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ads_pathshow_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ads_totargetlatdistance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ads_totargetlatdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UDLCShowDemand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.UDLCShowDemand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ads_pathshow_status = 1;
  if (this->_internal_ads_pathshow_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ads_pathshow_status(), target);
  }

  // float ads_totargetlatdistance = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_totargetlatdistance = this->_internal_ads_totargetlatdistance();
  uint32_t raw_ads_totargetlatdistance;
  memcpy(&raw_ads_totargetlatdistance, &tmp_ads_totargetlatdistance, sizeof(tmp_ads_totargetlatdistance));
  if (raw_ads_totargetlatdistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ads_totargetlatdistance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.UDLCShowDemand)
  return target;
}

size_t UDLCShowDemand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.UDLCShowDemand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ads_pathshow_status = 1;
  if (this->_internal_ads_pathshow_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ads_pathshow_status());
  }

  // float ads_totargetlatdistance = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_totargetlatdistance = this->_internal_ads_totargetlatdistance();
  uint32_t raw_ads_totargetlatdistance;
  memcpy(&raw_ads_totargetlatdistance, &tmp_ads_totargetlatdistance, sizeof(tmp_ads_totargetlatdistance));
  if (raw_ads_totargetlatdistance != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UDLCShowDemand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UDLCShowDemand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UDLCShowDemand::GetClassData() const { return &_class_data_; }

void UDLCShowDemand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UDLCShowDemand *>(to)->MergeFrom(
      static_cast<const UDLCShowDemand &>(from));
}


void UDLCShowDemand::MergeFrom(const UDLCShowDemand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.UDLCShowDemand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ads_pathshow_status() != 0) {
    _internal_set_ads_pathshow_status(from._internal_ads_pathshow_status());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_totargetlatdistance = from._internal_ads_totargetlatdistance();
  uint32_t raw_ads_totargetlatdistance;
  memcpy(&raw_ads_totargetlatdistance, &tmp_ads_totargetlatdistance, sizeof(tmp_ads_totargetlatdistance));
  if (raw_ads_totargetlatdistance != 0) {
    _internal_set_ads_totargetlatdistance(from._internal_ads_totargetlatdistance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UDLCShowDemand::CopyFrom(const UDLCShowDemand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.UDLCShowDemand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UDLCShowDemand::IsInitialized() const {
  return true;
}

void UDLCShowDemand::InternalSwap(UDLCShowDemand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UDLCShowDemand, ads_totargetlatdistance_)
      + sizeof(UDLCShowDemand::ads_totargetlatdistance_)
      - PROTOBUF_FIELD_OFFSET(UDLCShowDemand, ads_pathshow_status_)>(
          reinterpret_cast<char*>(&ads_pathshow_status_),
          reinterpret_cast<char*>(&other->ads_pathshow_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UDLCShowDemand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter, &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[6]);
}

// ===================================================================

class ACCShowDemand::_Internal {
 public:
};

ACCShowDemand::ACCShowDemand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.ACCShowDemand)
}
ACCShowDemand::ACCShowDemand(const ACCShowDemand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&acc_setspeed_, &from.acc_setspeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&acc_vehiclestartremindsts_) -
    reinterpret_cast<char*>(&acc_setspeed_)) + sizeof(acc_vehiclestartremindsts_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.ACCShowDemand)
}

inline void ACCShowDemand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acc_setspeed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acc_vehiclestartremindsts_) -
    reinterpret_cast<char*>(&acc_setspeed_)) + sizeof(acc_vehiclestartremindsts_));
}

ACCShowDemand::~ACCShowDemand() {
  // @@protoc_insertion_point(destructor:HmiInterface.ACCShowDemand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ACCShowDemand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ACCShowDemand::ArenaDtor(void* object) {
  ACCShowDemand* _this = reinterpret_cast< ACCShowDemand* >(object);
  (void)_this;
}
void ACCShowDemand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ACCShowDemand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ACCShowDemand::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.ACCShowDemand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acc_setspeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_vehiclestartremindsts_) -
      reinterpret_cast<char*>(&acc_setspeed_)) + sizeof(acc_vehiclestartremindsts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ACCShowDemand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float acc_setspeed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          acc_setspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 acc_timegapset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          acc_timegapset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 acc_vehiclestartremindsts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          acc_vehiclestartremindsts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ACCShowDemand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.ACCShowDemand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float acc_setspeed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_setspeed = this->_internal_acc_setspeed();
  uint32_t raw_acc_setspeed;
  memcpy(&raw_acc_setspeed, &tmp_acc_setspeed, sizeof(tmp_acc_setspeed));
  if (raw_acc_setspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_acc_setspeed(), target);
  }

  // uint32 acc_timegapset = 3;
  if (this->_internal_acc_timegapset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_acc_timegapset(), target);
  }

  // uint32 acc_vehiclestartremindsts = 4;
  if (this->_internal_acc_vehiclestartremindsts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_acc_vehiclestartremindsts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.ACCShowDemand)
  return target;
}

size_t ACCShowDemand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.ACCShowDemand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float acc_setspeed = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_setspeed = this->_internal_acc_setspeed();
  uint32_t raw_acc_setspeed;
  memcpy(&raw_acc_setspeed, &tmp_acc_setspeed, sizeof(tmp_acc_setspeed));
  if (raw_acc_setspeed != 0) {
    total_size += 1 + 4;
  }

  // uint32 acc_timegapset = 3;
  if (this->_internal_acc_timegapset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_acc_timegapset());
  }

  // uint32 acc_vehiclestartremindsts = 4;
  if (this->_internal_acc_vehiclestartremindsts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_acc_vehiclestartremindsts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ACCShowDemand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ACCShowDemand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ACCShowDemand::GetClassData() const { return &_class_data_; }

void ACCShowDemand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ACCShowDemand *>(to)->MergeFrom(
      static_cast<const ACCShowDemand &>(from));
}


void ACCShowDemand::MergeFrom(const ACCShowDemand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.ACCShowDemand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_acc_setspeed = from._internal_acc_setspeed();
  uint32_t raw_acc_setspeed;
  memcpy(&raw_acc_setspeed, &tmp_acc_setspeed, sizeof(tmp_acc_setspeed));
  if (raw_acc_setspeed != 0) {
    _internal_set_acc_setspeed(from._internal_acc_setspeed());
  }
  if (from._internal_acc_timegapset() != 0) {
    _internal_set_acc_timegapset(from._internal_acc_timegapset());
  }
  if (from._internal_acc_vehiclestartremindsts() != 0) {
    _internal_set_acc_vehiclestartremindsts(from._internal_acc_vehiclestartremindsts());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ACCShowDemand::CopyFrom(const ACCShowDemand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.ACCShowDemand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACCShowDemand::IsInitialized() const {
  return true;
}

void ACCShowDemand::InternalSwap(ACCShowDemand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ACCShowDemand, acc_vehiclestartremindsts_)
      + sizeof(ACCShowDemand::acc_vehiclestartremindsts_)
      - PROTOBUF_FIELD_OFFSET(ACCShowDemand, acc_setspeed_)>(
          reinterpret_cast<char*>(&acc_setspeed_),
          reinterpret_cast<char*>(&other->acc_setspeed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ACCShowDemand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter, &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[7]);
}

// ===================================================================

class ADAScruiseRecflag::_Internal {
 public:
};

ADAScruiseRecflag::ADAScruiseRecflag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.ADAScruiseRecflag)
}
ADAScruiseRecflag::ADAScruiseRecflag(const ADAScruiseRecflag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ad_adascruiserecflag_ = from.ad_adascruiserecflag_;
  // @@protoc_insertion_point(copy_constructor:HmiInterface.ADAScruiseRecflag)
}

inline void ADAScruiseRecflag::SharedCtor() {
ad_adascruiserecflag_ = 0u;
}

ADAScruiseRecflag::~ADAScruiseRecflag() {
  // @@protoc_insertion_point(destructor:HmiInterface.ADAScruiseRecflag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ADAScruiseRecflag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADAScruiseRecflag::ArenaDtor(void* object) {
  ADAScruiseRecflag* _this = reinterpret_cast< ADAScruiseRecflag* >(object);
  (void)_this;
}
void ADAScruiseRecflag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ADAScruiseRecflag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ADAScruiseRecflag::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.ADAScruiseRecflag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ad_adascruiserecflag_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADAScruiseRecflag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ad_adascruiserecflag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ad_adascruiserecflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADAScruiseRecflag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.ADAScruiseRecflag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ad_adascruiserecflag = 1;
  if (this->_internal_ad_adascruiserecflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ad_adascruiserecflag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.ADAScruiseRecflag)
  return target;
}

size_t ADAScruiseRecflag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.ADAScruiseRecflag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ad_adascruiserecflag = 1;
  if (this->_internal_ad_adascruiserecflag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ad_adascruiserecflag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADAScruiseRecflag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ADAScruiseRecflag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADAScruiseRecflag::GetClassData() const { return &_class_data_; }

void ADAScruiseRecflag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ADAScruiseRecflag *>(to)->MergeFrom(
      static_cast<const ADAScruiseRecflag &>(from));
}


void ADAScruiseRecflag::MergeFrom(const ADAScruiseRecflag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.ADAScruiseRecflag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ad_adascruiserecflag() != 0) {
    _internal_set_ad_adascruiserecflag(from._internal_ad_adascruiserecflag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADAScruiseRecflag::CopyFrom(const ADAScruiseRecflag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.ADAScruiseRecflag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADAScruiseRecflag::IsInitialized() const {
  return true;
}

void ADAScruiseRecflag::InternalSwap(ADAScruiseRecflag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ad_adascruiserecflag_, other->ad_adascruiserecflag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADAScruiseRecflag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter, &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[8]);
}

// ===================================================================

class ADSNIDOutDis::_Internal {
 public:
};

ADSNIDOutDis::ADSNIDOutDis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.ADSNIDOutDis)
}
ADSNIDOutDis::ADSNIDOutDis(const ADSNIDOutDis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ads_nidoutdis_ = from.ads_nidoutdis_;
  // @@protoc_insertion_point(copy_constructor:HmiInterface.ADSNIDOutDis)
}

inline void ADSNIDOutDis::SharedCtor() {
ads_nidoutdis_ = 0;
}

ADSNIDOutDis::~ADSNIDOutDis() {
  // @@protoc_insertion_point(destructor:HmiInterface.ADSNIDOutDis)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ADSNIDOutDis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADSNIDOutDis::ArenaDtor(void* object) {
  ADSNIDOutDis* _this = reinterpret_cast< ADSNIDOutDis* >(object);
  (void)_this;
}
void ADSNIDOutDis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ADSNIDOutDis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ADSNIDOutDis::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.ADSNIDOutDis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ads_nidoutdis_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADSNIDOutDis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float ads_nidoutdis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ads_nidoutdis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADSNIDOutDis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.ADSNIDOutDis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float ads_nidoutdis = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_nidoutdis = this->_internal_ads_nidoutdis();
  uint32_t raw_ads_nidoutdis;
  memcpy(&raw_ads_nidoutdis, &tmp_ads_nidoutdis, sizeof(tmp_ads_nidoutdis));
  if (raw_ads_nidoutdis != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_ads_nidoutdis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.ADSNIDOutDis)
  return target;
}

size_t ADSNIDOutDis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.ADSNIDOutDis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float ads_nidoutdis = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_nidoutdis = this->_internal_ads_nidoutdis();
  uint32_t raw_ads_nidoutdis;
  memcpy(&raw_ads_nidoutdis, &tmp_ads_nidoutdis, sizeof(tmp_ads_nidoutdis));
  if (raw_ads_nidoutdis != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADSNIDOutDis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ADSNIDOutDis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADSNIDOutDis::GetClassData() const { return &_class_data_; }

void ADSNIDOutDis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ADSNIDOutDis *>(to)->MergeFrom(
      static_cast<const ADSNIDOutDis &>(from));
}


void ADSNIDOutDis::MergeFrom(const ADSNIDOutDis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.ADSNIDOutDis)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_nidoutdis = from._internal_ads_nidoutdis();
  uint32_t raw_ads_nidoutdis;
  memcpy(&raw_ads_nidoutdis, &tmp_ads_nidoutdis, sizeof(tmp_ads_nidoutdis));
  if (raw_ads_nidoutdis != 0) {
    _internal_set_ads_nidoutdis(from._internal_ads_nidoutdis());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADSNIDOutDis::CopyFrom(const ADSNIDOutDis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.ADSNIDOutDis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADSNIDOutDis::IsInitialized() const {
  return true;
}

void ADSNIDOutDis::InternalSwap(ADSNIDOutDis* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ads_nidoutdis_, other->ads_nidoutdis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADSNIDOutDis::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter, &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[9]);
}

// ===================================================================

class SmartDrivingTips::_Internal {
 public:
  static const ::HmiInterface::ACCShowDemand& acc_fun(const SmartDrivingTips* msg);
  static const ::HmiInterface::UDLCShowDemand& udlc_fun(const SmartDrivingTips* msg);
  static const ::HmiInterface::NIDShowDemand& nid_fun(const SmartDrivingTips* msg);
  static const ::HmiInterface::NewRecommend& recommend_fun(const SmartDrivingTips* msg);
  static const ::HmiInterface::TJPNotice& tjp_fun(const SmartDrivingTips* msg);
  static const ::HmiInterface::ADCNotice& adc_funtips(const SmartDrivingTips* msg);
  static const ::HmiInterface::CNANotice& cna_fun(const SmartDrivingTips* msg);
  static const ::HmiInterface::SpeedLimitShowDemand& speedlimit_fun(const SmartDrivingTips* msg);
  static const ::HmiInterface::ADAScruiseRecflag& ads_adascruiserec(const SmartDrivingTips* msg);
  static const ::HmiInterface::ADSNIDOutDis& ads_nidoutdistance(const SmartDrivingTips* msg);
};

const ::HmiInterface::ACCShowDemand&
SmartDrivingTips::_Internal::acc_fun(const SmartDrivingTips* msg) {
  return *msg->acc_fun_;
}
const ::HmiInterface::UDLCShowDemand&
SmartDrivingTips::_Internal::udlc_fun(const SmartDrivingTips* msg) {
  return *msg->udlc_fun_;
}
const ::HmiInterface::NIDShowDemand&
SmartDrivingTips::_Internal::nid_fun(const SmartDrivingTips* msg) {
  return *msg->nid_fun_;
}
const ::HmiInterface::NewRecommend&
SmartDrivingTips::_Internal::recommend_fun(const SmartDrivingTips* msg) {
  return *msg->recommend_fun_;
}
const ::HmiInterface::TJPNotice&
SmartDrivingTips::_Internal::tjp_fun(const SmartDrivingTips* msg) {
  return *msg->tjp_fun_;
}
const ::HmiInterface::ADCNotice&
SmartDrivingTips::_Internal::adc_funtips(const SmartDrivingTips* msg) {
  return *msg->adc_funtips_;
}
const ::HmiInterface::CNANotice&
SmartDrivingTips::_Internal::cna_fun(const SmartDrivingTips* msg) {
  return *msg->cna_fun_;
}
const ::HmiInterface::SpeedLimitShowDemand&
SmartDrivingTips::_Internal::speedlimit_fun(const SmartDrivingTips* msg) {
  return *msg->speedlimit_fun_;
}
const ::HmiInterface::ADAScruiseRecflag&
SmartDrivingTips::_Internal::ads_adascruiserec(const SmartDrivingTips* msg) {
  return *msg->ads_adascruiserec_;
}
const ::HmiInterface::ADSNIDOutDis&
SmartDrivingTips::_Internal::ads_nidoutdistance(const SmartDrivingTips* msg) {
  return *msg->ads_nidoutdistance_;
}
SmartDrivingTips::SmartDrivingTips(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.SmartDrivingTips)
}
SmartDrivingTips::SmartDrivingTips(const SmartDrivingTips& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_acc_fun()) {
    acc_fun_ = new ::HmiInterface::ACCShowDemand(*from.acc_fun_);
  } else {
    acc_fun_ = nullptr;
  }
  if (from._internal_has_udlc_fun()) {
    udlc_fun_ = new ::HmiInterface::UDLCShowDemand(*from.udlc_fun_);
  } else {
    udlc_fun_ = nullptr;
  }
  if (from._internal_has_nid_fun()) {
    nid_fun_ = new ::HmiInterface::NIDShowDemand(*from.nid_fun_);
  } else {
    nid_fun_ = nullptr;
  }
  if (from._internal_has_recommend_fun()) {
    recommend_fun_ = new ::HmiInterface::NewRecommend(*from.recommend_fun_);
  } else {
    recommend_fun_ = nullptr;
  }
  if (from._internal_has_tjp_fun()) {
    tjp_fun_ = new ::HmiInterface::TJPNotice(*from.tjp_fun_);
  } else {
    tjp_fun_ = nullptr;
  }
  if (from._internal_has_adc_funtips()) {
    adc_funtips_ = new ::HmiInterface::ADCNotice(*from.adc_funtips_);
  } else {
    adc_funtips_ = nullptr;
  }
  if (from._internal_has_cna_fun()) {
    cna_fun_ = new ::HmiInterface::CNANotice(*from.cna_fun_);
  } else {
    cna_fun_ = nullptr;
  }
  if (from._internal_has_speedlimit_fun()) {
    speedlimit_fun_ = new ::HmiInterface::SpeedLimitShowDemand(*from.speedlimit_fun_);
  } else {
    speedlimit_fun_ = nullptr;
  }
  if (from._internal_has_ads_adascruiserec()) {
    ads_adascruiserec_ = new ::HmiInterface::ADAScruiseRecflag(*from.ads_adascruiserec_);
  } else {
    ads_adascruiserec_ = nullptr;
  }
  if (from._internal_has_ads_nidoutdistance()) {
    ads_nidoutdistance_ = new ::HmiInterface::ADSNIDOutDis(*from.ads_nidoutdistance_);
  } else {
    ads_nidoutdistance_ = nullptr;
  }
  ::memcpy(&ads_latprohibitcountdown_, &from.ads_latprohibitcountdown_,
    static_cast<size_t>(reinterpret_cast<char*>(&ads_sbuncountdown_) -
    reinterpret_cast<char*>(&ads_latprohibitcountdown_)) + sizeof(ads_sbuncountdown_));
  // @@protoc_insertion_point(copy_constructor:HmiInterface.SmartDrivingTips)
}

inline void SmartDrivingTips::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acc_fun_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ads_sbuncountdown_) -
    reinterpret_cast<char*>(&acc_fun_)) + sizeof(ads_sbuncountdown_));
}

SmartDrivingTips::~SmartDrivingTips() {
  // @@protoc_insertion_point(destructor:HmiInterface.SmartDrivingTips)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SmartDrivingTips::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete acc_fun_;
  if (this != internal_default_instance()) delete udlc_fun_;
  if (this != internal_default_instance()) delete nid_fun_;
  if (this != internal_default_instance()) delete recommend_fun_;
  if (this != internal_default_instance()) delete tjp_fun_;
  if (this != internal_default_instance()) delete adc_funtips_;
  if (this != internal_default_instance()) delete cna_fun_;
  if (this != internal_default_instance()) delete speedlimit_fun_;
  if (this != internal_default_instance()) delete ads_adascruiserec_;
  if (this != internal_default_instance()) delete ads_nidoutdistance_;
}

void SmartDrivingTips::ArenaDtor(void* object) {
  SmartDrivingTips* _this = reinterpret_cast< SmartDrivingTips* >(object);
  (void)_this;
}
void SmartDrivingTips::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SmartDrivingTips::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SmartDrivingTips::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.SmartDrivingTips)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && acc_fun_ != nullptr) {
    delete acc_fun_;
  }
  acc_fun_ = nullptr;
  if (GetArenaForAllocation() == nullptr && udlc_fun_ != nullptr) {
    delete udlc_fun_;
  }
  udlc_fun_ = nullptr;
  if (GetArenaForAllocation() == nullptr && nid_fun_ != nullptr) {
    delete nid_fun_;
  }
  nid_fun_ = nullptr;
  if (GetArenaForAllocation() == nullptr && recommend_fun_ != nullptr) {
    delete recommend_fun_;
  }
  recommend_fun_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tjp_fun_ != nullptr) {
    delete tjp_fun_;
  }
  tjp_fun_ = nullptr;
  if (GetArenaForAllocation() == nullptr && adc_funtips_ != nullptr) {
    delete adc_funtips_;
  }
  adc_funtips_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cna_fun_ != nullptr) {
    delete cna_fun_;
  }
  cna_fun_ = nullptr;
  if (GetArenaForAllocation() == nullptr && speedlimit_fun_ != nullptr) {
    delete speedlimit_fun_;
  }
  speedlimit_fun_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ads_adascruiserec_ != nullptr) {
    delete ads_adascruiserec_;
  }
  ads_adascruiserec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ads_nidoutdistance_ != nullptr) {
    delete ads_nidoutdistance_;
  }
  ads_nidoutdistance_ = nullptr;
  ::memset(&ads_latprohibitcountdown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ads_sbuncountdown_) -
      reinterpret_cast<char*>(&ads_latprohibitcountdown_)) + sizeof(ads_sbuncountdown_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmartDrivingTips::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .HmiInterface.ACCShowDemand acc_fun = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc_fun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.UDLCShowDemand udlc_fun = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_udlc_fun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.NIDShowDemand nid_fun = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nid_fun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.NewRecommend recommend_fun = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_recommend_fun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.TJPNotice tjp_fun = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tjp_fun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.ADCNotice adc_funtips = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_adc_funtips(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.CNANotice cna_fun = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cna_fun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.SpeedLimitShowDemand speedlimit_fun = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_speedlimit_fun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float ads_latprohibitcountdown = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          ads_latprohibitcountdown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float ads_sbuncountdown = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          ads_sbuncountdown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.ADAScruiseRecflag ads_adascruiserec = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ads_adascruiserec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HmiInterface.ADSNIDOutDis ads_nidoutdistance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ads_nidoutdistance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmartDrivingTips::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.SmartDrivingTips)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .HmiInterface.ACCShowDemand acc_fun = 1;
  if (this->_internal_has_acc_fun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::acc_fun(this), target, stream);
  }

  // .HmiInterface.UDLCShowDemand udlc_fun = 2;
  if (this->_internal_has_udlc_fun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::udlc_fun(this), target, stream);
  }

  // .HmiInterface.NIDShowDemand nid_fun = 3;
  if (this->_internal_has_nid_fun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nid_fun(this), target, stream);
  }

  // .HmiInterface.NewRecommend recommend_fun = 4;
  if (this->_internal_has_recommend_fun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::recommend_fun(this), target, stream);
  }

  // .HmiInterface.TJPNotice tjp_fun = 5;
  if (this->_internal_has_tjp_fun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::tjp_fun(this), target, stream);
  }

  // .HmiInterface.ADCNotice adc_funtips = 6;
  if (this->_internal_has_adc_funtips()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::adc_funtips(this), target, stream);
  }

  // .HmiInterface.CNANotice cna_fun = 7;
  if (this->_internal_has_cna_fun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cna_fun(this), target, stream);
  }

  // .HmiInterface.SpeedLimitShowDemand speedlimit_fun = 8;
  if (this->_internal_has_speedlimit_fun()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::speedlimit_fun(this), target, stream);
  }

  // float ads_latprohibitcountdown = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_latprohibitcountdown = this->_internal_ads_latprohibitcountdown();
  uint32_t raw_ads_latprohibitcountdown;
  memcpy(&raw_ads_latprohibitcountdown, &tmp_ads_latprohibitcountdown, sizeof(tmp_ads_latprohibitcountdown));
  if (raw_ads_latprohibitcountdown != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_ads_latprohibitcountdown(), target);
  }

  // float ads_sbuncountdown = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_sbuncountdown = this->_internal_ads_sbuncountdown();
  uint32_t raw_ads_sbuncountdown;
  memcpy(&raw_ads_sbuncountdown, &tmp_ads_sbuncountdown, sizeof(tmp_ads_sbuncountdown));
  if (raw_ads_sbuncountdown != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_ads_sbuncountdown(), target);
  }

  // .HmiInterface.ADAScruiseRecflag ads_adascruiserec = 11;
  if (this->_internal_has_ads_adascruiserec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ads_adascruiserec(this), target, stream);
  }

  // .HmiInterface.ADSNIDOutDis ads_nidoutdistance = 12;
  if (this->_internal_has_ads_nidoutdistance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::ads_nidoutdistance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.SmartDrivingTips)
  return target;
}

size_t SmartDrivingTips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.SmartDrivingTips)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .HmiInterface.ACCShowDemand acc_fun = 1;
  if (this->_internal_has_acc_fun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_fun_);
  }

  // .HmiInterface.UDLCShowDemand udlc_fun = 2;
  if (this->_internal_has_udlc_fun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *udlc_fun_);
  }

  // .HmiInterface.NIDShowDemand nid_fun = 3;
  if (this->_internal_has_nid_fun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nid_fun_);
  }

  // .HmiInterface.NewRecommend recommend_fun = 4;
  if (this->_internal_has_recommend_fun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recommend_fun_);
  }

  // .HmiInterface.TJPNotice tjp_fun = 5;
  if (this->_internal_has_tjp_fun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tjp_fun_);
  }

  // .HmiInterface.ADCNotice adc_funtips = 6;
  if (this->_internal_has_adc_funtips()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adc_funtips_);
  }

  // .HmiInterface.CNANotice cna_fun = 7;
  if (this->_internal_has_cna_fun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cna_fun_);
  }

  // .HmiInterface.SpeedLimitShowDemand speedlimit_fun = 8;
  if (this->_internal_has_speedlimit_fun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speedlimit_fun_);
  }

  // .HmiInterface.ADAScruiseRecflag ads_adascruiserec = 11;
  if (this->_internal_has_ads_adascruiserec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ads_adascruiserec_);
  }

  // .HmiInterface.ADSNIDOutDis ads_nidoutdistance = 12;
  if (this->_internal_has_ads_nidoutdistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ads_nidoutdistance_);
  }

  // float ads_latprohibitcountdown = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_latprohibitcountdown = this->_internal_ads_latprohibitcountdown();
  uint32_t raw_ads_latprohibitcountdown;
  memcpy(&raw_ads_latprohibitcountdown, &tmp_ads_latprohibitcountdown, sizeof(tmp_ads_latprohibitcountdown));
  if (raw_ads_latprohibitcountdown != 0) {
    total_size += 1 + 4;
  }

  // float ads_sbuncountdown = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_sbuncountdown = this->_internal_ads_sbuncountdown();
  uint32_t raw_ads_sbuncountdown;
  memcpy(&raw_ads_sbuncountdown, &tmp_ads_sbuncountdown, sizeof(tmp_ads_sbuncountdown));
  if (raw_ads_sbuncountdown != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmartDrivingTips::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SmartDrivingTips::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmartDrivingTips::GetClassData() const { return &_class_data_; }

void SmartDrivingTips::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SmartDrivingTips *>(to)->MergeFrom(
      static_cast<const SmartDrivingTips &>(from));
}


void SmartDrivingTips::MergeFrom(const SmartDrivingTips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.SmartDrivingTips)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_acc_fun()) {
    _internal_mutable_acc_fun()->::HmiInterface::ACCShowDemand::MergeFrom(from._internal_acc_fun());
  }
  if (from._internal_has_udlc_fun()) {
    _internal_mutable_udlc_fun()->::HmiInterface::UDLCShowDemand::MergeFrom(from._internal_udlc_fun());
  }
  if (from._internal_has_nid_fun()) {
    _internal_mutable_nid_fun()->::HmiInterface::NIDShowDemand::MergeFrom(from._internal_nid_fun());
  }
  if (from._internal_has_recommend_fun()) {
    _internal_mutable_recommend_fun()->::HmiInterface::NewRecommend::MergeFrom(from._internal_recommend_fun());
  }
  if (from._internal_has_tjp_fun()) {
    _internal_mutable_tjp_fun()->::HmiInterface::TJPNotice::MergeFrom(from._internal_tjp_fun());
  }
  if (from._internal_has_adc_funtips()) {
    _internal_mutable_adc_funtips()->::HmiInterface::ADCNotice::MergeFrom(from._internal_adc_funtips());
  }
  if (from._internal_has_cna_fun()) {
    _internal_mutable_cna_fun()->::HmiInterface::CNANotice::MergeFrom(from._internal_cna_fun());
  }
  if (from._internal_has_speedlimit_fun()) {
    _internal_mutable_speedlimit_fun()->::HmiInterface::SpeedLimitShowDemand::MergeFrom(from._internal_speedlimit_fun());
  }
  if (from._internal_has_ads_adascruiserec()) {
    _internal_mutable_ads_adascruiserec()->::HmiInterface::ADAScruiseRecflag::MergeFrom(from._internal_ads_adascruiserec());
  }
  if (from._internal_has_ads_nidoutdistance()) {
    _internal_mutable_ads_nidoutdistance()->::HmiInterface::ADSNIDOutDis::MergeFrom(from._internal_ads_nidoutdistance());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_latprohibitcountdown = from._internal_ads_latprohibitcountdown();
  uint32_t raw_ads_latprohibitcountdown;
  memcpy(&raw_ads_latprohibitcountdown, &tmp_ads_latprohibitcountdown, sizeof(tmp_ads_latprohibitcountdown));
  if (raw_ads_latprohibitcountdown != 0) {
    _internal_set_ads_latprohibitcountdown(from._internal_ads_latprohibitcountdown());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ads_sbuncountdown = from._internal_ads_sbuncountdown();
  uint32_t raw_ads_sbuncountdown;
  memcpy(&raw_ads_sbuncountdown, &tmp_ads_sbuncountdown, sizeof(tmp_ads_sbuncountdown));
  if (raw_ads_sbuncountdown != 0) {
    _internal_set_ads_sbuncountdown(from._internal_ads_sbuncountdown());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmartDrivingTips::CopyFrom(const SmartDrivingTips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.SmartDrivingTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartDrivingTips::IsInitialized() const {
  return true;
}

void SmartDrivingTips::InternalSwap(SmartDrivingTips* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmartDrivingTips, ads_sbuncountdown_)
      + sizeof(SmartDrivingTips::ads_sbuncountdown_)
      - PROTOBUF_FIELD_OFFSET(SmartDrivingTips, acc_fun_)>(
          reinterpret_cast<char*>(&acc_fun_),
          reinterpret_cast<char*>(&other->acc_fun_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmartDrivingTips::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter, &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[10]);
}

// ===================================================================

class BasicSmartDrivingTips::_Internal {
 public:
  static const ::HmiInterface::SmartDrivingTips& smartdrivetips(const BasicSmartDrivingTips* msg);
};

const ::HmiInterface::SmartDrivingTips&
BasicSmartDrivingTips::_Internal::smartdrivetips(const BasicSmartDrivingTips* msg) {
  return *msg->smartdrivetips_;
}
BasicSmartDrivingTips::BasicSmartDrivingTips(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:HmiInterface.BasicSmartDrivingTips)
}
BasicSmartDrivingTips::BasicSmartDrivingTips(const BasicSmartDrivingTips& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_smartdrivetips()) {
    smartdrivetips_ = new ::HmiInterface::SmartDrivingTips(*from.smartdrivetips_);
  } else {
    smartdrivetips_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:HmiInterface.BasicSmartDrivingTips)
}

inline void BasicSmartDrivingTips::SharedCtor() {
smartdrivetips_ = nullptr;
}

BasicSmartDrivingTips::~BasicSmartDrivingTips() {
  // @@protoc_insertion_point(destructor:HmiInterface.BasicSmartDrivingTips)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BasicSmartDrivingTips::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete smartdrivetips_;
}

void BasicSmartDrivingTips::ArenaDtor(void* object) {
  BasicSmartDrivingTips* _this = reinterpret_cast< BasicSmartDrivingTips* >(object);
  (void)_this;
}
void BasicSmartDrivingTips::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BasicSmartDrivingTips::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BasicSmartDrivingTips::Clear() {
// @@protoc_insertion_point(message_clear_start:HmiInterface.BasicSmartDrivingTips)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && smartdrivetips_ != nullptr) {
    delete smartdrivetips_;
  }
  smartdrivetips_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasicSmartDrivingTips::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .HmiInterface.SmartDrivingTips smartdrivetips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_smartdrivetips(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BasicSmartDrivingTips::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HmiInterface.BasicSmartDrivingTips)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .HmiInterface.SmartDrivingTips smartdrivetips = 1;
  if (this->_internal_has_smartdrivetips()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::smartdrivetips(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HmiInterface.BasicSmartDrivingTips)
  return target;
}

size_t BasicSmartDrivingTips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HmiInterface.BasicSmartDrivingTips)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .HmiInterface.SmartDrivingTips smartdrivetips = 1;
  if (this->_internal_has_smartdrivetips()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *smartdrivetips_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasicSmartDrivingTips::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BasicSmartDrivingTips::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasicSmartDrivingTips::GetClassData() const { return &_class_data_; }

void BasicSmartDrivingTips::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BasicSmartDrivingTips *>(to)->MergeFrom(
      static_cast<const BasicSmartDrivingTips &>(from));
}


void BasicSmartDrivingTips::MergeFrom(const BasicSmartDrivingTips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HmiInterface.BasicSmartDrivingTips)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_smartdrivetips()) {
    _internal_mutable_smartdrivetips()->::HmiInterface::SmartDrivingTips::MergeFrom(from._internal_smartdrivetips());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasicSmartDrivingTips::CopyFrom(const BasicSmartDrivingTips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HmiInterface.BasicSmartDrivingTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicSmartDrivingTips::IsInitialized() const {
  return true;
}

void BasicSmartDrivingTips::InternalSwap(BasicSmartDrivingTips* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(smartdrivetips_, other->smartdrivetips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicSmartDrivingTips::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_getter, &descriptor_table_hmi_5fbasic_5fsmartdrivingtips_2eproto_once,
      file_level_metadata_hmi_5fbasic_5fsmartdrivingtips_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace HmiInterface
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HmiInterface::SpeedLimitShowDemand* Arena::CreateMaybeMessage< ::HmiInterface::SpeedLimitShowDemand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::SpeedLimitShowDemand >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::CNANotice* Arena::CreateMaybeMessage< ::HmiInterface::CNANotice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::CNANotice >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::ADCNotice* Arena::CreateMaybeMessage< ::HmiInterface::ADCNotice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::ADCNotice >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::TJPNotice* Arena::CreateMaybeMessage< ::HmiInterface::TJPNotice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::TJPNotice >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::NewRecommend* Arena::CreateMaybeMessage< ::HmiInterface::NewRecommend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::NewRecommend >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::NIDShowDemand* Arena::CreateMaybeMessage< ::HmiInterface::NIDShowDemand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::NIDShowDemand >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::UDLCShowDemand* Arena::CreateMaybeMessage< ::HmiInterface::UDLCShowDemand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::UDLCShowDemand >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::ACCShowDemand* Arena::CreateMaybeMessage< ::HmiInterface::ACCShowDemand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::ACCShowDemand >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::ADAScruiseRecflag* Arena::CreateMaybeMessage< ::HmiInterface::ADAScruiseRecflag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::ADAScruiseRecflag >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::ADSNIDOutDis* Arena::CreateMaybeMessage< ::HmiInterface::ADSNIDOutDis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::ADSNIDOutDis >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::SmartDrivingTips* Arena::CreateMaybeMessage< ::HmiInterface::SmartDrivingTips >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::SmartDrivingTips >(arena);
}
template<> PROTOBUF_NOINLINE ::HmiInterface::BasicSmartDrivingTips* Arena::CreateMaybeMessage< ::HmiInterface::BasicSmartDrivingTips >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HmiInterface::BasicSmartDrivingTips >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
