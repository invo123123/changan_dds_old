/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.0.2
  ServiceLatestModifyTime: 2023-06-07T19:58:47
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#include "changan/Basc_RemoteMove_Skeleton.hpp"
#include "changan/dds_server.hpp"
#include <iostream>
#include <thread>
#include <string.h>
#include "changan/string_util.hpp"
#include "changan/business_util.h"

namespace com {
namespace changan {
namespace carCabin {
namespace remoteMove {
namespace skeleton {
	using namespace com::changan::rpc_service;
	using namespace com::changan::soa_log::skeleton;
	void carCabin_Basc_RemoteMove_RR_ScreenCoordinate(carCabin_Basc_RemoteMove_Request * request){
		Basc_RemoteMove_Skeleton * skeleton = (Basc_RemoteMove_Skeleton*)DDSServer::get_service("Basc_RemoteMove_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_ScreenCoordinate");
		uint8_t ret = skeleton->RR_ScreenCoordinate(request->data._u.RR_ScreenCoordinate.Xapp,request->data._u.RR_ScreenCoordinate.Yapp);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_ScreenCoordinate");
		carCabin_Basc_RemoteMove_Reply* reply_msg = carCabin_Basc_RemoteMove_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_RemoteMove_RR_ScreenCoordinate_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_ScreenCoordinate.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_RemoteMove_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_RemoteMove_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_RemoteMove_RR_FunSwitch(carCabin_Basc_RemoteMove_Request * request){
		Basc_RemoteMove_Skeleton * skeleton = (Basc_RemoteMove_Skeleton*)DDSServer::get_service("Basc_RemoteMove_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_FunSwitch");
		uint8_t ret = skeleton->RR_FunSwitch(request->data._u.RR_FunSwitch.State,request->data._u.RR_FunSwitch.RoomId);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_FunSwitch");
		carCabin_Basc_RemoteMove_Reply* reply_msg = carCabin_Basc_RemoteMove_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carCabin_Basc_RemoteMove_RR_FunSwitch_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_FunSwitch.return_ = ret;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_RemoteMove_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_RemoteMove_Request_free(request, DDS_FREE_ALL);
		}
	void carCabin_Basc_RemoteMove_Deal_Invalid_Method(carCabin_Basc_RemoteMove_Request * request){
		if (BussinessUtil::isEventType(request->data._d)) {
			return;
		}
		Basc_RemoteMove_Skeleton * skeleton = (Basc_RemoteMove_Skeleton*)DDSServer::get_service("Basc_RemoteMove_skeleton");
		if(NULL==skeleton){
			return;
		}
		carCabin_Basc_RemoteMove_Reply* reply_msg = carCabin_Basc_RemoteMove_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_METHOD_NOT_FOUND;
		skeleton->send_reply(reply_msg);
		carCabin_Basc_RemoteMove_Reply_free(reply_msg, DDS_FREE_ALL);
		carCabin_Basc_RemoteMove_Request_free(request, DDS_FREE_ALL);
	}
    void on_carCabin_Basc_RemoteMove_request_data_available(int32_t reader, void* arg){
    	ASF_LOG_DEBUG_ARGS("on_carCabin_Basc_RemoteMove_request_data_available");
		dds_return_t rc;
		//printf("RPC server on data available!\n");
		void* samples[1];
		samples[0] = carCabin_Basc_RemoteMove_Request__alloc();
		dds_sample_info_t infos[1];
		rc = dds_take_next(reader, samples, infos);
		if (rc < 0) {
			ASF_LOG_ERROR_ARGS("on_carCabin_Basc_RemoteMove_request_data_available, dds_take_next faild, rc=[%d]",rc);
			DDS_FATAL("dds_take_next failed!\n");
		}
		if (infos[0].valid_data)
		{
			carCabin_Basc_RemoteMove_Request* request = (carCabin_Basc_RemoteMove_Request*)samples[0];
			int32_t funID = request->data._d;
			ASF_LOG_DEBUG_ARGS("on_carCabin_Basc_RemoteMove_request_data_available, hashId=[%d], reqId=[%d]", funID,  request->header.requestId.sequence_number.low);			switch (funID) {
				case carCabin_Basc_RemoteMove_RR_ScreenCoordinate_Hash:
				{
					DDSServer::execute(carCabin_Basc_RemoteMove_RR_ScreenCoordinate, request);
					break;
				}
				case carCabin_Basc_RemoteMove_RR_FunSwitch_Hash:
				{
					DDSServer::execute(carCabin_Basc_RemoteMove_RR_FunSwitch, request);
					break;
				}
				default:
				{
					DDSServer::execute(carCabin_Basc_RemoteMove_Deal_Invalid_Method,request);
					break;
				}
			}
			return;
		}
		carCabin_Basc_RemoteMove_Request_free(samples[0],DDS_FREE_ALL);
	}
	Basc_RemoteMove_Skeleton::Basc_RemoteMove_Skeleton(Basc_RemoteMove_service_interface* service,std::string config):_config(config),_service(service){}

	void on_Basc_RemoteMove_request_subscription_matched_cb(dds_entity_t reader, const dds_subscription_matched_status_t  status, void* arg){
		ASF_LOG_DEBUG_ARGS("on_Basc_RemoteMove_request_subscription_matched_cb, reader=[%d], current_count=[%d]", reader, status.current_count);
		Basc_RemoteMove_Skeleton * skeleton = (Basc_RemoteMove_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_RemoteMove_skeleton");
		if(NULL==skeleton){
			return;
		}
		auto handler=skeleton->get_consumer_matched_handler();
		if(NULL!=handler){
			ConsumerMatchedStatus data=DDSUtil::get_consumer_matched_status(reader,status);
			handler(data);
		}
	}

	void Basc_RemoteMove_Skeleton::wait_client_online()
	{
		this->wait_for_pub_online(dds_rpc_reply_handle.writer);
	}

    bool Basc_RemoteMove_Skeleton::init() {
        std::lock_guard<std::mutex> guard(init_mutex);
		if (this->init_flag) {
			return true;
		}
		logconfig_Skeleton::get_instance().init(this->_config);
		DDSUtil::event_pub_init(DDS_DOMAIN_ID,
			this->service_name + "_reply",
			&carCabin_Basc_RemoteMove_Reply_desc,
			&dds_rpc_reply_handle,
			NULL,{PROXY_TOKEN, PROXY_TOKEN, ""},this->_config
		);
		DDSUtil::event_sub_init(DDS_DOMAIN_ID,
			this->service_name + "_request",

			&carCabin_Basc_RemoteMove_Request_desc,
			&on_carCabin_Basc_RemoteMove_request_data_available,
			NULL,
			&dds_rpc_request_handle,
			&on_Basc_RemoteMove_request_subscription_matched_cb,{PROXY_TOKEN, PROXY_TOKEN, ""},{},this->_config
		);
		this->init_flag = true;
		return true;

	}

	bool Basc_RemoteMove_Skeleton::destroy() {
		ASF_LOG_DEBUG_ARGS("Basc_RemoteMove_Skeleton::destroy");
		std::lock_guard<std::mutex> guard(init_mutex);
		if (!this->init_flag) {
			return true;
		}
		if (!DDSUtil::dds_client_destroy(&dds_rpc_request_handle)) {
			return false;
		}
		if (!DDSUtil::dds_client_destroy(&dds_rpc_reply_handle)) {
			return false;
		}
		this->init_flag = false;
		return true;
	}

	dds_return_t Basc_RemoteMove_Skeleton::send_reply(carCabin_Basc_RemoteMove_Reply* reply) {
		dds_return_t rc = DDSUtil::send(dds_rpc_reply_handle.writer, reply);
		ASF_LOG_DEBUG_ARGS("Basc_RemoteMove_Skeleton::send_reply hashId=[%d], reqId=[%d], rc=[%d]", reply->data._d, reply->header.relatedRequestId.sequence_number.low, rc);
		return rc;
	}
}
}
}
}
}

