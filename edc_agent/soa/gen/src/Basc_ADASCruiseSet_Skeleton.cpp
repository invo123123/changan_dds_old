/****************************************************************
  Generated by ChangAn Code Generator,Do Not Modify
  AppVersion： mADC_Application_Service-V1.5
  CmVersion： v2.0.3
  ServiceVersion: V1.2.0
  ServiceLatestModifyTime: 2023-11-21T11:51:51
  Generate Time: 2023-12-11 18:07:59
*****************************************************************/
#include "changan/Basc_ADASCruiseSet_Skeleton.hpp"
#include "changan/dds_server.hpp"
#include <iostream>
#include <thread>
#include <string.h>
#include "changan/string_util.hpp"
#include "changan/business_util.h"

namespace com {
namespace changan {
namespace carDrive {
namespace C2Controller {
namespace skeleton {
	using namespace com::changan::rpc_service;
	using namespace com::changan::soa_log::skeleton;
	void carDrive_Basc_ADASCruiseSet_Get_ADASCruiseSet(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->Get_ADASCruiseSet");
		ADASCruiseSet ret = skeleton->Get_ADASCruiseSet();
		ASF_LOG_DEBUG_ARGS("after skeleton->Get_ADASCruiseSet");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_Get_ADASCruiseSet_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.Get_ADASCruiseSet.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_CuriseMode(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_CuriseMode");
		ResponseInfo ret = skeleton->RR_HU_CuriseMode(request->data._u.RR_HU_CuriseMode.HUset_CuriseMode,request->data._u.RR_HU_CuriseMode.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_CuriseMode");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_CuriseMode_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_CuriseMode.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_IDAEnable(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_IDAEnable");
		ResponseInfo ret = skeleton->RR_HU_IDAEnable(request->data._u.RR_HU_IDAEnable.HUset_IDAEnable,request->data._u.RR_HU_IDAEnable.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_IDAEnable");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_IDAEnable_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_IDAEnable.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_LaneChangeFrequency(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_LaneChangeFrequency");
		ResponseInfo ret = skeleton->RR_HU_LaneChangeFrequency(request->data._u.RR_HU_LaneChangeFrequency.HUset_LaneChangeFrequency,request->data._u.RR_HU_LaneChangeFrequency.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_LaneChangeFrequency");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_LaneChangeFrequency_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_LaneChangeFrequency.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_UDLCEnable(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_UDLCEnable");
		ResponseInfo ret = skeleton->RR_HU_UDLCEnable(request->data._u.RR_HU_UDLCEnable.HUset_UDLCEnable,request->data._u.RR_HU_UDLCEnable.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_UDLCEnable");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_UDLCEnable_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_UDLCEnable.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_NIDAudioWarStyle(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_NIDAudioWarStyle");
		ResponseInfo ret = skeleton->RR_HU_NIDAudioWarStyle(request->data._u.RR_HU_NIDAudioWarStyle.HUset_NIDAudioWarStyle,request->data._u.RR_HU_NIDAudioWarStyle.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_NIDAudioWarStyle");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_NIDAudioWarStyle_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_NIDAudioWarStyle.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_CSLAEnable(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_CSLAEnable");
		ResponseInfo ret = skeleton->RR_HU_CSLAEnable(request->data._u.RR_HU_CSLAEnable.HUset_CSLAEnable,request->data._u.RR_HU_CSLAEnable.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_CSLAEnable");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_CSLAEnable_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_CSLAEnable.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_CSLmode(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_CSLmode");
		ResponseInfo ret = skeleton->RR_HU_CSLmode(request->data._u.RR_HU_CSLmode.HUset_CSLmode,request->data._u.RR_HU_CSLmode.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_CSLmode");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_CSLmode_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_CSLmode.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_OverspeedSoundWarEnable(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_OverspeedSoundWarEnable");
		ResponseInfo ret = skeleton->RR_HU_OverspeedSoundWarEnable(request->data._u.RR_HU_OverspeedSoundWarEnable.HUset_OverspeedSoundWarEnable,request->data._u.RR_HU_OverspeedSoundWarEnable.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_OverspeedSoundWarEnable");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_OverspeedSoundWarEnable_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_OverspeedSoundWarEnable.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_CSLWarnOffsetTp(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_CSLWarnOffsetTp");
		ResponseInfo ret = skeleton->RR_HU_CSLWarnOffsetTp(request->data._u.RR_HU_CSLWarnOffsetTp.HUset_CSLWarnOffsetTp,request->data._u.RR_HU_CSLWarnOffsetTp.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_CSLWarnOffsetTp");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_CSLWarnOffsetTp_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_CSLWarnOffsetTp.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_AbsOverSpdWarnOffset(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_AbsOverSpdWarnOffset");
		ResponseInfo ret = skeleton->RR_HU_AbsOverSpdWarnOffset(request->data._u.RR_HU_AbsOverSpdWarnOffset.HUset_AbsOverSpdWarnOffset,request->data._u.RR_HU_AbsOverSpdWarnOffset.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_AbsOverSpdWarnOffset");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_AbsOverSpdWarnOffset_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_AbsOverSpdWarnOffset.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_RelOverSpdWarnOffset(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_RelOverSpdWarnOffset");
		ResponseInfo ret = skeleton->RR_HU_RelOverSpdWarnOffset(request->data._u.RR_HU_RelOverSpdWarnOffset.HUset_RelOverSpdWarnOffset,request->data._u.RR_HU_RelOverSpdWarnOffset.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_RelOverSpdWarnOffset");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_RelOverSpdWarnOffset_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_RelOverSpdWarnOffset.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_AutoDriveStyle(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_AutoDriveStyle");
		ResponseInfo ret = skeleton->RR_HU_AutoDriveStyle(request->data._u.RR_HU_AutoDriveStyle.HUset_AutoDriveStyle,request->data._u.RR_HU_AutoDriveStyle.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_AutoDriveStyle");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_AutoDriveStyle_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_AutoDriveStyle.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_ADACCStyle(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_ADACCStyle");
		ResponseInfo ret = skeleton->RR_HU_ADACCStyle(request->data._u.RR_HU_ADACCStyle.HUset_ADACCStyle,request->data._u.RR_HU_ADACCStyle.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_ADACCStyle");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_ADACCStyle_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_ADACCStyle.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_ADStartStyle(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_ADStartStyle");
		ResponseInfo ret = skeleton->RR_HU_ADStartStyle(request->data._u.RR_HU_ADStartStyle.HUset_ADStartStyle,request->data._u.RR_HU_ADStartStyle.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_ADStartStyle");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_ADStartStyle_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_ADStartStyle.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_ADCurveStyle(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_ADCurveStyle");
		ResponseInfo ret = skeleton->RR_HU_ADCurveStyle(request->data._u.RR_HU_ADCurveStyle.HUset_ADCurveStyle,request->data._u.RR_HU_ADCurveStyle.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_ADCurveStyle");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_ADCurveStyle_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_ADCurveStyle.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_ADLanechangeStyle(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_ADLanechangeStyle");
		ResponseInfo ret = skeleton->RR_HU_ADLanechangeStyle(request->data._u.RR_HU_ADLanechangeStyle.HUset_ADLanechangeStyle,request->data._u.RR_HU_ADLanechangeStyle.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_ADLanechangeStyle");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_ADLanechangeStyle_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_ADLanechangeStyle.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_VehicleStartRemindEnable(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_VehicleStartRemindEnable");
		ResponseInfo ret = skeleton->RR_HU_VehicleStartRemindEnable(request->data._u.RR_HU_VehicleStartRemindEnable.HUset_VehicleStartRemindEnable,request->data._u.RR_HU_VehicleStartRemindEnable.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_VehicleStartRemindEnable");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_VehicleStartRemindEnable_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_VehicleStartRemindEnable.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_RCWEnable(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_RCWEnable");
		ResponseInfo ret = skeleton->RR_HU_RCWEnable(request->data._u.RR_HU_RCWEnable.HUset_RCWEnable,request->data._u.RR_HU_RCWEnable.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_RCWEnable");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_RCWEnable_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_RCWEnable.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_SEAMode(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_SEAMode");
		ResponseInfo ret = skeleton->RR_HU_SEAMode(request->data._u.RR_HU_SEAMode.HUset_SEAMode,request->data._u.RR_HU_SEAMode.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_SEAMode");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_SEAMode_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_SEAMode.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_BSDLCASetting(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_BSDLCASetting");
		ResponseInfo ret = skeleton->RR_HU_BSDLCASetting(request->data._u.RR_HU_BSDLCASetting.HUset_BSDLCASetting,request->data._u.RR_HU_BSDLCASetting.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_BSDLCASetting");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_BSDLCASetting_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_BSDLCASetting.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_BSDLCARemindmode(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_BSDLCARemindmode");
		ResponseInfo ret = skeleton->RR_HU_BSDLCARemindmode(request->data._u.RR_HU_BSDLCARemindmode.HUset_BSDLCARemindmode,request->data._u.RR_HU_BSDLCARemindmode.Requestinfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_BSDLCARemindmode");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_BSDLCARemindmode_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_BSDLCARemindmode.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_IACCFamlrRdModSwt(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_IACCFamlrRdModSwt");
		ResponseInfo ret = skeleton->RR_HU_IACCFamlrRdModSwt(request->data._u.RR_HU_IACCFamlrRdModSwt.HUset_IACCFamlrRdModSwt,request->data._u.RR_HU_IACCFamlrRdModSwt.RequestInfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_IACCFamlrRdModSwt");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_IACCFamlrRdModSwt_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_IACCFamlrRdModSwt.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_Get_C2_IACCFamlrRdModSwtFb(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->Get_C2_IACCFamlrRdModSwtFb");
		C2_IACCFamlrRdModSwtFbSet ret = skeleton->Get_C2_IACCFamlrRdModSwtFb();
		ASF_LOG_DEBUG_ARGS("after skeleton->Get_C2_IACCFamlrRdModSwtFb");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_Get_C2_IACCFamlrRdModSwtFb_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.Get_C2_IACCFamlrRdModSwtFb.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_Get_AD_NIDSelfLrngFb(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->Get_AD_NIDSelfLrngFb");
		AD_NIDSelfLrngFbset ret = skeleton->Get_AD_NIDSelfLrngFb();
		ASF_LOG_DEBUG_ARGS("after skeleton->Get_AD_NIDSelfLrngFb");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_Get_AD_NIDSelfLrngFb_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.Get_AD_NIDSelfLrngFb.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_EDC_NIDSelfLrngReq(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_EDC_NIDSelfLrngReq");
		AD_NIDSelfLrngFbset ret = skeleton->RR_EDC_NIDSelfLrngReq(request->data._u.RR_EDC_NIDSelfLrngReq.EDCset_NIDSelfLrngReq,request->data._u.RR_EDC_NIDSelfLrngReq.RequestInfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_EDC_NIDSelfLrngReq");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_EDC_NIDSelfLrngReq_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_EDC_NIDSelfLrngReq.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_Get_AD_BSDLCAOnOffSet(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->Get_AD_BSDLCAOnOffSet");
		AD_BSDLCAOnOffSet ret = skeleton->Get_AD_BSDLCAOnOffSet();
		ASF_LOG_DEBUG_ARGS("after skeleton->Get_AD_BSDLCAOnOffSet");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_Get_AD_BSDLCAOnOffSet_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.Get_AD_BSDLCAOnOffSet.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_BSDLCAOnOff(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_BSDLCAOnOff");
		AD_BSDLCAOnOffSet ret = skeleton->RR_HU_BSDLCAOnOff(request->data._u.RR_HU_BSDLCAOnOff.HUset_BSDLCAOnOff,request->data._u.RR_HU_BSDLCAOnOff.RequestInfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_BSDLCAOnOff");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_BSDLCAOnOff_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_BSDLCAOnOff.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_Get_AD_SEAOnOffSts(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->Get_AD_SEAOnOffSts");
		AD_SEAOnOffStsSet ret = skeleton->Get_AD_SEAOnOffSts();
		ASF_LOG_DEBUG_ARGS("after skeleton->Get_AD_SEAOnOffSts");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_Get_AD_SEAOnOffSts_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.Get_AD_SEAOnOffSts.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_RR_HU_SEAOnOff(carDrive_Basc_ADASCruiseSet_Request * request){
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		ASF_LOG_DEBUG_ARGS("pre skeleton->RR_HU_SEAOnOff");
		AD_SEAOnOffStsSet ret = skeleton->RR_HU_SEAOnOff(request->data._u.RR_HU_SEAOnOff.HUset_SEAOnOff,request->data._u.RR_HU_SEAOnOff.RequestInfo);
		ASF_LOG_DEBUG_ARGS("after skeleton->RR_HU_SEAOnOff");
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->data._d = carDrive_Basc_ADASCruiseSet_RR_HU_SEAOnOff_Hash;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_EX_OK;
		reply_msg->data._u.RR_HU_SEAOnOff.return_ = ret;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
		}
	void carDrive_Basc_ADASCruiseSet_Deal_Invalid_Method(carDrive_Basc_ADASCruiseSet_Request * request){
		if (BussinessUtil::isEventType(request->data._d)) {
			return;
		}
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		carDrive_Basc_ADASCruiseSet_Reply* reply_msg = carDrive_Basc_ADASCruiseSet_Reply__alloc();
		reply_msg->header.relatedRequestId = request->header.requestId;
		reply_msg->header.remoteEx = DDS_RPC_REMOTE_METHOD_NOT_FOUND;
		skeleton->send_reply(reply_msg);
		carDrive_Basc_ADASCruiseSet_Reply_free(reply_msg, DDS_FREE_ALL);
		carDrive_Basc_ADASCruiseSet_Request_free(request, DDS_FREE_ALL);
	}
    void on_carDrive_Basc_ADASCruiseSet_request_data_available(int32_t reader, void* arg){
    	ASF_LOG_DEBUG_ARGS("on_carDrive_Basc_ADASCruiseSet_request_data_available");
		dds_return_t rc;
		//printf("RPC server on data available!\n");
		void* samples[1];
		samples[0] = carDrive_Basc_ADASCruiseSet_Request__alloc();
		dds_sample_info_t infos[1];
		rc = dds_take_next(reader, samples, infos);
		if (rc < 0) {
			ASF_LOG_ERROR_ARGS("on_carDrive_Basc_ADASCruiseSet_request_data_available, dds_take_next faild, rc=[%d]",rc);
			DDS_FATAL("dds_take_next failed!\n");
		}
		if (infos[0].valid_data)
		{
			carDrive_Basc_ADASCruiseSet_Request* request = (carDrive_Basc_ADASCruiseSet_Request*)samples[0];
			int32_t funID = request->data._d;
			ASF_LOG_DEBUG_ARGS("on_carDrive_Basc_ADASCruiseSet_request_data_available, hashId=[%d], reqId=[%d]", funID,  request->header.requestId.sequence_number.low);			switch (funID) {
				case carDrive_Basc_ADASCruiseSet_Get_ADASCruiseSet_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_Get_ADASCruiseSet, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_CuriseMode_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_CuriseMode, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_IDAEnable_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_IDAEnable, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_LaneChangeFrequency_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_LaneChangeFrequency, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_UDLCEnable_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_UDLCEnable, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_NIDAudioWarStyle_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_NIDAudioWarStyle, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_CSLAEnable_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_CSLAEnable, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_CSLmode_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_CSLmode, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_OverspeedSoundWarEnable_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_OverspeedSoundWarEnable, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_CSLWarnOffsetTp_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_CSLWarnOffsetTp, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_AbsOverSpdWarnOffset_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_AbsOverSpdWarnOffset, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_RelOverSpdWarnOffset_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_RelOverSpdWarnOffset, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_AutoDriveStyle_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_AutoDriveStyle, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_ADACCStyle_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_ADACCStyle, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_ADStartStyle_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_ADStartStyle, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_ADCurveStyle_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_ADCurveStyle, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_ADLanechangeStyle_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_ADLanechangeStyle, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_VehicleStartRemindEnable_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_VehicleStartRemindEnable, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_RCWEnable_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_RCWEnable, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_SEAMode_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_SEAMode, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_BSDLCASetting_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_BSDLCASetting, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_BSDLCARemindmode_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_BSDLCARemindmode, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_IACCFamlrRdModSwt_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_IACCFamlrRdModSwt, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_Get_C2_IACCFamlrRdModSwtFb_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_Get_C2_IACCFamlrRdModSwtFb, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_Get_AD_NIDSelfLrngFb_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_Get_AD_NIDSelfLrngFb, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_EDC_NIDSelfLrngReq_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_EDC_NIDSelfLrngReq, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_Get_AD_BSDLCAOnOffSet_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_Get_AD_BSDLCAOnOffSet, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_BSDLCAOnOff_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_BSDLCAOnOff, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_Get_AD_SEAOnOffSts_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_Get_AD_SEAOnOffSts, request);
					break;
				}
				case carDrive_Basc_ADASCruiseSet_RR_HU_SEAOnOff_Hash:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_RR_HU_SEAOnOff, request);
					break;
				}
				default:
				{
					DDSServer::execute(carDrive_Basc_ADASCruiseSet_Deal_Invalid_Method,request);
					break;
				}
			}
			return;
		}
		carDrive_Basc_ADASCruiseSet_Request_free(samples[0],DDS_FREE_ALL);
	}
	Basc_ADASCruiseSet_Skeleton::Basc_ADASCruiseSet_Skeleton(Basc_ADASCruiseSet_service_interface* service,std::string config):_config(config),_service(service){}

	void on_Basc_ADASCruiseSet_request_subscription_matched_cb(dds_entity_t reader, const dds_subscription_matched_status_t  status, void* arg){
		ASF_LOG_DEBUG_ARGS("on_Basc_ADASCruiseSet_request_subscription_matched_cb, reader=[%d], current_count=[%d]", reader, status.current_count);
		Basc_ADASCruiseSet_Skeleton * skeleton = (Basc_ADASCruiseSet_Skeleton*)com::changan::rpc_service::DDSServer::get_service("Basc_ADASCruiseSet_skeleton");
		if(NULL==skeleton){
			return;
		}
		auto handler=skeleton->get_consumer_matched_handler();
		if(NULL!=handler){
			ConsumerMatchedStatus data=DDSUtil::get_consumer_matched_status(reader,status);
			handler(data);
		}
	}

	void Basc_ADASCruiseSet_Skeleton::wait_client_online()
	{
		this->wait_for_pub_online(dds_rpc_reply_handle.writer);
	}

    bool Basc_ADASCruiseSet_Skeleton::init() {
        std::lock_guard<std::mutex> guard(init_mutex);
		if (this->init_flag) {
			return true;
		}
		logconfig_Skeleton::get_instance().init(this->_config);
		DDSUtil::event_pub_init(DDS_DOMAIN_ID,
			this->service_name + "_reply",
			&carDrive_Basc_ADASCruiseSet_Reply_desc,
			&dds_rpc_reply_handle,
			NULL,{PROXY_TOKEN, PROXY_TOKEN, ""},this->_config
		);
		DDSUtil::event_sub_init(DDS_DOMAIN_ID,
			this->service_name + "_request",

			&carDrive_Basc_ADASCruiseSet_Request_desc,
			&on_carDrive_Basc_ADASCruiseSet_request_data_available,
			NULL,
			&dds_rpc_request_handle,
			&on_Basc_ADASCruiseSet_request_subscription_matched_cb,{PROXY_TOKEN, PROXY_TOKEN, ""},{},this->_config
		);
		this->Ntf_ADASCruiseSet.init(this->_config);
		this->Ntf_C2_IACCFamlrRdModSwtFb.init(this->_config);
		this->Ntf_AD_NIDSelfLrngFb.init(this->_config);
		this->Ntf_AD_BSDLCAOnOffSet.init(this->_config);
		this->Ntf_AD_SEAOnOffSts.init(this->_config);
		this->init_flag = true;
		return true;

	}

	bool Basc_ADASCruiseSet_Skeleton::destroy() {
		ASF_LOG_DEBUG_ARGS("Basc_ADASCruiseSet_Skeleton::destroy");
		std::lock_guard<std::mutex> guard(init_mutex);
		if (!this->init_flag) {
			return true;
		}
		if (!DDSUtil::dds_client_destroy(&dds_rpc_request_handle)) {
			return false;
		}
		if (!DDSUtil::dds_client_destroy(&dds_rpc_reply_handle)) {
			return false;
		}
		this->Ntf_ADASCruiseSet.destroy();
		this->Ntf_C2_IACCFamlrRdModSwtFb.destroy();
		this->Ntf_AD_NIDSelfLrngFb.destroy();
		this->Ntf_AD_BSDLCAOnOffSet.destroy();
		this->Ntf_AD_SEAOnOffSts.destroy();
		this->init_flag = false;
		return true;
	}

	dds_return_t Basc_ADASCruiseSet_Skeleton::send_reply(carDrive_Basc_ADASCruiseSet_Reply* reply) {
		dds_return_t rc = DDSUtil::send(dds_rpc_reply_handle.writer, reply);
		ASF_LOG_DEBUG_ARGS("Basc_ADASCruiseSet_Skeleton::send_reply hashId=[%d], reqId=[%d], rc=[%d]", reply->data._d, reply->header.relatedRequestId.sequence_number.low, rc);
		return rc;
	}
}
}
}
}
}

